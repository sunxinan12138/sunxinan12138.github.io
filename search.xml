<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>单例模式</title>
      <link href="/2020/05/31/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/05/31/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 类别 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/2020/05/31/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/05/31/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 类别 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring的AOP和IOC</title>
      <link href="/2020/05/27/Spring%E7%9A%84AOP%E5%92%8CIOC/"/>
      <url>/2020/05/27/Spring%E7%9A%84AOP%E5%92%8CIOC/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring的IOC和AOP"><a href="#Spring的IOC和AOP" class="headerlink" title="Spring的IOC和AOP"></a>Spring的IOC和AOP</h1><blockquote><p>Spring(容器/代理类框架)  </p><p><img src="https://i.loli.net/2020/05/27/Pcl8ygk3zEiVHWY.png" alt="image.png"></p></blockquote><h2 id="IOC-控制反转-Inversion-of-Control"><a href="#IOC-控制反转-Inversion-of-Control" class="headerlink" title="IOC(控制反转)(Inversion of Control)"></a>IOC(控制反转)(Inversion of Control)</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><blockquote><ol><li><p>作用: 借助于“第三方”实现具有依赖关系的对象之间的解耦</p></li><li><p>ioc也可以叫DI(依赖注入)</p><ol><li><p>区别</p><p>DI：依赖注入：实现方式</p><p>IOC：控制反转:一种思想</p></li></ol></li><li><p>IOC:</p><ol><li>对象由Spring创建、管理、装配</li><li>控制的内容：控制对象的创建：传统的由程序本身去创建, 框架由Spring来创建</li></ol></li><li><p>反转：(正转：程序自己创建对象) 需要对象时，被动接受Spring容器创建的对象，并且注入程序</p></li><li><p>对象A获得依赖对象B的过程,由主动行为变为了被动行为，控制权颠倒过来了，这就是“控制反转”</p></li><li><p>ioc实现由容器BeanFactory实现</p></li></ol></blockquote><h3 id="java反射机制和工厂模式"><a href="#java反射机制和工厂模式" class="headerlink" title="java反射机制和工厂模式"></a>java反射机制和工厂模式</h3><blockquote><p> 要了解Spring的Ioc实现不得不说到java的反射机制和动态代理模式</p></blockquote><h3 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h3><h2 id="AOP代理-面向切面"><a href="#AOP代理-面向切面" class="headerlink" title="AOP代理-面向切面"></a>AOP代理-面向切面</h2><blockquote><p>正常编程<img src="https://i.loli.net/2020/05/28/rQZ36jmDFYCR5NI.png" alt="image.png"></p></blockquote><blockquote><p>面向切面: 在一个功能(类)中切入一个功能</p></blockquote><h3 id="AOP重要性："><a href="#AOP重要性：" class="headerlink" title="AOP重要性："></a>AOP重要性：</h3><p>aop将公共业务（日志，安全）和领域业务结合。公共业务可以重复使用，程序猿更专注与领域业务 本质动态代理</p>]]></content>
      
      
      <categories>
          
          <category> 框架Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 未完成 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程</title>
      <link href="/2020/05/25/%E7%BA%BF%E7%A8%8B/"/>
      <url>/2020/05/25/%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="线程Thread"><a href="#线程Thread" class="headerlink" title="线程Thread"></a>线程Thread</h1><blockquote><p>Thread隶属于java.lang包下的类 ,java语言的JVM允许程序运行多个线程</p><p>Thread:每个线程通过特定Thread对象的run()方法来完成操作,经常把</p></blockquote><h2 id="程序-线程和进程"><a href="#程序-线程和进程" class="headerlink" title="程序,线程和进程"></a>程序,线程和进程</h2><ul><li><p><strong>程序(Program):</strong>为了完成特定任务, 用某种语言编写的一组指令集合. 即<kbd>一段静态代码</kbd>,静态对象</p></li><li><p><strong>进程(process):</strong>是指程序的一次执行过程, 或是<kbd>正在运行的一个程序</kbd>. 动态过程: 有它自身的产生, 存在和消亡的过程.</p><blockquote><p>如: 运行中的软件qq 浏览器等</p><p>程序是静态的,运行的进程是动态的</p></blockquote></li><li><p><strong>线程(Thread):</strong>进程细化一些为线程,是一个程序内部的一条执行路径</p><blockquote><p>当热程序在同一时间可以有多个执行路径, 也就是支持多线程</p></blockquote></li></ul><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><blockquote><p>java中线程分为:<strong>守护线程(daemon)</strong>和<strong>用户线程</strong></p><blockquote><p>虚拟机必须保证用户线程执行完毕,守护线程不需要等待: 如后台记录日志,内存监控,gc垃圾回收等</p></blockquote><p>守护线程设置: thread.setDemon(true为守护线程)</p></blockquote><pre><code>1.线程就是独立执行的路径2.在程序运行时，即使没有创建线程，也会有多个线程(javg gc线程，主线程)3.main()称为主线程 ，为系统的入口，用于执行整个程序4.在一个进程中，开了多个线程，线程的运行由调度器安排调度，调度器是与操作系统5.紧密相关的，先后顺序是不能人为干预的6.对同一份资源操作时，会存在资源抢夺问题，要加入并发控制7.线程会带来额外的开销，cpu调度时间，并发控制开销8.每个线程在自己的工作内存中交互，内存控制不当会造成数据不一致</code></pre><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><blockquote><p>在JDK中Thread.State枚举表示了线程的六种状态</p><blockquote><p>getState():获取状态:hamburger:</p></blockquote><ul><li>新生(NEW):  当一个Thread类或子类的对象被声明并且创建后,新的线程处于新建状态</li><li>就绪(RUNABLE): 当线程被start()后,将进入线程队列等待cpu时间片</li><li>运行(): 线程被调度并且获得处理器资源时,进入运行状态,-run()方法内执行</li><li>阻塞(BLOCKED): 被人为挂起或者其它方式,让出cpu并临时终止自己执行<ul><li>(Waiting):正在等待另一个线程执行特定动作的线程出于此状态</li><li>(TIMED_WAITTING):正在等待另一个线程执行动作达到指定等待时间的线程处于此状态</li></ul></li><li>死亡(TERMINATED): 线程完成或者出现错误/异常被强制终止<ul><li>主动线程停止方式：推荐使用标志位，设置一个停止状态让线程自然死亡</li></ul></li></ul></blockquote><p>​                                                            如图</p><p><img src="https://i.loli.net/2020/05/27/sQ7TN4wSIAkUCFp.png" alt="线程生命周期"></p><h2 id="线程的三种创建方式"><a href="#线程的三种创建方式" class="headerlink" title="线程的三种创建方式"></a>线程的三种创建方式</h2><blockquote><p><strong>Junit单元测试线程异常</strong>: 具体原因不太了解但是和junit的实现有关(记到小本本–下次在了解)</p></blockquote><h3 id="一-继承Thread类"><a href="#一-继承Thread类" class="headerlink" title="一 . 继承Thread类"></a>一 . 继承Thread类</h3><blockquote><p>重写run()方法 ,并且用thread.start()启动线程</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadBuild</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadTest threadTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadTest<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 启动线程</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 重写run方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 线程命名</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取当前线程名 + 变量</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>程序中创建了一个 <strong>线程1</strong> 线程 在主线程中启动 线程间是独立执行的 ,如图:</p><p><img src="/images/Thread.png" alt="执行方式图解"></p><p>所以会看到并行交替执行的情况:</p><p><img src="/images/%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="并没有顺序"></p></blockquote><p>在Thread中有以下代码保证了Start()方法不能重复调用:<img src="/images/start.png" alt="start的源码"></p><h4 id="练习"><a href="#练习" class="headerlink" title="练习:"></a>练习:</h4><blockquote><p> 用多线程写图片复制/用线程实现3个售票窗口(<strong>要考虑产生资源冲突</strong>)(代码emmmm就不粘了)</p></blockquote><h3 id="二-实现Runnable接口"><a href="#二-实现Runnable接口" class="headerlink" title="二. 实现Runnable接口"></a>二. 实现Runnable接口</h3><blockquote><p>实现Runnable接口并且重写run()方法</p><p>由于Thread类为一个代理类 代理了Runnable</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 实现接口的线程创建方式</span>        ThreadTest threadTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Runnable接口实现类对象</span>        <span class="token comment" spellcheck="true">// 将此对象作为形参放入 Thread的构造方法中 并创造对象</span>        Thread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>threadTest<span class="token punctuation">)</span><span class="token punctuation">;</span>         Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>threadTest<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"1Thread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 命名</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 启动线程</span>           thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// lamdba表达式（1.8新特性）</span>     <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><ol><li><p>Thread 本身就实现了Runnable接口</p></li><li><p>实现方式优于继承方式</p><ol><li>避免了java中单继承的局限性</li><li>在操作同一份资源中,更适合使用实现方式<ol><li>一个对象的资源给多个线程使用</li></ol></li></ol></li></ol></blockquote><h3 id="三-实现Callable接口"><a href="#三-实现Callable接口" class="headerlink" title="三. 实现Callable接口"></a>三. 实现Callable接口</h3><blockquote><p>重写的call()方法 </p><p>需要执行服务和关闭服务(ExecutorService的对象 )<br><kbd>ExecutorService service = Executors.newFixedThreadPool(3);</kbd></p><p>提交执行 submit(线程对象)<br><kbd>Future f1 = service.submit(c);</kbd></p><p>获取返回值 记得结束服务<br><kbd>String s1 = (String) f1.get();</kbd><kbd>service.shutdown();</kbd></p></blockquote><h2 id="Thread类常用方法"><a href="#Thread类常用方法" class="headerlink" title="Thread类常用方法"></a>Thread类常用方法</h2><blockquote><ol><li><p>start(): 启动线程并执行响应的run()方法</p></li><li><p>run():子线程要执行的代码</p></li><li><p>currentThread(): 静态的,调用当前的线程</p></li><li><p>getName()/setName(): 获取和设置线程名字</p></li><li><p>yield():  调用此方法的线程放弃当前cpu的执行权，礼让别的线程（我让了但是，你们抢不抢得到那不归我管）</p></li><li><p>join(): 在A线程中调用B线程的join方法. （插队）</p><blockquote><p><strong>表示</strong>: A线程停止,直到B线程执行完毕 A线程在执行后面的代码</p></blockquote></li><li><p>isAlive(): 判断当前线程是否存活</p></li><li><p>sleep(long time): 当前线程睡眠time毫秒(1000ms = 1s)</p><ol><li>不会释放线程</li></ol></li><li><p>线程通信中wait()</p></li><li><p>notify()：释放优先级高的等待的线程</p></li><li><p>notifyAll()：释放所有等待的线程</p></li><li><p>设置线程的优先级</p><blockquote><p>getPriority(): 返回当前线程优先级</p><p>setPriority(int newPriority): 改变当前线程优先级 : <kbd>正常为5,最大10,最小是1</kbd></p></blockquote></li></ol></blockquote><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><blockquote><p><del>线程不安全的集合:ArrayList –&gt; CopyOnWriterArrayLis(JUC下并发安全的包)</del>(待完成)</p></blockquote><blockquote><p>刚才的窗口买票程序就会出现安全问题</p><p>原因:由于多个线程在操作共享的数据时,在其中一个线程未执行完毕时,另一个线程进入,导致共享数据出现问题</p></blockquote><p><img src="https://i.loli.net/2020/05/28/EhVquDZ5Bwpit4g.png" alt="线程安全出现的原因.png"></p><ul><li><p>如何解决线程安全的问题? </p><blockquote><p>想办法热那个一个线程操作数据完毕后,其他线程才能操作</p></blockquote></li><li><p>java中实现线程安全,线程同步机制:</p><ul><li><p>一 同步代码块</p><blockquote><p>synchronized关键字 — 要有一个对象充当同步监视器(缺点:会影响效率)</p><p>同步监视器:由一个类的对象充当.当一个线程获取监视器,就执行代码. — <strong>锁</strong></p></blockquote><p><img src="https://i.loli.net/2020/05/28/dEHqCfLVynIOJQP.png" alt="synchronized.png"></p></li></ul></li></ul><pre><code>实现代码:```java public void run() {        while (true) {            synchronized (this) { // 用本类的对象为同步监视器                if (ticket &gt; 0) { // 如果有票 修改变量                    try {                        Thread.sleep(10); // 假设睡眠                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                    System.out.println(Thread.currentThread().getName() + &quot;:&quot; + ticket);                    ticket--;                }            }        }    }```</code></pre><ul><li><p>二 同步方法</p><blockquote><p>保证同一时间只有一个线程访问此方法</p><p>用synchronized修饰方法: <kbd>public synchronized void method()</kbd>叫同步方法</p><p>同步监视器对象默认为当前对象</p></blockquote></li></ul><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><blockquote><ul><li>概念: 不同的线程分别占用对方的同步资源不放弃,都在等待对方放弃自己需要的同步资源,就形成了死锁</li><li>解决办法: <ul><li>算法, 原则</li><li>尽量减少同步资源的定义</li></ul></li></ul></blockquote><h4 id="LOCK锁"><a href="#LOCK锁" class="headerlink" title="LOCK锁"></a>LOCK锁</h4><blockquote><ul><li>从JDk5.0开始, JAVA提供了更强大的线程同步机制–通过显式定义同步锁对象来实现同步. 同步锁使用Lock对象充当</li><li>Java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具. 锁提供了对共享资源的独占访问, 每次只能有一个线程对Lock对象加锁, 线程开始访问共享资源之前硬获得LOck对象</li><li>ReentrantLock(可重入锁)类实现了Lock, 它拥有与synchronized相同的并发性,在实现线程安全控制中,比较常用的是ReentrantLock, 可以显式加锁,释放锁</li></ul></blockquote><blockquote><p><strong>Lock与synchronized的对比</strong></p><ul><li>Lock是显式锁(需要手动开关)  synchronized是隐式锁,自动释放</li><li>Lock只是锁代码块</li><li>使用Lock, JVM调度线程花费时间少,性能好. 而且具有更好的扩展性(提供更多的子类)</li><li>优先级:<ul><li>Lock &gt; 同步代码块&gt;同步方法</li></ul></li></ul></blockquote><pre class=" language-java"><code class="language-java"> <span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 官方建议用Try，catch， finally</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 加锁</span>               <span class="token comment" spellcheck="true">// 需要加锁的代码区</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 解锁</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><blockquote><p>关键字:wait(), notify()和 notifyAll()</p><ul><li><p>wait(): 令当前线程挂起cpu/同步资源器, 使别的线程可以访问并修改公共资源,当前线程会在排队等待状态.</p></li><li><p>notify():唤醒正在排队等待同步资源的的<strong>优先级最高</strong>的线程 – 结束等待</p></li><li><p>notifyAll(): 唤醒正在排队等待同步资源的的<strong>所有</strong>线程 – 结束等待</p><p>注意: 这三个方法为java.lang.Object下的 而且只有在synchronized方法或代码块中才会使用.</p></li></ul></blockquote><h2 id="写个生产者-消费者练习"><a href="#写个生产者-消费者练习" class="headerlink" title="写个生产者/消费者练习"></a>写个生产者/消费者练习</h2><blockquote><p>分析</p><pre><code>1. 是否考虑线程 2. 是否涉及共享数据 3. 如果有共享数据 考虑线程安全/同步的问题 4. 是否有线程通信</code></pre></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 管城法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">P2CTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 主线程</span>        Clerk clerk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Clerk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Producer producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>clerk<span class="token punctuation">)</span><span class="token punctuation">;</span>        Consumer consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>clerk<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>producer<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>producer<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread c3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"生产1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"生产2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"消费1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"消费2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"消费3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Clerk</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 店员 公共部分</span>    <span class="token keyword">int</span> product<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 生产到20 停止生产 0开始生产停止购买</span>    <span class="token comment" spellcheck="true">// 同步方法</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token operator">>=</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果作满了 停止制作</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"暂停制作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            product <span class="token operator">+=</span> num<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 添加制作数量</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"生产了: "</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">"====现在还有"</span> <span class="token operator">+</span> product<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果有存货就释放锁 让用户购买</span>                <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">buyProduct</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"暂停购买"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            product <span class="token operator">-=</span> num<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"购买了了: "</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">"====现在还有"</span> <span class="token operator">+</span> product<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果数量不足释放生产者来制作</span>                <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 生产者</span>    Clerk clerk<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Producer</span><span class="token punctuation">(</span>Clerk clerk<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clerk <span class="token operator">=</span> clerk<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            clerk<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 消费者</span>    Clerk clerk<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Consumer</span><span class="token punctuation">(</span>Clerk clerk<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clerk <span class="token operator">=</span> clerk<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            clerk<span class="token punctuation">.</span><span class="token function">buyProduct</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="线程池-了解"><a href="#线程池-了解" class="headerlink" title="线程池(了解)"></a>线程池(了解)</h2><blockquote><ul><li>将线程放入池子,方便使用和管理,也避免了销毁造成的浪费</li><li>ExecutorService:线程池接口</li><li>Executors(Runable 接口):工具类,线程池工厂</li></ul></blockquote><pre class=" language-java"><code class="language-java">ExecutorService service <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 数量</span>service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SJSThread</span><span class="token punctuation">)</span><span class="token punctuation">;</span>service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SJSThread</span><span class="token punctuation">)</span><span class="token punctuation">;</span>service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SJSThread</span><span class="token punctuation">)</span><span class="token punctuation">;</span>service<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结束线程连接池</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程的基础 </tag>
            
            <tag> 未完成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单的工厂模式</title>
      <link href="/2020/05/23/%E7%AE%80%E5%8D%95%E7%9A%84%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/05/23/%E7%AE%80%E5%8D%95%E7%9A%84%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="简单的工厂模式-大话设计模式"><a href="#简单的工厂模式-大话设计模式" class="headerlink" title="简单的工厂模式 - 大话设计模式"></a>简单的工厂模式 - 大话设计模式</h1><blockquote><p>当你需要实例化哪个类,或者未来会不会增加实例化对象,所以考虑用一个单独的类来做这个创造实例化的过程–<kbd>工厂</kbd> </p></blockquote><blockquote><p>耦合度降低 每个实例是相对独立的 做到了<strong>容易维护,扩展和复用</strong></p></blockquote><h2 id="例子"><a href="#例子" class="headerlink" title="例子:"></a>例子:<br></h2><p><img src="/images/SimpleFactory.png" alt="简单的工厂模式"><br>1.PO类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>sjs<span class="token punctuation">.</span>SimpleFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Operation</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> numberA<span class="token punctuation">;</span>    <span class="token keyword">double</span> numberB<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getNumberA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> numberA<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNumberA</span><span class="token punctuation">(</span><span class="token keyword">double</span> numberA<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>numberA <span class="token operator">=</span> numberA<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getNumberB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> numberB<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNumberB</span><span class="token punctuation">(</span><span class="token keyword">double</span> numberB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>numberB <span class="token operator">=</span> numberB<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getReasult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.加减乘除类(封装类继承基类)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>sjs<span class="token punctuation">.</span>SimpleFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Add</span> <span class="token keyword">extends</span> <span class="token class-name">Operation</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 重写getResult方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getReasult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>numberA <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span>numberB<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Operation</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 重写getResult方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getReasult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>numberA <span class="token operator">-</span> <span class="token keyword">super</span><span class="token punctuation">.</span>numberB<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.简单工厂类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>sjs<span class="token punctuation">.</span>SimpleFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperationFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 当你输入表达式工厂自动匹配类创建对象</span>    <span class="token comment" spellcheck="true">// 实例化对象的问题交给工厂</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Operation <span class="token function">operation</span><span class="token punctuation">(</span>String operate<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 用符号自动匹配要创建的实例</span>        Operation operation <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>operate<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">"+"</span><span class="token operator">:</span>                <span class="token comment" spellcheck="true">// add</span>                operation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"-"</span><span class="token operator">:</span>                <span class="token comment" spellcheck="true">// sub</span>                operation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> operation<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.使用简单工厂模式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>sjs<span class="token punctuation">.</span>SimpleFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 简单工厂模式()</span>        <span class="token comment" spellcheck="true">// 用工厂类自动创建实例</span>        Operation operation <span class="token operator">=</span> OperationFactory<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        operation<span class="token punctuation">.</span><span class="token function">setNumberA</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        operation<span class="token punctuation">.</span><span class="token function">setNumberB</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>operation<span class="token punctuation">.</span><span class="token function">getReasult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 没有代理模式</span><span class="token comment" spellcheck="true">//        Operation add = new Add();</span><span class="token comment" spellcheck="true">//        add.setNumberA(12);</span><span class="token comment" spellcheck="true">//        add.setNumberB(23);</span><span class="token comment" spellcheck="true">//        System.out.println(add.getReasult());</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        Operation sub = new Sub();</span><span class="token comment" spellcheck="true">//        sub.setNumberA(12);</span><span class="token comment" spellcheck="true">//        sub.setNumberB(23);</span><span class="token comment" spellcheck="true">//        System.out.println(sub.getReasult());</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 抄书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大话设计模式 </tag>
            
            <tag> 简单工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一题-76.最小覆盖子串</title>
      <link href="/2020/05/23/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-76-%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2-1/"/>
      <url>/2020/05/23/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-76-%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2-1/</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode每日一题-76-最小覆盖子串"><a href="#leetcode每日一题-76-最小覆盖子串" class="headerlink" title="leetcode每日一题:76.最小覆盖子串"></a>leetcode每日一题:76.最小覆盖子串</h1><p><a href="https://leetcode-cn.com/problems/minimum-window-substring/" target="_blank" rel="noopener">76.最小覆盖子串</a><br><br><img src="/images/76.png" alt="img"><br><br>代码和注释:</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mainTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">minWindow</span><span class="token punctuation">(</span><span class="token string">"ADOBECODEBANC"</span><span class="token punctuation">,</span> <span class="token string">"ABC"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 滑动窗口</span>    <span class="token keyword">public</span> String <span class="token function">minWindow</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> String t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 左右指针</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 存储s和t出现次数</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> snum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tnum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tlen <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// t串存入</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tlen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tnum<span class="token punctuation">[</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> minLenth <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 右指针移动</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            snum<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将s出现的次数存入数组</span>            <span class="token comment" spellcheck="true">// 如果满足 当前字符是t字符里的 并且在当前范围只出现一次</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tnum<span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> tnum<span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">>=</span> snum<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 当长度满足t时</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> tlen<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 从左到右移动left 指针直到count长度不足</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tnum<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> tnum<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">>=</span> snum<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    count<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 找到最短长度 将初始和结尾储存</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> minLenth<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    minLenth <span class="token operator">=</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    min <span class="token operator">=</span> left<span class="token punctuation">;</span>                    max <span class="token operator">=</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                snum<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            right<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DataBase&amp;algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的hexo博客搭建配置更改</title>
      <link href="/2020/05/22/%E6%88%91%E7%9A%84hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE%E6%9B%B4%E6%94%B9/"/>
      <url>/2020/05/22/%E6%88%91%E7%9A%84hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE%E6%9B%B4%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="从0开始搭建hexo博客-win10"><a href="#从0开始搭建hexo博客-win10" class="headerlink" title="从0开始搭建hexo博客(win10)"></a>从0开始搭建hexo博客(win10)</h1><h2 id="基本安装"><a href="#基本安装" class="headerlink" title="基本安装"></a>基本安装</h2><blockquote><p>安装node.js <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js官网下载地址</a></br><br>安装git <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git官方下载地址</a></br><br>在git/gitee 新建库并且以你的名字命名 git:<kbd>yourName.github.io</kbd> gitee:<kbd>yourName</kbd><br><br>安装hexo<kbd>$ npm install -g hexo-cli</kbd> win会有警告 忽略就好</br><br>新建: (<strong>找到你的文件夹</strong>)执行 <kbd>hexo init</kbd>   <kbd>$ cd </kbd>   <kbd>$ npm install </kbd></br><br>配置:</p><blockquote><p>可以参考 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">这里</a> <br></p><pre><code>建议配置:**url**: https://gitee.com/xxx/xxx.git 你的博客访问地址**per_page**:改为6的倍数 6,12,18 **# Site** 此处 有更多关于首页配置**title**: 博客名字</code></pre></blockquote></blockquote><p>hexo的目录配置</p><pre class=" language-markdown"><code class="language-markdown">|-- demo//项目跟目录名<span class="token code keyword">    |-- .gitignore//git时忽略的文件或目录</span><span class="token code keyword">    |-- package-lock.json</span><span class="token code keyword">    |-- package.json//应用程序的信息</span><span class="token code keyword">    |-- _config.yml//网站的配置信息</span><span class="token code keyword">    |-- scaffolds//模板文件夹，Hexo的模板是指在新建的markdown文件中默认填充的内容。</span><span class="token code keyword">    |   |-- draft.md</span><span class="token code keyword">    |   |-- page.md</span><span class="token code keyword">    |   |-- post.md//博文模板</span><span class="token code keyword">    |-- source//资源文件夹，存放用户资源</span><span class="token code keyword">    |   |-- _posts//博文目录</span><span class="token code keyword">    |       |-- hello-world.md//博文</span><span class="token code keyword">    |-- themes//主题文件夹，Hexo 会根据主题来生成静态页面</span><span class="token code keyword">        |-- landscape.//默认主题</span></code></pre><h2 id="配置git和gitee库"><a href="#配置git和gitee库" class="headerlink" title="配置git和gitee库"></a>配置git和gitee库</h2><ol><li>首先你要有这两个仓库</li><li>修改[^ _config.yml ] 此文件的配置<pre><code>deploy:type: &#39;git&#39;repo:   github: https://github.com/xxxx/xxxx.github.io.git   gitee: https://gitee.com/xxxx/xxxx.gitbranch: master</code></pre></li><li>在执行 hexo d 就能在你的链接访问啦</li><li><strong>提示</strong>：gitee要启动一下gitee Pages<kbd>自你的库-服务- gitee pages</kbd>每次更新后要重新更新一下gitee Pages<h2 id="基本语句"><a href="#基本语句" class="headerlink" title="基本语句"></a>基本语句</h2><ul><li>执行 <kbd>hexo server</kbd> == <kbd>hexo s</kbd> 默认为 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br></li><li><ul><li><kbd>-p</kbd> 选项，指定服务器端口，默认为 4000</li></ul></li><li><ul><li><kbd>-i</kbd> 选项，指定服务器 IP 地址，默认为 0.0.0.0</li></ul></li><li><ul><li><kbd>-s</kbd> 选项，静态模式 ，仅提供 public 文件夹中的文件并禁用文件监视</li></ul></li><li><kbd>hexo generate</kbd> 命令用于生成静态文件，一般可以简写为 hexo g</li><li><kbd>hexo d</kbd> 发布到 git/gitee库</li><li><strong>说明</strong> ：部署前需要修改 _config.yml 配置文件，下面以 git/gitee 为例进行</li><li><kbd>hexo clean</kbd> 命令用于清理缓存文件，是一个比较常用的命令</li><li>根目录命令行输入hexo new &lt;模板&gt; &lt;文章名&gt; 新建博客</li><li>末班在scaffold文件夹下</li></ul></li></ol><table><thead><tr><th>参数</th><th>功能</th><th>路径</th></tr></thead><tbody><tr><td>post</td><td>新建文章</td><td>/source/_posts/</td></tr><tr><td>draft</td><td>新建草稿</td><td>/source/_drafts/</td></tr><tr><td>page</td><td>新建页面（标签页，分类页等）</td><td>/source/</td></tr></tbody></table><h2 id="主题安装配置"><a href="#主题安装配置" class="headerlink" title="主题安装配置"></a>主题安装配置</h2><p> 有很多优秀好看的主题 next等 不想折腾就用next吧 用的多排坑的也多 <br><br> 我的是Matery 我的主页下方有下载地址[^ Theme Matery ] 或者戳<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">这里</a><br><br> (下载的主题有说明文档)😜 </p>]]></content>
      
      
      <categories>
          
          <category> build </category>
          
      </categories>
      
      
        <tags>
            
            <tag> build </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
