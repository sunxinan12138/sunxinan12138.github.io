<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>开发插件</title>
      <link href="/2020/07/26/%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6/"/>
      <url>/2020/07/26/%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="开发插件"><a href="#开发插件" class="headerlink" title="开发插件"></a>开发插件</h1><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><h3 id="1-Maven是啥"><a href="#1-Maven是啥" class="headerlink" title="1.Maven是啥"></a>1.Maven是啥</h3><p>当我第一次听到这玩应,觉得很高大上. 说白了 就是个<strong>自动导入jar包的</strong></p><ul><li><p>Maven还是很强大的:</p><ul><li>项目继承(在多个模块的项目中很好用的)</li><li>解决jar冲突</li><li>自动导入jar(从本地库寻找如果没有–会自动去中央仓库下载)<ul><li><a href="https://mvnrepository.com/" target="_blank" rel="noopener">依赖配置地址</a></li></ul></li></ul></li><li><p>生命周期</p><p><img src="https://www.runoob.com/wp-content/uploads/2018/09/7642256-c967b2c1faeba9ce.png" alt="Maven生命周期"></p></li></ul><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><p><a href="https://blog.csdn.net/daffordil/article/details/89419252" target="_blank" rel="noopener">安装看这个</a> 把镜像和本地库地址配置了就好</p><h3 id="3-自动配置"><a href="#3-自动配置" class="headerlink" title="3. 自动配置"></a>3. 自动配置</h3><ul><li>常用的三中模式</li></ul><pre class=" language-java"><code class="language-java"><span class="token number">1</span>、cocoon<span class="token operator">-</span><span class="token number">22</span><span class="token operator">-</span>archetype<span class="token operator">-</span>webapp   <span class="token operator">--</span> <span class="token number">2</span>、maven<span class="token operator">-</span>archetype<span class="token operator">-</span>quickstart   <span class="token operator">--</span> <span class="token number">7</span><span class="token number">3</span>、maven<span class="token operator">-</span>archetype<span class="token operator">-</span>webapp       <span class="token operator">--</span> <span class="token number">10</span></code></pre><blockquote><p><a href="https://blog.csdn.net/sirdean/article/details/81636658" target="_blank" rel="noopener">其他的可以看这里</a></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token string">'groupId'</span><span class="token operator">:</span> 公司名<span class="token string">'artifactId'</span><span class="token operator">:</span> 项目名字<span class="token string">'version'</span><span class="token operator">:</span> 版本 <span class="token punctuation">(</span>默认是 <span class="token number">1.0</span><span class="token operator">-</span>SNAPSHOT<span class="token punctuation">)</span><span class="token string">'package'</span><span class="token operator">:</span> com<span class="token punctuation">.</span>sjs<span class="token operator">:</span>包名</code></pre><p>Maven通过’groupId’, ‘artifactId’, ‘version’来定位 项目/类库 坐标</p><h3 id="4-cmd配置-命令自动生成"><a href="#4-cmd配置-命令自动生成" class="headerlink" title="4. cmd配置(命令自动生成)"></a>4. cmd配置(命令自动生成)</h3><p>创建:</p><pre class=" language-java"><code class="language-java">mvn archetype<span class="token operator">:</span>generate指令直接创建项目    mvn archetype<span class="token operator">:</span>generate <span class="token operator">-</span>DgroupId<span class="token operator">=</span>公司名 <span class="token operator">-</span>DartifactId<span class="token operator">=</span>工程名 <span class="token operator">-</span>Dviersion<span class="token operator">=</span><span class="token number">1.0</span><span class="token operator">-</span>SNAPSHOT <span class="token operator">-</span>Dpackage<span class="token operator">=</span>包名</code></pre><p>常用命令</p><pre class=" language-java"><code class="language-java">maven <span class="token operator">-</span>vmvn test<span class="token operator">:</span> 测试 <span class="token punctuation">(</span>会有测试报告日止<span class="token punctuation">)</span>mvn clean<span class="token operator">:</span> cleanmvn <span class="token keyword">package</span><span class="token operator">:</span> 将当前这个项目打包成jar，或者是war，pommvn install<span class="token operator">:</span> 首先将pom<span class="token punctuation">.</span>xml中需要的jar包安装到本地仓库上，并且，将自己打包然后安装到本地仓库上。mvn compile<span class="token operator">:</span> 编译源代码</code></pre><ul><li><strong>scope(定义依赖的范围)的6中属性值：</strong></li></ul><pre class=" language-java"><code class="language-java">compile：默认的范围，编译测试运行都有效provided：编译和测试有效runtime：测试和运行时有效test：只在测试时有效system：在编译和测试时有效，移植性低，与本机系统相关联<span class="token keyword">import</span>：导入范围，她只使用在dependencyManagement中，表示从其他的pom中导入dependency的配置</code></pre>]]></content>
      
      
      <categories>
          
          <category> TOOL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql</title>
      <link href="/2020/07/07/Mysql/"/>
      <url>/2020/07/07/Mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><h2 id="Mysql介绍"><a href="#Mysql介绍" class="headerlink" title="Mysql介绍"></a>Mysql介绍</h2><ul><li>java企业级开发离不开数据库</li><li><strong>数据是所有软件体系中核心存在</strong>   (DBA职位)</li></ul><p>狂神说的:</p><blockquote><p>只会写代码,学好数据库,混饭吃</p><p>操作系统,数据结构 ! 不错的程序猿</p><p>离散数学,数字电路, 体系结构, 编译原理 + 经验 大佬</p></blockquote><h3 id="1-数据库-DB-DataBase"><a href="#1-数据库-DB-DataBase" class="headerlink" title="1. 数据库(DB, DataBase)"></a>1. 数据库(DB, DataBase)</h3><p>数据的仓库</p><p>SQL: 可以存储大量数据 500万以下都没问题</p><h4 id="数据库分类-SQL-NOSQL"><a href="#数据库分类-SQL-NOSQL" class="headerlink" title="数据库分类(SQL/NOSQL)"></a>数据库分类(SQL/NOSQL)</h4><ul><li>关系型数据库(SQL)<ul><li>Mysql,  Oracle,  Sql Server,  DB2, SQLlite</li><li>通过表和表之间, 行和列之间的关系进行数据存储.  </li></ul></li><li>菲关系型数据库(NOSQL) <ul><li>Redis,  MongDB</li><li>存储对象,通过对象的自身属性.  而且使用key-value的关系存储的</li></ul></li></ul><p>==DBSM(数据库管理系统)==</p><ul><li>数据库的管理软件, 管理和维护我们的数据</li><li>MySql 就是DBSM</li></ul><h3 id="Mysql操作语句"><a href="#Mysql操作语句" class="headerlink" title="Mysql操作语句"></a>Mysql操作语句</h3><table><thead><tr><th>操作语句</th><th>作用</th></tr></thead><tbody><tr><td>mysqld - install</td><td>安装数据库(在bin目录下)</td></tr><tr><td>mysqld –initialize-insecure –user=mysql</td><td>初始化数据文件</td></tr><tr><td>flush privileges;</td><td>刷新权限</td></tr><tr><td>net start mysql</td><td>启动Mysql服务</td></tr><tr><td>net stop mysql</td><td>结束Mysql服务</td></tr><tr><td>exit</td><td>退出Mysql</td></tr></tbody></table><h2 id="数据库操作语句"><a href="#数据库操作语句" class="headerlink" title="数据库操作语句"></a>数据库操作语句</h2><blockquote><p>书写顺序</p><p>select – from  – where  – group by  – order by</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查看有什么数据库</span><span class="token keyword">show</span> <span class="token keyword">database</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 创建库</span>creat <span class="token keyword">database</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 使用库</span><span class="token keyword">user</span> 库名<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 展示表</span><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 显示结构</span><span class="token keyword">describe</span> 表名<span class="token punctuation">;</span><span class="token keyword">desc</span> 表名<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 创建表</span><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>列名 类型<span class="token punctuation">(</span>长度<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 更新</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span>  <span class="token keyword">column</span>  列名 类型<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span>  列名 类型<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--------------------------------------------------</span><span class="token comment" spellcheck="true">--查看数据库建库语句</span><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">database</span> 库<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查看表的定义语句</span><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> 表<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 展示表结构</span><span class="token keyword">desc</span> 表<span class="token punctuation">;</span></code></pre><h2 id="数据库聚合函数"><a href="#数据库聚合函数" class="headerlink" title="数据库聚合函数"></a>数据库聚合函数</h2><blockquote><p>聚合函数: 他们只运行非空值,如果有空值将不会计算在内</p><p>而且默认重复值会被取到</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 基本计算</span><span class="token function">MAX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">MIN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">AVG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">count</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span> 一共多少行如果是<span class="token operator">*</span> 那就是总数<span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> 参数<span class="token punctuation">)</span>  除去重复<span class="token comment" spellcheck="true">-- 去重</span><span class="token keyword">DISTINCT</span> 名字<span class="token comment" spellcheck="true">--日期</span>    <span class="token comment" spellcheck="true">-- 格式化日期</span>    <span class="token keyword">data</span> _format<span class="token punctuation">(</span>获取的日期<span class="token punctuation">,</span><span class="token string">'%Y%m%d'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">-- 当前时间</span>    CURDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 正则表达式 </span><span class="token operator">regexp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">-- 模糊查询不用%</span>    <span class="token comment" spellcheck="true">-- ^a 表示以a开始</span>    <span class="token comment" spellcheck="true">-- a$ 以a结尾</span>    <span class="token comment" spellcheck="true">-- |  逻辑与</span>    <span class="token comment" spellcheck="true">-- [abc] 包括其中任一个</span>    <span class="token comment" spellcheck="true">-- [a-b] - 表示a到b的任一个</span>LAST_INSERT_ID<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">-- 最近插入ID</span><span class="token comment" spellcheck="true">-- 分组</span><span class="token keyword">group</span> <span class="token keyword">by</span> 列<span class="token number">1</span><span class="token punctuation">,</span>列<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">-- 在聚合函数(分组)后使用 的条件筛选</span><span class="token keyword">having</span>条件 <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">and</span> 条件<span class="token number">2</span><span class="token comment" spellcheck="true">-- WITH ROLLUP运算</span>用来统计当前列的总和， 统计的是聚合函数的列  计算的结果是聚合函数的方式 sum是和， AVG是平均数<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> 列<span class="token number">1</span><span class="token punctuation">,</span>列<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">WITH ROLLUP</span> </code></pre><table><thead><tr><th>having</th><th>where</th></tr></thead><tbody><tr><td>只能判断select过的列名</td><td>能判断所有列名</td></tr><tr><td>其他差不多</td><td></td></tr></tbody></table><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 家早va的并且 订单总额大于100</span><span class="token keyword">SELECT</span>    <span class="token number">c</span><span class="token punctuation">.</span>customer_id<span class="token punctuation">,</span>    <span class="token number">c</span><span class="token punctuation">.</span>first_name<span class="token punctuation">,</span>    <span class="token number">c</span><span class="token punctuation">.</span>last_name<span class="token punctuation">,</span>    <span class="token function">SUM</span><span class="token punctuation">(</span> oi<span class="token punctuation">.</span>quantity <span class="token operator">*</span> oi<span class="token punctuation">.</span>unit_price <span class="token punctuation">)</span> <span class="token keyword">AS</span> spend <span class="token keyword">FROM</span>    orders o    <span class="token keyword">JOIN</span> customers <span class="token number">c</span> <span class="token keyword">USING</span> <span class="token punctuation">(</span> customer_id <span class="token punctuation">)</span>    <span class="token keyword">JOIN</span> order_items oi <span class="token keyword">USING</span> <span class="token punctuation">(</span> order_id <span class="token punctuation">)</span> <span class="token keyword">WHERE</span>    <span class="token number">c</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'VA'</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>    <span class="token number">c</span><span class="token punctuation">.</span>customer_id<span class="token punctuation">,</span>    <span class="token number">c</span><span class="token punctuation">.</span>first_name<span class="token punctuation">,</span>    <span class="token number">c</span><span class="token punctuation">.</span>last_name<span class="token keyword">HAVING</span>    spend <span class="token operator">></span> <span class="token number">90</span></code></pre><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="查询-排序"><a href="#查询-排序" class="headerlink" title="查询/排序"></a>查询/排序</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 条件查询</span><span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">and</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">or</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- 是否存在 可以代替and操作</span>    <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">-- 在...之间</span>    <span class="token keyword">WHERE</span> <span class="token operator">between</span> <span class="token number">10</span> <span class="token operator">and</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- 空, 非空</span>    <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token operator">/</span> <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span>  <span class="token comment" spellcheck="true">-- 模糊查询 like %表示任意数量字符 _表示单个任意字符 可以有多个_</span><span class="token keyword">where</span> 列 <span class="token operator">like</span> <span class="token string">'%val%'</span><span class="token operator">LIKE</span> <span class="token string">'___啊'</span><span class="token comment" spellcheck="true">-- 排序</span><span class="token keyword">order</span> <span class="token keyword">by</span> 列  <span class="token keyword">desc</span> 降序 <span class="token keyword">asc</span> 升序<span class="token comment" spellcheck="true">-- 截取</span><span class="token keyword">limit</span> x 表示从头截取x个<span class="token keyword">limit</span> y<span class="token punctuation">,</span>x 表示从y开始截取x个 <span class="token punctuation">(</span>分页会用<span class="token punctuation">)</span></code></pre><h3 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询:"></a>内连接查询:</h3><blockquote><p>复合主键: 表中主键数量超过一列</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- inner可以省略</span><span class="token keyword">inner</span> <span class="token keyword">join</span> 表<span class="token number">1</span> <span class="token keyword">on</span> 条件<span class="token comment" spellcheck="true">-- 跨数据库链接</span><span class="token keyword">join</span> <span class="token number">a</span>库<span class="token punctuation">.</span><span class="token number">a</span>表<span class="token comment" spellcheck="true">-- 多表查询</span><span class="token keyword">from</span> 表<span class="token number">1</span> <span class="token keyword">join</span> 表<span class="token number">2</span> <span class="token keyword">on</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">join</span> 表<span class="token number">3</span> <span class="token keyword">on</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">-- 复合链接: 知识点:复合主键 就是多了一个判断条件</span><span class="token keyword">join</span> 表 <span class="token keyword">on</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">and</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">-- 隐式链接 </span>把 <span class="token keyword">join</span> <span class="token keyword">on</span> 用 <span class="token keyword">where</span> 代替 尽量不使用<span class="token keyword">where</span></code></pre><h3 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询:"></a>外连接查询:</h3><blockquote><p>内连接如果不满足 on 的条件不会返回 </p><p>外连接会以 left/right 为主表 不满足也会返回</p><p>outer join (outer可以省略)</p><ul><li>两种:<ul><li>左连接: left join  (一般情况使用左连接)</li><li>右链接: right join</li></ul></li></ul></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 多表连接</span>例子:<span class="token keyword">SELECT</span>    o<span class="token punctuation">.</span>order_date<span class="token punctuation">,</span>    o<span class="token punctuation">.</span>order_id<span class="token punctuation">,</span>    <span class="token number">c</span><span class="token punctuation">.</span>first_name <span class="token keyword">AS</span> customer<span class="token punctuation">,</span>    s<span class="token punctuation">.</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">AS</span> shipper<span class="token punctuation">,</span>    os<span class="token punctuation">.</span>NAME <span class="token keyword">AS</span> <span class="token string">'status'</span> <span class="token keyword">FROM</span>    orders o    <span class="token keyword">JOIN</span> customers <span class="token number">c</span> <span class="token keyword">ON</span> o<span class="token punctuation">.</span>customer_id <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>customer_id    <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> shippers s <span class="token keyword">ON</span> s<span class="token punctuation">.</span>shipper_id <span class="token operator">=</span> o<span class="token punctuation">.</span>shipper_id    <span class="token keyword">JOIN</span> order_statuses os <span class="token keyword">ON</span> os<span class="token punctuation">.</span>order_status_id <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token comment" spellcheck="true">-- using(列1,列2...)</span><span class="token keyword">using</span><span class="token punctuation">(</span>列<span class="token number">1</span><span class="token punctuation">,</span>列<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>可以替换掉 <span class="token keyword">on</span> 但是要求要查询的两个表的的列明相等 当然也可以给多个参数用<span class="token punctuation">,</span> 隔开</code></pre><h3 id="其他链接查询"><a href="#其他链接查询" class="headerlink" title="其他链接查询"></a>其他链接查询</h3><ul><li>自然连接 natural join:<br> 数据库引擎自动匹配 不建议使用</li><li>交叉连接:</li></ul><blockquote><p>将两个表的数据交叉组合(三种饮料和三种杯子尺寸 交叉连接出所有状态)</p></blockquote><pre class=" language-sql"><code class="language-sql">表<span class="token number">1</span> <span class="token keyword">CROSS</span> <span class="token keyword">JOIN</span> 表<span class="token number">2</span> <span class="token punctuation">(</span>建议使用<span class="token punctuation">)</span><span class="token keyword">from</span> 表<span class="token number">1</span><span class="token punctuation">,</span> 表<span class="token number">2</span>  </code></pre><ul><li>联合查询(UNION)</li></ul><blockquote><p>将多个查询结构集,合成一个 列数要相同, 列明取第一个查询语句</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h3 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 子查询（嵌套查询)</span>一个查询语句的结果是另一个的条件<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表 <span class="token keyword">where</span> <span class="token number">a</span> <span class="token operator">=</span> （ <span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>） <span class="token comment" spellcheck="true">-- in/not in</span><span class="token operator">in</span> <span class="token operator">/</span> <span class="token operator">not</span> <span class="token operator">in</span>当子查询是一个集合 就用 <span class="token operator">in</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表 <span class="token keyword">where</span> <span class="token number">a</span> <span class="token operator">in</span> （ <span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>） </code></pre><h2 id="插入-复制"><a href="#插入-复制" class="headerlink" title="插入/复制"></a>插入/复制</h2><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 增加数据</span><span class="token comment" spellcheck="true">-- defaut 表示默认</span><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名 <span class="token keyword">value</span><span class="token punctuation">(</span> defaut <span class="token punctuation">,</span>字段值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span>值<span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名<span class="token punctuation">(</span>字段名<span class="token number">1</span><span class="token punctuation">,</span>名<span class="token number">2</span>名<span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">value</span><span class="token punctuation">(</span>字段值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span>值<span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 多行插入</span><span class="token keyword">insert</span> <span class="token keyword">into</span> 表<span class="token punctuation">(</span>字段<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span>值<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>值<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 插入多个数据<span class="token comment" spellcheck="true">-- 多表 插入</span>LAST_INSERT_ID<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">-- 最近插入ID</span><span class="token comment" spellcheck="true">-- 复制表</span><span class="token keyword">create</span> <span class="token keyword">table</span> 表 <span class="token keyword">select</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">-- 创建一个你查询出来的表</span><span class="token keyword">insert</span> <span class="token keyword">into</span> 表 <span class="token keyword">select</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment" spellcheck="true">-- 插入一个你查询的表</span></code></pre><h2 id="更新-删除"><a href="#更新-删除" class="headerlink" title="更新/删除"></a>更新/删除</h2><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 更新</span><span class="token keyword">update</span> 表名 <span class="token keyword">set</span> 字段<span class="token number">1</span> <span class="token operator">=</span> 值<span class="token number">1</span><span class="token punctuation">,</span> 字段<span class="token number">2</span> <span class="token operator">=</span> 值<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">where</span> 字段位置 <span class="token operator">=</span> 值<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 多行更新</span><span class="token keyword">UPDATE</span> 表名 <span class="token keyword">SET</span> 字段<span class="token number">1</span> <span class="token operator">=</span> 值<span class="token number">1</span><span class="token operator">+</span><span class="token number">50</span><span class="token punctuation">,</span>字段<span class="token number">2</span> <span class="token operator">=</span> 值<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">WHERE</span> 条件 <span class="token comment" spellcheck="true">-- 条件可以选定多行数据</span><span class="token comment" spellcheck="true">-- 在update中使用 select</span>嵌套查询结果集<span class="token keyword">UPDATE</span> 表名 <span class="token keyword">SET</span> 字段<span class="token number">1</span> <span class="token operator">=</span> 值<span class="token number">1</span> <span class="token keyword">WHERE</span> 列<span class="token number">1</span><span class="token operator">=</span><span class="token punctuation">(</span> <span class="token keyword">select</span> 语句<span class="token punctuation">)</span><span class="token comment" spellcheck="true">--------------删除--------------</span><span class="token keyword">delete</span> <span class="token operator">/</span> <span class="token keyword">truncate</span> <span class="token keyword">table</span> 表名<span class="token punctuation">;</span>  删除全表<span class="token keyword">delete</span> <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> 字段名 <span class="token operator">=</span> 字段值<span class="token punctuation">;</span>当然可以嵌套<span class="token keyword">select</span>语句:<span class="token keyword">delete</span> 表名 <span class="token keyword">WHERE</span> 列<span class="token number">1</span><span class="token operator">=</span><span class="token punctuation">(</span> <span class="token keyword">select</span> 语句<span class="token punctuation">)</span></code></pre><p>恢复数据库:</p><pre class=" language-sql"><code class="language-sql"></code></pre><h2 id="InnoDB和MySAM"><a href="#InnoDB和MySAM" class="headerlink" title="InnoDB和MySAM"></a>InnoDB和MySAM</h2><ul><li>现在都是默认使用InnoDB</li><li>MySAM 比较老,以前用</li></ul><blockquote><p>区别:</p></blockquote><table><thead><tr><th></th><th>MySAM</th><th>INNODB</th></tr></thead><tbody><tr><td>事务</td><td>不支持</td><td><strong>支持</strong></td></tr><tr><td>数据锁定方式</td><td>表锁定</td><td><strong>行锁定</strong></td></tr><tr><td>外键约束</td><td>不支持</td><td><strong>支持</strong></td></tr><tr><td>全文索引</td><td><strong>支持</strong></td><td>不支持</td></tr><tr><td>表空间大小</td><td>小</td><td>大,约为MySAM的两倍</td></tr></tbody></table><blockquote><p>在物理空间:</p></blockquote><p>所有数据库都是以文件形式存储在data目录下,一组文件对应一个数据库,本质还是文件存储</p><p>Mysql引擎</p><ul><li>INNODB在数据库上只有一个*.frm, 以及上级目录的ibdata1文件</li><li>MySAM<ul><li>*.frm 表结构</li><li>*.myd  数据文件(data)</li><li>*.MYI  索引文件(index)</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 类别 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xx-net 访问Google</title>
      <link href="/2020/07/04/xx-net-%E8%AE%BF%E9%97%AEGoogle/"/>
      <url>/2020/07/04/xx-net-%E8%AE%BF%E9%97%AEGoogle/</url>
      
        <content type="html"><![CDATA[<h1 id="xx-net-访问Google"><a href="#xx-net-访问Google" class="headerlink" title="xx-net 访问Google"></a>xx-net 访问Google</h1><p>访问google</p><p>下载XX-net: <a href="https://github.com/XX-net/XX-Net/blob/master/code/default/download.md">github地址</a> </p><p>下载稳定版解压(尽量不要有中文)运行 Star.bat/star.vbs</p><p>然后 提示安装证书 – 就入了浏览器 – 点击状态 – 如果未连接:</p><ul><li>设置ipv6(<strong>也可以先造作这步骤</strong>)<ol><li>打开 xx-Net/code/default/gae_proxy/local/ipv6_tunnel 下的enable_ipv6 打开自动设置</li></ol></li></ul><p>如果状态时链接那么就可以使用了</p><hr><p>当然用的是共有的appid 会有限制 可以自己配置Google appid: <a href="https://github.com/XX-net/XX-Net/wiki/how-to-create-my-appids">点击这里是官方教程</a> 我没有信用卡就先将就了:sob:</p>]]></content>
      
      
      <categories>
          
          <category> build </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xx-net </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring事务</title>
      <link href="/2020/07/04/Spring%E4%BA%8B%E5%8A%A1/"/>
      <url>/2020/07/04/Spring%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring事务"><a href="#Spring事务" class="headerlink" title="Spring事务"></a>Spring事务</h1><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><blockquote><p>什么是事务</p></blockquote><h3 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h3><h3 id="编程式事务"><a href="#编程式事务" class="headerlink" title="编程式事务"></a>编程式事务</h3>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 未完成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型模式</title>
      <link href="/2020/07/02/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/07/02/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1>]]></content>
      
      
      <categories>
          
          <category> 类别 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pe系统盘解锁密码(开启安全引导后密码错误)</title>
      <link href="/2020/06/25/pe%E7%B3%BB%E7%BB%9F%E7%9B%98%E8%A7%A3%E9%94%81%E5%AF%86%E7%A0%81-%E5%BC%80%E5%90%AF%E5%AE%89%E5%85%A8%E5%BC%95%E5%AF%BC%E5%90%8E%E5%AF%86%E7%A0%81%E9%94%99%E8%AF%AF/"/>
      <url>/2020/06/25/pe%E7%B3%BB%E7%BB%9F%E7%9B%98%E8%A7%A3%E9%94%81%E5%AF%86%E7%A0%81-%E5%BC%80%E5%90%AF%E5%AE%89%E5%85%A8%E5%BC%95%E5%AF%BC%E5%90%8E%E5%AF%86%E7%A0%81%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="pe系统盘解锁密码-开启安全引导后密码错误"><a href="#pe系统盘解锁密码-开启安全引导后密码错误" class="headerlink" title="pe系统盘解锁密码(开启安全引导后密码错误)"></a>pe系统盘解锁密码(开启安全引导后密码错误)</h1><blockquote><blockquote><p>经历呢就是为了删掉<strong>某垃圾管家</strong>顽固的残留文件, 百度很多都说可以更改安全引导; 然后就登陆不进去了:sob:</p></blockquote><ul><li>登录的用户id变成了我的微软账户名;  输入什么密码都不对(贴吧很多人说是微软密码; 但是无法联网,也没法验证对不对)</li></ul><blockquote><p><strong>于是贴吧里的一个帖子:</strong>  博主名字:<a href="https://tieba.baidu.com/p/6619675494?red_tag=3379245281" target="_blank" rel="noopener">山月<img src="https://tb1.bdstatic.com/tb/cms/nickemoji/3-34.png" alt="img"></a></p></blockquote><ul><li>找出一个U盘，把U盘文件备份</li><li>用另一台电脑，插入U盘，下载微pe系统到U盘，具体可见百度经验<a href="https://jingyan.baidu.com/article/6fb756ec44a2cb241858fbfe.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/6fb756ec44a2cb241858fbfe.html</a></li><li>你的那台忘记密码的电脑，重启，进入bios菜单，进入满屏幕英文—然后选择USB storage device，回车</li><li>进入微pe系统界面，点dism+，，出现什么都点接受，然后进入专家模式，选择<strong>另一个盘</strong>，——恢复功能，引导修复</li><li>你会神奇的发现—它能用PIN码进入了</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 记录/踩坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA的JUC</title>
      <link href="/2020/06/05/JAVA%E7%9A%84JUC/"/>
      <url>/2020/06/05/JAVA%E7%9A%84JUC/</url>
      
        <content type="html"><![CDATA[<h1 id="JUC"><a href="#JUC" class="headerlink" title="JUC"></a>JUC</h1>]]></content>
      
      
      <categories>
          
          <category> 类别 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA注解</title>
      <link href="/2020/06/05/JAVA%E6%B3%A8%E8%A7%A3/"/>
      <url>/2020/06/05/JAVA%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="基本概述"><a href="#基本概述" class="headerlink" title="基本概述"></a>基本概述</h2><blockquote><ul><li>Annotation(注解):<ol><li>作用:<ol><li>对程序作出解释(和注释(comment)一样)</li><li>可以被其他程序读取(编译器等)</li></ol></li><li>格式 – @注释名(参数)</li><li>作用于package/class/method/field等上, 给他们添加了额外的辅助信息,可以通过反射机制对这些元数据进行访问</li></ol></li></ul></blockquote><h2 id="部分常见注解"><a href="#部分常见注解" class="headerlink" title="部分常见注解"></a>部分常见注解</h2><blockquote><ol><li><strong>@Override:</strong> 重写超累的方法 </li><li><strong>@Deprecated:</strong> 定义为废弃的,不推荐使用, 或者有更好的选择</li><li><strong>SuppressWarnings:</strong> 用来抑制编译时 的警告信息(强迫症福利??) 有参数:<ol><li>(“all”)/(“Unchecked”)/(value = {“unchecked”,”deprecation”})</li></ol></li></ol></blockquote><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><blockquote><p>元注解(Meta-Annotation) 用来注解其他注解, java提供了四个标准元注解</p><ul><li><p>这些类型和支持的类在(java.lang.annotation)包中</p><ol><li><strong>@Target:</strong> 描述作用范围</li><li><strong>@Retention:</strong> 表示保存注释的级别, 描述注释的生命周期(SOURCE&lt;CLASS&lt;<strong>RUNTIME</strong>)</li><li><strong>@Document:</strong> 说明该注释被包含在javadoc中</li><li><strong>@Inherited:</strong> 说明子类可以<strong>继承</strong>父类的注释</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 描述作用域(ElementTYpe)</span><span class="token comment" spellcheck="true">//    TYPE, //接口、类、枚举、注解</span><span class="token comment" spellcheck="true">//    FIELD,//字段、枚举的常量</span><span class="token comment" spellcheck="true">//    METHOD,  //方法</span><span class="token comment" spellcheck="true">//    PARAMETER,  //方法参数</span><span class="token comment" spellcheck="true">//    CONSTRUCTOR,   //构造函数</span><span class="token comment" spellcheck="true">//    LOCAL_VARIABLE,  //局部变量</span><span class="token comment" spellcheck="true">//    ANNOTATION_TYPE, //注解</span><span class="token comment" spellcheck="true">//    PACKAGE   //包</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 生命周期(RetentionPolicy)</span><span class="token comment" spellcheck="true">//    SOURCE, // 源码</span><span class="token comment" spellcheck="true">//    CLASS,  // 类</span><span class="token comment" spellcheck="true">//    RUNTIME // 运行时</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>value <span class="token operator">=</span> RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 在javaDoc中</span><span class="token annotation punctuation">@Documented</span><span class="token comment" spellcheck="true">// 子类可继承</span><span class="token annotation punctuation">@Inherited</span>@<span class="token keyword">interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li></ul></blockquote><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><blockquote><p>使用<strong>@interface</strong>来声明自定义注解,<kbd>public @interface name{内容}</kbd>  </p><ul><li>自动继承Annotation接口</li><li>对于参数<ol><li>格式:  <strong>类型 名称();</strong></li><li>内部每一个方法其实是个参数  返回值类型就是参数类型(只能是基本类)</li><li>可以通过default来默认参数</li><li>如果只有一个参数成员, 一般命名为Value</li><li>注解元素必须要有值,通常使用默认为: 空字符串和0</li></ol></li></ul></blockquote><pre class=" language-java"><code class="language-java"><span class="token operator">/</span> 定义作用域<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 定义生命周期</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>@<span class="token keyword">interface</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 参数格式: 类型 名字();</span>    <span class="token comment" spellcheck="true">// 如果只有一个参数建议使用value 因为填写参数时可以省略(value = )</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置默认值 如果为-1 则不存在</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">tel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
            <tag> Java注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA反射机制</title>
      <link href="/2020/06/05/JAVA%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/06/05/JAVA%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="反射概述"><a href="#反射概述" class="headerlink" title="反射概述"></a>反射概述</h2><h3 id="动静态语言"><a href="#动静态语言" class="headerlink" title="动静态语言"></a>动静态语言</h3><blockquote><ul><li>动态语言<ol><li>运行时可以改变其结构的语言:Object-c, C#, JavaScript, PHP, Python等</li></ol></li><li>静态语言<ol><li>运行时结构不可变的语言:Java,C,C++</li></ol></li></ul><p>但是! Java虽不是动态语言, 但可以称为<strong>“准动态语言”</strong>. 因为Java有一定的动态性,可以利用Java的<strong>反射机制</strong>获得动态语言的特性. 可以让编程更灵活</p></blockquote><h3 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h3><blockquote><p><strong>Reflection(反射)</strong> 是Java被视为动态语言的关键.反射机制是程序执行期间借助于Reflection API获取到<strong>任何类的内部信息,并能直接操作任意对象的内部属性和方法</strong></p><p>加载完类之后, 在堆内存的方法去中就产生了一个Class类型的对象(对于每个类是唯一一个), 这个对象包含了<strong>完整的类的结构信息</strong>. 通过这个对象看到类的结构. 这个对象像个镜子, 透过这个镜子看到了类的结构 ,所以我们叫反射<br><img src="https://i.loli.net/2020/06/06/1YROeXfwlsizrCS.png" alt="image.png"></p></blockquote><h3 id="JAVA反射机制的优缺点"><a href="#JAVA反射机制的优缺点" class="headerlink" title="JAVA反射机制的优缺点"></a>JAVA反射机制的优缺点</h3><blockquote><ul><li>优点: 很明显它实现了动态创建和编译, 大大增加灵活性</li><li>缺点: 对性能有影响,. 因为反射是一个解释操作, 告诉JVM,我们需要做什么来完成操作. 肯定慢于直接操作</li></ul></blockquote><h2 id="1-类加载和初始化的"><a href="#1-类加载和初始化的" class="headerlink" title="1. 类加载和初始化的"></a>1. 类加载和初始化的</h2><blockquote><p>想要了解反射机制先了解到底类加载是怎么运行的还有初始化时JVM发什么什么</p></blockquote><h3 id="类加载内存分析"><a href="#类加载内存分析" class="headerlink" title="类加载内存分析"></a>类加载内存分析</h3><blockquote><ul><li><p>Jvm中的内存部分:</p><ol><li><strong>堆:</strong> 存放new的对象和数组 (垃圾收集器,监控的就是这部分对象)  <ol><li>可被所有线程共享, 不会存放别的对象引用</li></ol></li><li><strong>栈:</strong> 存放基本变量类型(会包含这个基本类型的具体数值),引用对象的变量(存的是这个引用在堆里的地址)</li><li><strong>方法区:</strong> 可悲线程共享/ 包含所有的calss和static变量</li></ol></li><li><p>类加载的过程</p><p>当程序主动使用某个类, 如果该类还未被夹在到内存中, 则会发生下面的步骤:</p><p><img src="https://i.loli.net/2020/06/07/hqkj6iWFR1vc9Ga.png" alt="类加载的过程"></p><ol><li><strong>加载:</strong> 将class文件字节码加载到内存,将静态数据转换成方法去的运行时数据结构,然后生成一个java.lang.Class对象(堆).</li><li><strong>链接:</strong> 将二进制(字节码)代码合并到JVM运行状态中<ol><li>==验证==:确保加载的信息符合JVM规范</li><li>==准备==:正式为类变量(static)分配内存,并设置初值– Java对象变量的默认值</li><li>==解析==:虚拟机常量池内的符号引用(常量名)替换为直接引用(地址)</li></ol></li><li><strong>初始化:</strong> 执行类构造器的<clinit>()方法的过程: 下面细说</li></ol></li></ul></blockquote><h3 id="类的初始化"><a href="#类的初始化" class="headerlink" title="类的初始化"></a>类的初始化</h3><blockquote><ul><li>初始化:  顺序是: <strong><em>先静态对象，后非静态对象，且静态初始化动作只进行一次</em></strong> <ol><li>类构造器<clinit>()方法是由编译器自动收集类中<strong>所有</strong>的类变量赋值和静态代码块的操作(类构造器是构造类的, 不是构造该对象的)</li><li>如果初始化时发现父类没有初始化,则初始化父类</li><li>虚拟机会保证<clinit>()方法在多线程中能正确加锁和同步</li></ol></li><li>类什么时候初始化:<ol><li>类的主动引用(一定发生初始化)<ol><li>一定初始化main方法所在的类</li><li>new对象</li><li>通过类调用静态成员(除了final)和静态方法</li><li>反射调用(forName(“”))</li><li>如果初始化时发现父类没有初始化,则初始化父类</li></ol></li><li>类的被动引用(不会发生初始化)<ol><li>访问一个静态域时, 如果没有声明这个域的类(比如子类调用父类的静态变量)就不会初始化</li><li>通过数组定义引用 – 只会分配空间 (类A[] a = new 类A[len])</li><li>引用常量不会触发此类的初始化 ( 常量在链接阶段就存入了常量池)</li></ol></li></ol></li></ul><p><img src="https://i.loli.net/2020/06/30/pJrK6LaXGIATNFd.png" alt="JVM.png"></p></blockquote><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><blockquote><p>如果需要查找一个class对象的时候 先查找内存三种加载器一次查找 如果没有从底层加载器加载 如果都没有抛出ClassNotFoundException</p><p><img src="C:%5CUsers%5C25778%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200705205726521.png" alt="双亲委派"></p></blockquote><blockquote><p>类加载器就是<strong>将class文件字节码内容加载到内存中</strong>,并将这些静态数据转换成方法去的运行时的数据结构,在堆中生成一个java.lang.class对象,作为访问入口</p><p>类缓存:  标准JavaSE类加载器,可以按要求查找类, 一旦某个类被夹在将有一段时间缓存</p><ol><li><p>引导类加载器: 底层由C++编写, java自带的加载器, <strong>负责java核心库(rt.jar)</strong>, 装在核心类库. 这个无法直接获取</p></li><li><p>扩展类加载器:负责jre/lib/ext下的jar包或者java.ext.dirs指定目录的jar加载</p><p><strong>sun.misc.Launcher$ExtClassLoader@1d4e2ba</strong></p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// 系统类的父类  扩展类 </span>ClassLoader parent <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>系统类加载器: 最常用的,负责java-classpath或java.class.path所指向的目录下的类与jar包的加载</p><p><strong>sun.misc.Launcher$AppClassLoader@dad5dc</strong></p><pre class=" language-java"><code class="language-java">   <span class="token comment" spellcheck="true">// 获取系统类加载器  </span>ClassLoader loader <span class="token operator">=</span> ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><p><kbd>系统类 -> 扩展类 -> 引导类</kbd> 以及自定义加载器</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 查看系统内类加载器可以加载的路径</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.class.path"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>   <img src="https://i.loli.net/2020/06/07/Dlpi7uRVcFm3MoT.png" alt="image.png"></p></blockquote><h2 id="Class对象"><a href="#Class对象" class="headerlink" title="Class对象"></a>Class对象</h2><blockquote><p>在Object类下有一个getClass()方法,返回值是一个Class类.所有类都默认继承Object类.<kbd>public final Class getClass()</kbd></p><p>是Java反射的源头, 所以反射理解为: 可以通过对象反射找到对应的类</p><p> <img src="https://i.loli.net/2020/06/06/9fyt2kRnvHcCihs.png" alt="image.png"></p></blockquote><h4 id="获取Class类的方法"><a href="#获取Class类的方法" class="headerlink" title="获取Class类的方法"></a>获取Class类的方法</h4><blockquote><ol><li><p>已知具体类, 通过class属性来获取, 该方法<strong>最为安全可靠</strong>,程序性能最高</p><pre class=" language-java"><code class="language-java">  Class<span class="token operator">&lt;</span>Cat<span class="token operator">></span> c1 <span class="token operator">=</span> Cat<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span></code></pre></li><li><p>已知某个类的实例,调用它的getClass方法获取Class对象</p><pre class=" language-java"><code class="language-java">Cat cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class <span class="token class-name">c3</span> <span class="token operator">=</span> cat<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ol><ol start="3"><li><p>已知一个类的<strong>限定类名</strong>,且在类路径下, 可以通过Class的静态方法forName()获取</p><pre class=" language-java"><code class="language-java">Class <span class="token class-name">c2</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.sjs.Reflect.Cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><ol start="4"><li><p>内置基本数据类型可以直接调用<strong>类名.Type</strong></p><pre class=" language-java"><code class="language-java">Class<span class="token operator">&lt;</span>Integer<span class="token operator">></span> type <span class="token operator">=</span> Integer<span class="token punctuation">.</span>TYPE<span class="token punctuation">;</span></code></pre></li></ol><ol start="5"><li><p>还可以用ClassLoader</p><blockquote><p>只要是获取到<strong>同一个类的Class对象都是一个对象</strong></p><pre class=" language-java"><code class="language-java">        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c3<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们把上面的对象用hashCode()输出数据相同</p></blockquote></li></ol></blockquote><h4 id="Class类的常用方法"><a href="#Class类的常用方法" class="headerlink" title="Class类的常用方法"></a>Class类的常用方法</h4><blockquote><ol><li><strong>Class getSuperClass():</strong> 返回当前类的父类</li><li><strong>static ClassforName(String name):</strong> 返回指定类名name的Class对象</li><li><strong>Object newInstance():</strong> 调用缺省构造函数,返回Class对象的一个实例</li><li><strong>getName():</strong> 返回Class对象所表示的实体(类, 接口等)的名称</li><li><strong>Class[] getInterfaces():</strong> 返回当前Class对象的接口 </li><li><strong>ClassLoader getClassLoader():</strong> 返回该类的类加载器</li></ol></blockquote><h2 id="2-获取类的运行时结构"><a href="#2-获取类的运行时结构" class="headerlink" title="2. 获取类的运行时结构"></a>2. 获取类的运行时结构</h2><blockquote><p>通过反射可以获取运行时的类的完整结构</p><p>​        反射创建类的Class对象<kbd>Class catCl = Class.forName("com.sjs.Reflect.Animal"); </kbd></p><ol><li><p>获取属性</p><pre class=" language-java"><code class="language-java">catCl<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取所有public属性</span>catCl<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取所有属性</span></code></pre></li><li><p>获取方法</p><pre class=" language-java"><code class="language-java">catCl<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取包括父类的所有public方法</span>catCl<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取其他权限的方法</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>catCl<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"方法名字"</span><span class="token punctuation">,</span> 参数类型<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取指定方法</span></code></pre></li><li><p>获取构造器</p><pre class=" language-java"><code class="language-java">   <span class="token comment" spellcheck="true">// 获取构造器</span>        catCl<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取 public所有构造器</span>        catCl<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取 public所有构造器</span></code></pre></li><li><p>等等,,,能获取到类的完整结构(接口,注解, 父类………)</p></li></ol></blockquote><h2 id="动态创建对象-调用运行时类中的结构"><a href="#动态创建对象-调用运行时类中的结构" class="headerlink" title="动态创建对象,调用运行时类中的结构"></a>动态创建对象,调用运行时类中的结构</h2><blockquote><ul><li><p>动态创建:</p><pre class=" language-java"><code class="language-java">Animal aninmalIns <span class="token operator">=</span> <span class="token punctuation">(</span>Animal<span class="token punctuation">)</span> animal<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 反射获得的类实例创建实例</span><span class="token comment" spellcheck="true">/*************************************************************************/</span> <span class="token comment" spellcheck="true">//调用指定构造器创建对象</span>Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> constructor <span class="token operator">=</span> animal<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 用参数来确定构造方法</span>constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置访问权限拦截(true不拦截) 因为这个构造是私有的</span>Object o <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"参数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>调用运行时的方法</p><pre class=" language-java"><code class="language-java">Animal animal1 <span class="token operator">=</span> <span class="token punctuation">(</span>Animal<span class="token punctuation">)</span> animal<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建出声明类实例</span><span class="token comment" spellcheck="true">// 调用方法</span><span class="token comment" spellcheck="true">// 创建出Method对象</span>Method setName <span class="token operator">=</span> animal<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"setName"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方法参数名字和类型</span>setName<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>animal1<span class="token punctuation">,</span> <span class="token string">"参数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 参数对象是声明类的实例</span></code></pre></li><li><p>调用属性</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">// 访问和修改属性</span>Field name <span class="token operator">=</span> animal<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 属性名称</span>name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 由于是私有修改拦截方式</span>name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>animal1<span class="token punctuation">,</span> <span class="token string">"tuyi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// set 将对象和参数传入</span></code></pre></li></ul></blockquote><blockquote><ul><li>class对象可以创建类的对象, 可以访问所有权限的方法和属性</li><li><strong>invoke(Object obj, Object args[])方法</strong>  用反射创建出Method对象,用此方法调用 ,参数是类的对象和参数</li><li><strong>setAccessible(boolen par)</strong> <ol><li>Method, Field, Constructor对象都有setAccessible()方法</li><li>是用来启动或者禁用访问安全检查的开关</li><li>true为取消java语言访问检察<ol><li><strong>提高反射效率</strong>, 如果必须用反射, 设置为true</li><li>可以访问私有结构</li></ol></li><li>false则为反射的对象开启Java语言访问检察</li></ol></li></ul></blockquote><h2 id="练习-通过注解和反射完成简单的类和表结构的映射关系-ORM"><a href="#练习-通过注解和反射完成简单的类和表结构的映射关系-ORM" class="headerlink" title="练习:通过注解和反射完成简单的类和表结构的映射关系(ORM)"></a>练习:通过注解和反射完成简单的类和表结构的映射关系(ORM)</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 注解类</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">DBAnnotation</span> <span class="token punctuation">{</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 库名</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>@<span class="token keyword">interface</span> <span class="token class-name">FieldsSJS</span> <span class="token punctuation">{</span>    String <span class="token function">column</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 列明</span>    String <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 数据类型</span>    <span class="token keyword">int</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 长度</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// pojo类</span><span class="token annotation punctuation">@DBAnnotation</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@FieldsSJS</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">"int"</span><span class="token punctuation">,</span> len <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@FieldsSJS</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">"varChar"</span><span class="token punctuation">,</span> len <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ORMExercise</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> InstantiationException <span class="token punctuation">{</span>        Class <span class="token class-name">studentDB</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.sjs.Exercise.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> studentDB<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DBAnnotation dbAnnotation <span class="token operator">=</span> <span class="token punctuation">(</span>DBAnnotation<span class="token punctuation">)</span> studentDB<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>DBAnnotation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前表是: "</span> <span class="token operator">+</span> dbAnnotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> studentDB<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>            FieldsSJS fieldsjs <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>FieldsSJS<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"类中的参数是:"</span> <span class="token operator">+</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"列名字:"</span> <span class="token operator">+</span> fieldsjs<span class="token punctuation">.</span><span class="token function">column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"长度:"</span> <span class="token operator">+</span> fieldsjs<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"类型:"</span> <span class="token operator">+</span> fieldsjs<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://i.loli.net/2020/06/08/euOnThtcEdpokG4.png" alt="image.png"></p><p>clinitclinit</p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OOP编程(面向对象)基础</title>
      <link href="/2020/05/31/OOP%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/05/31/OOP%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="OOP编程-面向对象-基础"><a href="#OOP编程-面向对象-基础" class="headerlink" title="OOP编程(面向对象)基础"></a>OOP编程(面向对象)基础</h1><h2 id="类与实例"><a href="#类与实例" class="headerlink" title="类与实例"></a>类与实例</h2><blockquote><ul><li><p>OOP: Object-Oriented Programming</p><ol><li>对象: 对象是一个自包含的实体,用一组可识别的特性和行为来标识</li><li>类: 类就是具有相同属性和功能的对象的抽象集合</li><li>实例: 一个真实的对象(实例化就是创建对象的过程)</li></ol><blockquote><p>类A name;             // 声明一个 <kbd>类A</kbd>的对象 叫name </p><p>name = new 类A();  // 将name对象实例化 </p></blockquote></li></ul></blockquote><h2 id="构造方法-方法重载"><a href="#构造方法-方法重载" class="headerlink" title="构造方法/方法重载"></a>构造方法/方法重载</h2><blockquote><ul><li>构造方法—构造函数,就是对类进行初始化. 在被new时调用 <ol><li>所有类都有个默认无参数构造方法,,如果你定义了构造方法,则默认的失效</li></ol></li><li>方法重载提供了创建同名的多个方法的能力, 需要<strong>参数类型</strong>,<strong>参数个数</strong>不同</li></ul></blockquote><h2 id="封装-继承和多态"><a href="#封装-继承和多态" class="headerlink" title="封装,继承和多态"></a>封装,继承和多态</h2><blockquote><ul><li><p>封装: 每个对象都包含它能进行操作所需要的所有信息, 这就是封装, 所以对象不必依赖其他对象来完成自己的操作,好处:</p><ol><li>良好的封装能降低耦合</li><li>类内部的实现可以自由修改</li><li>类有清晰的对外接口</li></ol></li><li><p>继承: 面向对象中  <em>is - a</em>  的关系,可以说为<em>是一个</em> 的关系 . (猫类继承动物类—猫是动物)    继承可使得修改和扩展 继承而来的实现 比较容易</p><ol><li>子类拥有父类非private的属性和功能</li><li>子类具有自己的属性和功能</li><li>子类可以通过自己的方式实现弗雷德功能(方法重写)</li><li>protected修饰的只对子类公开</li></ol></li><li><p>多态: 不同的对象可以执行相同的动作,但是要通过他们自己的实现代码执行(实现的结果一样,但是行为方式不同)</p><ol><li>子类以父类的身份出现</li><li>子类在工作时以自己的方式实现</li><li>子类以父类的身份出现是,子类特有的实行和方法不可使用</li></ol><pre class=" language-java"><code class="language-java">父 f1 <span class="token operator">=</span><span class="token keyword">new</span> 子（）；<span class="token comment" spellcheck="true">// 每个子类通过自己的方式完成</span></code></pre></li></ul></blockquote><h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><blockquote><p> 重构就是在不改变软件系统外部行为的前提下，改善它的内部结构。具体实现方式不同</p></blockquote><h2 id="抽象类-abstract"><a href="#抽象类-abstract" class="headerlink" title="抽象类(abstract)"></a>抽象类(abstract)</h2><blockquote><ul><li>Java可以把类和方法声明为abstract, 即抽象方法和抽象类<ol><li>抽象类不能实例化</li><li>抽象方法必须被自类重写</li><li>抽象方法必须在抽象类中</li></ol></li><li>抽象类拥有尽可能多的共同代码,尽可能少的数据<kbd>J&DP</kbd><ol><li>抽象类提供一个继承的出发点–一定使用来继承的</li><li>在一个继承关系里 – 树叶是具体类, 树枝是抽象类</li></ol></li></ul></blockquote><h2 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口(interface)"></a>接口(interface)</h2><blockquote><p>官方解释:Java接口是一系列方法的声明，是一些方法特征的集合，<strong>一个接口只有方法的特征没有方法的实现，因此这些方法可以在不同的地方被不同的类实现，而这些实现可以具有不同的行为（功能）</strong>。</p><ul><li><p>特性</p><ol><li>实现接口必须实现所有方法和属性</li><li>接口中的方法默认抽象的</li><li>Java只支持单一继承,但是可以实现多个接口,接口也可以被多个类实现</li></ol></li><li><p>接口回调:</p><pre class=" language-java"><code class="language-java">接口 Interface <span class="token operator">=</span><span class="token keyword">new</span> 实现（）； <span class="token comment" spellcheck="true">// 接口对象可以调用被实现类中的方法</span></code></pre></li><li><p>接口和抽象类</p><ol><li>类是对对象的抽象 ,抽象类是对对象的抽象, 接口是对行为的抽象</li><li>如果行为跨越不同的类—可以用接口; 对于一些相似的类对象–用继承抽象类</li><li>实现接口和继承抽象类可以一起用不冲突</li><li>从设计角度来说: 抽象类是从子类中发现了公共选项,泛化出来的(<strong>重构</strong>); 而接口是预先定义设计出来的</li></ol></li></ul></blockquote><h2 id="委托与事件"><a href="#委托与事件" class="headerlink" title="委托与事件"></a>委托与事件</h2><blockquote><p>一般我们在实现主要业务，一些辅助功能一般是父类(一般类或抽象类)中实现好了或者通过委托实现，大多数中一般使用父类，继承父类需要耦合在主类中，使用的委托的方式是解耦主类，使主类不知道谁帮我做了这些事，但是Java中没有对委托进行封装，则需要开发者自己实现。(待完成)</p></blockquote><h2 id="OOP编程的七大原则"><a href="#OOP编程的七大原则" class="headerlink" title="OOP编程的七大原则"></a>OOP编程的七大原则</h2><blockquote><ul><li><strong>开闭原则:</strong> 对扩展开放,对修改关闭(首要遵守)</li><li>*<em>里氏替换原则: *</em> 继承必须确保超类拥有的性质在子类中任然成立(尽可能不去重写父类)</li><li><strong>依赖倒置原则：</strong>摆脱面向过程中高层依赖底层, 抽象依赖于具体. 而是面向接口编程</li><li><strong>单一职责原则：</strong>控制累的粒度大小,将对象解耦合,高内聚(一个类的职责尽量单一)</li><li><strong>接口隔离原则：</strong> 为每个类建立属于它们需要的专用接口,使用多个专门的接口比使用单一的总接口要好。</li><li><strong>迪米特原则或最少知识原则：</strong> 只与直接朋友通信,或者通过朋友与陌生人传递消息</li><li><strong>合成服用原则:</strong>  关联关系优于继承关系。尽量使用 <strong>合成/聚合</strong>(has - a)、尽量不使用继承(is - a)。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
          <category> 抄书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OOP/OOD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8新特性</title>
      <link href="/2020/05/31/Java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2020/05/31/Java8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="Java8新特性-–-了解一个写一个"><a href="#Java8新特性-–-了解一个写一个" class="headerlink" title="Java8新特性 – 了解一个写一个"></a>Java8新特性 – 了解一个写一个</h1><h2 id="Lamda表达式"><a href="#Lamda表达式" class="headerlink" title="Lamda表达式"></a>Lamda表达式</h2><blockquote><p>λ表达式:</p><p>本质上也是函数式编程:</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> expression<span class="token punctuation">[</span>表达式<span class="token punctuation">]</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> statement<span class="token punctuation">[</span>语句<span class="token punctuation">]</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>statements<span class="token punctuation">}</span></code></pre><ul><li>使用原因<ol><li>避免匿名内部类过多</li><li>代码看上去简洁</li><li>去掉了冗余的代码,留下核心逻辑</li></ol></li><li>使用前提:<ol><li>一定是Function Interface(函数式接口) — Function Interface定义:  任何接口如果只包含唯一一个抽象方法, 那么这就是个函数式接口. 例如 Runnable</li></ol></li></ul></blockquote><p>例子:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 写一个函数式接口</span><span class="token keyword">public</span> Interface <span class="token class-name">TestInterface</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testmethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 用lamda创建接口对象</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 匿名内部类实现 ,(我觉得Lamda表达式是匿名内部类的简化)</span>    <span class="token keyword">new</span> <span class="token class-name">TestInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 重写方法</span>         <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testmethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 代码.....    </span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">testmethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当然有参数的就可以添加参数</span><span class="token comment" spellcheck="true">/*----------------------------------------------------*/</span>      <span class="token comment" spellcheck="true">// Lamda表达式</span>   <span class="token comment" spellcheck="true">//Interface test1 = (参数)->{方法体};</span>     Interface <span class="token class-name">test1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 代码....</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">testmethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK1.8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2020/05/31/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/05/31/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式-大话设计模式"><a href="#单例模式-大话设计模式" class="headerlink" title="单例模式 - 大话设计模式"></a>单例模式 - 大话设计模式</h1><p><strong><em>每一个模式描述了一个在我们周围不断重复发生的问题,以及该问题的解决方案的核心。</em></strong></p><h2 id="单例模式-Singleton"><a href="#单例模式-Singleton" class="headerlink" title="单例模式(Singleton)"></a>单例模式(Singleton)</h2><blockquote><p>保证一个类仅有一个实例, 并提供一个访问的全局访问点[^ DP]</p><p>为了不实例化出多个对象,让类自身<strong>负责</strong>保存他的唯一实例. 这个类可以保证没有其他实例可以被创建, 并且他可以提供一个访问该实例的方法</p><p><img src="https://i.loli.net/2020/06/02/epTE4LbXZkhvYFW.png" alt="单例模式"></p><p>单例模式因为Singleton类封装了他唯一的实现类, 可以严格控制客户怎样访问以及何时访问它.—对唯一实例的受控访问</p><p>示例代码:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// private的实例变量</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"you win!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 私有的构造方法 让其他类不能访问</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果实例为空则创建</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></blockquote><h2 id="多线程单例模式"><a href="#多线程单例模式" class="headerlink" title="多线程单例模式"></a>多线程单例模式</h2><blockquote><p>在多个线程中, 单例模式会出现多个线程同时访问Singleton类, 会出现创建了多个实例的情况.   所以我们给他加<strong>锁</strong></p></blockquote><h2 id="双重锁定"><a href="#双重锁定" class="headerlink" title="双重锁定"></a>双重锁定</h2><blockquote><p>当然加锁后每个线程想访问Singleton类都要等待了, 所以我们优化一下 —  双重锁定</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton intance<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// private的实例变量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Object synchronizedLOCK <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 锁对象</span>    <span class="token comment" spellcheck="true">//只有static的成员才能在没有创建对象时进行初始化。且类的静态成员在类第一次被使用时初始化后就不会再被初始化，保证了单例</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"you win!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 私有的构造方法 让其他类不能访问</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getIntance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>intance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>synchronizedLOCK<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>intance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    intance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 如果实例为空则创建</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> intance<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></blockquote><h2 id="饿汉-懒汉单例类"><a href="#饿汉-懒汉单例类" class="headerlink" title="饿汉/懒汉单例类"></a>饿汉/懒汉单例类</h2><blockquote><ul><li><p>饿汉</p><ol><li>静态初始化的方式在自己被加载时就将自己实例化</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHungry</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SingletonHungry intance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonHungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SingletonHungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Creat new !!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonHungry <span class="token function">getIntance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> intance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>懒汉</p><ol><li>在第一次被引用时,才会将自己实例化</li></ol></li><li><p>优缺点: 饿汉类一加载就实例出对象, 会提前占用系统资源.     懒汉面临多线程访问的单圈问题,要加双重锁定. 具体用哪个取决于实际需求</p></li><li><p><strong>具体用哪个取决于实际需求</strong></p></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 大话设计模式 </category>
          
          <category> 抄书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GOF-23 </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/2020/05/31/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/05/31/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="代理模式-大话设计模式"><a href="#代理模式-大话设计模式" class="headerlink" title="代理模式 - 大话设计模式"></a>代理模式 - 大话设计模式</h1><p><strong><em>每一个模式描述了一个在我们周围不断重复发生的问题,以及该问题的解决方案的核心。</em></strong></p><p>啊哈<a href="我可真能拖">^ =.= </a> :expressionless:</p><h2 id="代理模式-Proxy"><a href="#代理模式-Proxy" class="headerlink" title="代理模式(Proxy)"></a>代理模式(Proxy)</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><blockquote><p><strong>为其他对象提供一种代理 以控制对这个对象的访问(DP).</strong></p><ul><li>角色:<ol><li>抽象角色: 用接口或者抽象类来实现(真实对象和代理对象的共同方法)</li><li>真实角色: 被代理的角色</li><li>代理角色: 代理真是角色 当然可以扩展其他业务</li><li>客户端: 具体操作 通过代理类访问代理对象</li></ol></li><li>好处<ol><li>可以使真实角色的业务更纯粹! 其他的公共业务和扩展业务不用考虑</li><li>实现了业务的分工 – 公共业务交给代理类</li><li>公共业务发生扩展时, 方便管理 (解耦)</li></ol></li><li><strong>静态代理缺点</strong>显然很明显:  代理只能服务一个类, 要是想代理很多类就要构建多个代理类 </li></ul></blockquote><blockquote><p><img src="https://img-blog.csdn.net/20170629213938736?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYnJpYmx1ZQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="代理模式实现.png"></p><p>代码部分</p><pre class=" language-java"><code class="language-java">            <span class="token comment" spellcheck="true">/* 公用接口类 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义 RealSubject和Proxy的公共方法</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>            <span class="token comment" spellcheck="true">/* 代理类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">extends</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 保存一个引用 使得代理可以访问实体 , 继承了同一个接口 所以可以实现真实实体的所有请求</span>    <span class="token keyword">private</span> RealSubject realSubject<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 组合形式获取</span>    <span class="token comment" spellcheck="true">// 在Spring框架中推荐使用 set方法来获取对象</span>    <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>realSubject <span class="token operator">==</span> null<span class="token punctuation">)</span> realSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        realSubject<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用真实的方法</span>        <span class="token comment" spellcheck="true">// 当然可以加点东西</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 扩展的业务</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增加了日志方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>          <span class="token comment" spellcheck="true">/* 真实实体类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RealSubject</span> <span class="token keyword">extends</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 代理类代理的真实实体</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实际的请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token comment" spellcheck="true">// 客户端</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Proxy p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 通过代理访问真实的方法</span><span class="token punctuation">}</span></code></pre></blockquote><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><blockquote><ul><li><strong>远程代理</strong><ol><li>就是为一个对象在不同的地址空间提供据不同代表.  这样可以隐藏一个对象存在于不同地址空间的事实</li></ol></li><li>虚拟代理<ol><li>是根据需要创建开销很大的对象. 通过它存放实例化需要很长时间的对象.</li></ol></li><li>安全代理<ol><li>用来控制真实对象访问时的权限.  </li></ol></li><li>只能指引<ol><li>是指当调用真实对象时, 代理处理另外一些事</li></ol></li></ul></blockquote><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><blockquote><p>当然以上是静态代理的实现</p><p><strong>静态代理缺点</strong>显然很明显:  代理只能服务一个类, 要是想代理很多类就要构建多个代理类 </p><blockquote><ul><li>用反射机制构建动态代理</li><li>动态代理的代理类是动态生成的</li><li>动态代理分为两大类 – 基于接口 – 基于类<ol><li>基于接口: JDK动态代理</li><li>基于类: cglib</li><li>java字节码实现: javasist</li></ol></li><li>需要 Proxy 和InvocationHandler 两个类来创建动态代理类</li></ul></blockquote><blockquote><p><strong>JDK动态代理</strong>: 和静态代理共同的是都要有<strong>真实实体类和接口</strong></p></blockquote><p> 实体类和接口:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 接口</span> <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义 RealSubject和需要被代理的方法方法</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 真实实体类</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RealSubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 代理类代理的真实实体</span>  <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实际的请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p> 动态代理实现:</p><blockquote><p> <strong>InvocationHandler</strong>是个接口: 只有一个invoke方法  此方法在生成了一个 $Proxy.class 文件中被调用– (具体源码)[<a href="https://www.cnblogs.com/liuyun1995/p/8157098.html]" target="_blank" rel="noopener">https://www.cnblogs.com/liuyun1995/p/8157098.html]</a></p><p><strong>Proxy</strong>提供了创建动态代理类的静态方法</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建动态代理工具 -- 实现接口</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProxyInvocationHandlerTemplate</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> Object target<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 目标接口 -- 改为可复用的Obj类</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTarget</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">public</span> Object <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 三个参数 1. 类加载器 2. 反射回去接口 3. InvocationHandler(就是本身)</span>         <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>         <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 扩展业务</span>         Object o <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> o<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 扩展业务</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"haha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p> 客户端:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//        p.method(); // 通过代理访问真实的方法</span>         <span class="token comment" spellcheck="true">// 动态代理</span>         <span class="token comment" spellcheck="true">// 实例动态代理工具</span>         MyProxyInvocationHandlerTemplate template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyProxyInvocationHandlerTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 实例真真实角色</span>         RealSubject subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         template<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>         Subject sub <span class="token operator">=</span> <span class="token punctuation">(</span>Subject<span class="token punctuation">)</span> template<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建代理类</span>         sub<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行公共接口的方法</span>         <span class="token comment" spellcheck="true">// 也会有附加业务的调用</span>     <span class="token punctuation">}</span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> 大话设计模式 </category>
          
          <category> 抄书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GOF-23 </tag>
            
            <tag> 代理模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring的AOP和IOC</title>
      <link href="/2020/05/27/Spring%E7%9A%84AOP%E5%92%8CIOC/"/>
      <url>/2020/05/27/Spring%E7%9A%84AOP%E5%92%8CIOC/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring的IOC和AOP"><a href="#Spring的IOC和AOP" class="headerlink" title="Spring的IOC和AOP"></a>Spring的IOC和AOP</h1><p>[toc]</p><h2 id="Spring介绍"><a href="#Spring介绍" class="headerlink" title="Spring介绍"></a>Spring介绍</h2><blockquote><p>Spring框架即以<em>interface21<em>框架为基础,经过重新设计,并不断丰富其内涵,于</em>2004<em>年</em>3月24日</em>,发布了1.0正式版。作者: [Rod Johnson]([<a href="https://baike.baidu.com/item/Rod%20Johnson/1423612?fr=aladdin]" target="_blank" rel="noopener">https://baike.baidu.com/item/Rod%20Johnson/1423612?fr=aladdin]</a>(<a href="https://baike.baidu.com/item/Rod" target="_blank" rel="noopener">https://baike.baidu.com/item/Rod</a> Johnson/1423612?fr=aladdin))</p><p>==非入侵式, 轻量级框架 – 支持事务==</p></blockquote><blockquote><p>Spring(容器/代理类框架)  </p></blockquote><p> <img src="https://i.loli.net/2020/05/27/Pcl8ygk3zEiVHWY.png" alt="image.png"></p><ul><li><p>Spring七个模块</p><p><img src="https://i.loli.net/2020/06/28/jWdqFXVefgiDCH4.png" alt="image.png"></p></li></ul><h2 id="IOC-控制反转"><a href="#IOC-控制反转" class="headerlink" title="IOC(控制反转)"></a>IOC(控制反转)</h2><p>IOC – Inversion of Control</p><blockquote><p>DI：依赖注入：实现方式</p><p>IOC：控制反转:==<strong>是一种设计思想</strong>==</p></blockquote><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ol><li><p>作用: 借助于“第三方”实现具有依赖关系的对象之间的解耦</p></li><li><p>理念: 应用组件<strong>不应该负责查找资源或者其他的对象之间的依赖关系</strong>, 配置这个关系的由容器负责, 查找资源从应用组件的代码中抽取出来(set); 交给容器</p></li><li></li><li><p>IOC控制:</p><ul><li><strong>谁控制谁</strong>: ioc容器控制了对象</li><li><strong>控制什么</strong> : 主要控制了外部资源的获取,创建<pre><code>1. 对象由Spring创建、管理、装配   2.  控制的内容：控制对象的创建：传统的由程序本身去创建, 框架由Spring来创建和管理</code></pre></li></ul></li><li><p><strong>IOC反转</strong>：(正转：程序自己创建对象)</p><ul><li><p><strong>反转:</strong> 由容器帮我们查找和注入了依赖对象, 对象只是被动地接受</p></li><li><p><strong>反转了啥:</strong> 把依赖对象的获取方式反转了</p></li></ul><ol><li>对象A获得依赖对象B的过程,由主动行为变为了被动行为，控制权颠倒过来了，这就是“控制反转”  官方一点就是原来对象间的关系由程序猿的部分控制; 现在由容器框架来创建和管理</li></ol></li></ol><ul><li><p>用一个简单例子理解一下为什么有IOC</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 在正常开发中 把传递的对象用set来实现动态化 大大降低了耦合度</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDAOImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDAO</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 原先是 DAO层来创建对象和依赖关系 耦合度超高 一旦需要更改 就要改源码</span>    <span class="token comment" spellcheck="true">// MyDataBase dao = new DataBase();</span>    MyDataBase dao<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 把需要的对象用来传递后 就是服务端传递对象</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDao</span><span class="token punctuation">(</span>MyDataBase dao<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dao <span class="token operator">=</span> dao<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过"</span> <span class="token operator">+</span> dao<span class="token punctuation">.</span><span class="token function">thisName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"获取到了名字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="IOC实现"><a href="#IOC实现" class="headerlink" title="IOC实现"></a>IOC实现</h3><p>maven导入:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><img src="https://i.loli.net/2020/06/29/d6ZkSsux2f8Dwgv.png" alt="image.png"></p><ol><li><p>传统的设计模式 由程序本身new出对象,主动去创建依赖,耦合度很高</p></li><li><p>当有了IOC容器后,在客户端类中不再主动去创建这些对象了</p></li></ol><p><img src="https://i.loli.net/2020/06/29/9YnpjRGZdbw1DoL.png" alt="image.png"></p><ol><li>pojo类</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"new"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>String hello<span class="token punctuation">;</span><span class="token keyword">public</span> String <span class="token function">getHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> hello<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 一定要有set方法 Spring通过set来获取对象</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHello</span><span class="token punctuation">(</span>String hello<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>hello <span class="token operator">=</span> hello<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"Hello{"</span> <span class="token operator">+</span><span class="token string">"hello='"</span> <span class="token operator">+</span> hello <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span><span class="token string">'}'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li><p>配置文件</p><pre class=" language-xml"><code class="language-xml">  <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans          https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 在加载配置文件时 对象就已经new出          容器创建了对象          id 就像对象名      --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.sjs.Hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Hello Spring<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// 客户端加载配置文件 获取需要的Bean即可</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"ApplicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 可以加载多个XML文件</span>          Hello hello <span class="token operator">=</span> <span class="token punctuation">(</span>Hello<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span></code></pre><p><strong>在Spring中对象由容器创建, 管理, 装配</strong></p></li></ol><h3 id="Spring的BeanFactory实现生成Bean"><a href="#Spring的BeanFactory实现生成Bean" class="headerlink" title="Spring的BeanFactory实现生成Bean"></a>Spring的BeanFactory实现生成Bean</h3><ul><li>Spring是一个大的Bean工厂, 负责Bean的创建和注入</li><li>Bean创建流程</li></ul><p><img src="https://i.loli.net/2020/07/05/G78ImnKQaSyFwVj.png" alt="image.png"></p><ol><li>ResourceLoader<strong>加载配置文件</strong> </li><li><strong>BeanDefinitionReader解析配置文件</strong>– 将<Bean> <strong>解析为BeanDefinition对象</strong>, 并保存到BeanDefinitionRegistry</li><li>利用后处理器BeanFactoryPostProcessor<strong>对BeanDefinition加工处理</strong><ul><li>使用<Bean>标签进行解析.<strong>将占位符替换为真实值</strong></li><li>对所有的BeanDefinition扫描,<strong>用反射机制找出所有的属性编辑器的Bean</strong>,注册到PropertyEditorRegistry</li></ul></li><li>从BeanDefinitionRegistry中取出BeanDefinition, 调用InstantiationStrategy<strong>进行实例化</strong></li><li>实例化时, 利用BeanWrapper对Bean设置属性</li><li>利用后处理器BeanFactoryPostProcessor<strong>对完成的Bean进行加工</strong> </li></ol><h3 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h3><blockquote><p>ioc启动先产生一个BeanDedinition 后 有可能会触发实例化</p><p>如果是原型模式在getBean时会实例化</p><p>单例模式在初始化实例后回到容器中寻找</p></blockquote><ol><li><strong>实例化bean对象</strong></li><li><strong>设置属性(DI注入)</strong></li><li><strong>调用Bean的初始化方法</strong></li><li><strong>使用Bean</strong></li><li><strong>容器关闭前销毁Bean</strong></li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Bean的销毁方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroyStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Student这个Bean：销毁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 配置:</span>destroy<span class="token operator">-</span>method：指定销毁的方法 </code></pre><h3 id="BeanFactory与ApplicationContext是干什么的-区别"><a href="#BeanFactory与ApplicationContext是干什么的-区别" class="headerlink" title="BeanFactory与ApplicationContext是干什么的,区别?"></a>BeanFactory与ApplicationContext是干什么的,区别?</h3><table><thead><tr><th>BeanFactory</th><th>ApplicationContext</th></tr></thead><tbody><tr><td>都是容器</td><td>都是容器</td></tr><tr><td>顶层-基础接口,实现了基础功能</td><td>容器的高级形态,增加了特性,顶级父类是BeanFactory</td></tr></tbody></table><p>FactoryBean是一个Bean,用于生产修饰其他的Bean实例,典型的是AOP代理类</p><h3 id="Spring的IOC创建对象的方式"><a href="#Spring的IOC创建对象的方式" class="headerlink" title="Spring的IOC创建对象的方式"></a>Spring的IOC创建对象的方式</h3><ol><li><p><strong>无参构造:</strong></p><ul><li>上慢的例子就是</li></ul></li><li><p><strong>有参构造(3中方式)</strong></p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.sjs.Hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 通过构造器参数名字获取 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Hello Spring<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--通过构造器参数索引--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Hello Spring<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 通过类型 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Hello Spring<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p><strong>工厂方式创建</strong></p><ol><li>静态工厂</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 工厂类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Hello <span class="token function">getInstance</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml">配置文件<span class="token comment" spellcheck="true">&lt;!-- 静态工厂方法--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>factory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.sjs.MyFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getInstance<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello Factory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>动态工厂</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 工厂类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span>  Hello <span class="token function">getInstance</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 动态工厂方法   与静态比少了static --></span><span class="token comment" spellcheck="true">&lt;!--注册工厂--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>factory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.sjs.MyFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--对应工厂的对应方法创建对应的对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>factory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getInstance<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Hello Dynamic Factory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li></ol><h2 id="DI-依赖注入"><a href="#DI-依赖注入" class="headerlink" title="DI - 依赖注入"></a>DI - 依赖注入</h2><h3 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h3><p>前面有的就是构造器</p><h3 id="set注入"><a href="#set注入" class="headerlink" title="set注入"></a>set注入</h3><ul><li>依赖注入<ol><li>依赖: bean对象的<strong>创建</strong>依赖容器</li><li>注入: bean的所有属性由容器注入</li></ol></li></ul><blockquote><p>注入配置</p></blockquote><ul><li>所有类型</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.sjs.Address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>people<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.sjs.People<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--普通--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>me<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--引用对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--set--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>12345<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>123422<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--map--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>game<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1号<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lol<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2号<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ow<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Properties--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>other<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>key<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>value<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>secend<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hahah<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- results in a setSomeList(java.util.List) call --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>someList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>a list element followed by a reference<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myDataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h3 id="拓展方式注入"><a href="#拓展方式注入" class="headerlink" title="拓展方式注入"></a>拓展方式注入</h3><ul><li>c/p命名方式注入</li></ul><ol><li>p标签就是和 property相同功能</li></ol><pre class=" language-xml"><code class="language-xml"> xmlns:p="http://www.springframework.org/schema/p"</code></pre><ol start="2"><li>所以c标签就是和构造器参数constructor-arg相同功能配置在标签内</li></ol><pre class=" language-xml"><code class="language-xml">xmlns:c="http://www.springframework.org/schema/c"</code></pre><p>配置:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>people<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.sjs.People<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>haha<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>address-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h2 id="Spring配置"><a href="#Spring配置" class="headerlink" title="Spring配置"></a>Spring配置</h2><pre class=" language-xml"><code class="language-xml">Spring核心配置头<span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><ul><li>引入配置文件 – 将多个配置文件引入合并到一个文件中</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ApplicationContext1.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>import</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ApplicationContext2.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>import</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ApplicationContext3.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>import</span><span class="token punctuation">></span></span></code></pre><ul><li>Bean配置</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- id对象名字 class权限定名  name 别名配置(空格/,/;)当分隔符 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.sjs.Hello<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello2,23 12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--别名可以用这配置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alias</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>alias</span><span class="token punctuation">></span></span></code></pre><h3 id="Bean作用区域"><a href="#Bean作用区域" class="headerlink" title="Bean作用区域"></a>Bean作用区域</h3><p>官方文档有六个:</p><table><thead><tr><th align="left">Scope</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-singleton" target="_blank" rel="noopener">singleton(单例)</a></td><td align="left">(Default) Scopes a single bean definition to a single object instance for each Spring IoC container.</td></tr><tr><td align="left"><a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-prototype" target="_blank" rel="noopener">prototype(原型)</a></td><td align="left">Scopes a single bean definition to any number of object instances.</td></tr><tr><td align="left"><a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-request" target="_blank" rel="noopener">request</a></td><td align="left">Scopes a single bean definition to the lifecycle of a single HTTP request. That is, each HTTP request has its own instance of a bean created off the back of a single bean definition. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr><tr><td align="left"><a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-session" target="_blank" rel="noopener">session</a></td><td align="left">Scopes a single bean definition to the lifecycle of an HTTP <code>Session</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr><tr><td align="left"><a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-application" target="_blank" rel="noopener">application</a></td><td align="left">Scopes a single bean definition to the lifecycle of a <code>ServletContext</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr><tr><td align="left"><a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/web.html#websocket-stomp-websocket-scope" target="_blank" rel="noopener">websocket</a></td><td align="left">Scopes a single bean definition to the lifecycle of a <code>WebSocket</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr></tbody></table><p> 后面四个在web中才会用到</p><ul><li>单例Singleton</li></ul><p><img src="https://i.loli.net/2020/07/02/u5reoLZBkP6asGA.png" alt="image.png"></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.something.DefaultAccountService<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><ul><li>原型</li></ul><p><img src="https://i.loli.net/2020/07/02/dAIstZrxTL8m1Ru.png" alt="image.png"></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.something.DefaultAccountService<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h3 id="Bean自动装配"><a href="#Bean自动装配" class="headerlink" title="Bean自动装配"></a>Bean自动装配</h3><ul><li>byName和byType</li></ul><pre class=" language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!--写两个类: 人类拥有猫 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cat1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.sjs.Cat<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shout<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>neo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    自动装配: autowire:        byType: 找到对应的类        byName: 找到对应的id和name--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>human<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.sjs.Human<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sjs<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h3 id="Spring注解"><a href="#Spring注解" class="headerlink" title="Spring注解"></a>Spring注解</h3><p>The introduction of annotation-based configuration raised the question of whether this approach is “better” than XML.(官方推荐使用注解)</p><ul><li>注解开发</li><li>1.带入约束</li><li>==2.只需要多加一个 &lt;context:annotation-config/&gt;==</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><ul><li><p>@Autowired</p><p>参数(required = “false 表示可以为null”)   <em>选择性填写</em> </p><p>先通过byName方式获取  如果没有则通过 byType (如果有两个相同的注入配置 byName会异常)</p><p>直接加到对应的属性或者set方法上</p><p>如果自动装配的属性在IOC(Spring)容器中存在, 且名字对应 就可以不写set方法(用反射机制获取对应的属性结构)</p></li><li><p>@Qualifier(value = “参数名字”) 配置一个别名</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"cat1"</span><span class="token punctuation">)</span><span class="token keyword">private</span> Cat cat<span class="token punctuation">;</span></code></pre></li><li><p>@Resource(是java自带的)</p><p>参数可以配置名字(name= “参数名字”)</p><p>先通过byName方式获取  如果没有则通过 byType </p></li></ul><h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><blockquote><p>一定要引入aop包 和配置自动扫描</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 扫描package下所有文件 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.sjs<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span></code></pre></blockquote><ul><li><p><strong>bean</strong></p><ol><li><p>@Component注解表示注入到Spring中 相当于    <code>&lt;bean id=&quot;&quot; name=&quot;&quot;/&gt;</code></p></li><li><p>@Component的衍生注解, 在web开发中,的MVC三层架构</p><ul><li>DAO层: @Repository</li><li>Controller层: @Controller</li><li>Service层: @Service</li></ul><blockquote><p>注解功能相同</p></blockquote></li></ol></li><li><p><strong>属性注入</strong></p></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 相当于 &lt;property name="" value=""/></span><span class="token keyword">private</span> String name<span class="token punctuation">;</span></code></pre><ul><li><p><strong>自动装配</strong></p><ul><li><p>@Autowired</p><p>参数(required = “false 表示可以为null”)   <em>选择性填写</em> </p><p>先通过byName方式获取  如果没有则通过 byType (如果有两个相同的注入配置 byName会异常)</p><p>直接加到对应的属性或者set方法上</p><p>如果自动装配的属性在IOC(Spring)容器中存在, 且名字对应 就可以不写set方法(用反射机制获取对应的属性结构)</p></li><li><p>@Qualifier(value = “参数名字”) 配置一个别名</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"cat1"</span><span class="token punctuation">)</span><span class="token keyword">private</span> Cat cat<span class="token punctuation">;</span></code></pre></li><li><p>@Resource(是java自带的)</p><p>参数可以配置名字(name= “参数名字”)</p><p>先通过byName方式获取  如果没有则通过 byType </p></li></ul></li><li><p><strong>作用域</strong></p></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 单例 原型 ... </span><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"Singleton"</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"prototype"</span><span class="token punctuation">)</span></code></pre><ul><li><strong>小结</strong></li></ul><blockquote><p>Xml与注解:</p></blockquote><ul><li>xml方便维护,比较万能 适用任何场合</li><li>注解 针对自己的类, 维护复杂</li></ul><blockquote><p>实践</p></blockquote><ul><li>xml用来管理bean</li><li>注解只负责完成注入</li><li>在使用过程中,只要注意一个问题: 开启注解支持配置(配置文件 和 扫描包)</li></ul><h3 id="javaConfig实现配置"><a href="#javaConfig实现配置" class="headerlink" title="javaConfig实现配置"></a>javaConfig实现配置</h3><ul><li>由于有javaConfig配置可以实现不用配置文件, 全交给JAVA来做!</li><li>javaConfig是Spring的一个子项目, 在Spring4之后, 成为了一个核心功能(获取ConfigContext)</li></ul><p><img src="https://i.loli.net/2020/07/04/HPgrKlqpuFb58GQ.png" alt="ApplicationContext.png"></p><ul><li>测试例子</li></ul><p>配置类:可以完全替代Bean.xml</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 这个类回由Spring容器托管 @Configuration的实现有@Component </span><span class="token comment" spellcheck="true">// @Configuration 代表配置类 和ApplicationContext.xml相同</span><span class="token comment" spellcheck="true">// 完全使用配置类只需要annotationConfig上下文来获取容器, 通过配置类的class对象加载!</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.sjs.POJO"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//@Import(OtherConfig.class)  引入其他配置文件 和 xml中的import一致</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SongConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 方法名为 id name 自动注入方式By_TYPE</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"getUser"</span><span class="token punctuation">,</span> autowire <span class="token operator">=</span> Autowire<span class="token punctuation">.</span>BY_TYPE<span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Cat <span class="token function">getCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猫来啦!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>PO类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// User类</span><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">// 组件</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"sjs"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Cat cat<span class="token punctuation">;</span>    <span class="token keyword">public</span> Cat <span class="token function">getCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cat<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCat</span><span class="token punctuation">(</span>Cat cat<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cat <span class="token operator">=</span> cat<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Cat类</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"mao"</span><span class="token punctuation">)</span>    String name<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 不需要配置文件</span>    ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>SongConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"getUser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>结果:</p><p>​    hahaha<br>​    猫来啦!<br>​    Cat{name=’mao’}<br>​    User{name=’sjs’}</p></blockquote><h2 id="AOP代理-面向切面"><a href="#AOP代理-面向切面" class="headerlink" title="AOP代理-面向切面"></a>AOP代理-面向切面</h2><p>AOP -Aspect Oriented Programming</p><blockquote><p>了解Spring的AOP实现不得不说到 java的反射机制和 动态<a href="[https://sunxinan12138.github.io/2020/05/31/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/](https://sunxinan12138.github.io/2020/05/31/代理模式/)">代理模式</a> </p><ul><li>基本概念<ol><li>通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术.</li><li>AOP是OOP的延续, 是软件开发的热点, 也是SPring框架的重要内容. 函数式编程的衍生泛型. ;利用AOP可以对业务逻辑各个部门进行隔离,是逻辑间耦合度降低, 提高重用性,提高开发效率</li></ol></li></ul></blockquote><blockquote><p>正常编程<img src="https://i.loli.net/2020/05/28/rQZ36jmDFYCR5NI.png" alt="image.png"></p></blockquote><blockquote><p>面向切面: 在一个功能(类)中切入另一个功能<img src="https://i.loli.net/2020/06/26/rOYqRu3ZHSNVeMc.png" alt="image.png"></p><p><img src="https://i.loli.net/2020/06/27/zMpQPvU64AdBYw8.png" alt="image.png"></p></blockquote><h3 id="Spring中AOP的作用"><a href="#Spring中AOP的作用" class="headerlink" title="Spring中AOP的作用"></a>Spring中AOP的作用</h3><blockquote><p>*<em>提供声明式服务: *</em> 允许用户自定义切面</p><ul><li>横切关注点: 跨越应用程序多个模块的方法或功能. – 与业务逻辑无关  但是我们要关注的部分– 日志, 安全, 缓存….</li><li>切面(ASPECT): 横切关注点 被模块化的特殊对象 – 是一个类(Log)</li><li>通知(Advice): 切面必须要完成的工作, 即, 他是类中的一个方法(日志方法)</li><li>目标(Target): 被通知对象.</li><li>代理(Proxy): 向目标对象应用通知后创建的对象</li><li>切入点(PointCut): 切面通知 执行的”地点”的定义</li><li>连接点(JoinPoint): 与切入点匹配的执行点</li></ul><p><img src="C:%5CUsers%5C25778%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200627195527701.png" alt="image-20200627195527701"></p></blockquote><h3 id="AOP重要性："><a href="#AOP重要性：" class="headerlink" title="AOP重要性："></a>AOP重要性：</h3><p>aop将公共业务（日志，安全）和领域业务结合。公共业务可以重复使用，程序猿更专注与领域业务 本质动态代理</p><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><blockquote><p><a href="[https://sunxinan12138.github.io/2020/06/05/JAVA%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/](https://sunxinan12138.github.io/2020/06/05/JAVA反射机制/)">反射机制</a> 需要了解一下</p></blockquote><ul><li>哪些方法不能被AOP增强</li></ul><ol><li>基于JDK代理，除public外的其他所有方法，包括public static也不能被增强</li><li>基于CGLIB代理，由于其通过生成目标类子类的方式来增强，因此不能被子类继承的方法都不能被增强，private、static、final 方法</li></ol><h4 id="使用Spring原生接口方式-和JDK动态代理模式很像"><a href="#使用Spring原生接口方式-和JDK动态代理模式很像" class="headerlink" title="使用Spring原生接口方式(和JDK动态代理模式很像)"></a>使用Spring原生接口方式(和JDK动态代理模式很像)</h4><ol><li><p>核心配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.SpringAOP.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> // 被切入的业务 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.SpringAOP.MyLog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> // 切入的业务 <span class="token comment" spellcheck="true">&lt;!-- 配置的(..) 括号是方法 .. 任意参数--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 切入点  expression: (返回类型  切入的位置(包.类.方法(参数类型)))--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.SpringAOP.UserServiceImpl.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>pointcut</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 哪个类切入哪个切入点(log) --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>advisor</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span></code></pre></li><li><p>日志类</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLog</span> <span class="token keyword">implements</span> <span class="token class-name">MethodBeforeAdvice</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span>Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> Object o<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"haha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>载入配置文件</li></ol><pre class=" language-java"><code class="language-java">ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"aopConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 加载xml方式</span>UserService userService <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Spring调用</span>userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>Spring的五种Advice</li></ul><table><thead><tr><th>通知类型</th><th align="left">连接点</th><th>接口</th></tr></thead><tbody><tr><td>前置通知</td><td align="left">方法前</td><td>aop.MethodBeforeAdvice</td></tr><tr><td>后置通知</td><td align="left">方法后</td><td>aop.AfterReturnAdvice</td></tr><tr><td>环绕通知</td><td align="left">方法前后</td><td>intercept.MethodInterceptor</td></tr><tr><td>异常抛出通知</td><td align="left">方法抛出异常</td><td>aop.ThrowsAdvice</td></tr><tr><td>引介通知</td><td align="left">类中增加新的方法属性</td><td>aop.IntroductionInterceptor</td></tr></tbody></table><h4 id="使用自定义类实现"><a href="#使用自定义类实现" class="headerlink" title="使用自定义类实现"></a>使用自定义类实现</h4><ol><li>先自定义一个类</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDiyLog</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 自定义类当做切面</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">befor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>配置文件</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- Spring 注入Bean --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.SpringAOP.MyDiyLog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.SpringAOP.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--  aop 配置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--  配置切面的ref  --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.SpringAOP.UserServiceImpl.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>pointcut</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>befor<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>around<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span></code></pre><h4 id="使用注解方式实现"><a href="#使用注解方式实现" class="headerlink" title="使用注解方式实现"></a>使用注解方式实现</h4><ol><li>配置文件:</li></ol><pre class=" language-xml"><code class="language-xml">   <span class="token comment" spellcheck="true">&lt;!-- 三: 注解 --></span><span class="token comment" spellcheck="true">&lt;!-- 两种方式     1. jdk自己的(false)(默认就是这个)     2. cglib(true) --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotationLog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.AnnotationMethod.MyLogAnnotation<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>注解部分</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLogAnnotation</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* com.SpringAOP.UserServiceImpl.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">befor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"befor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li><p>其他的相比第一种没有变化</p></li><li><h3 id="六种增强类型"><a href="#六种增强类型" class="headerlink" title="六种增强类型"></a>六种增强类型</h3><ol><li>@Before 前置增强，相当于BeforeAdvice</li><li>@AfterReturning 后置增强，相当于AfterReturningAdvice</li><li>@Around 环绕增强，相当于MethodInterceptor</li><li>@AfterThrowing 抛出增强，相当于ThrowsAdvice</li><li>@AfterFinal增强，不管抛出异常还是正常退出，都会执行，没有对应的增强接口，一般用于释放资源</li><li>@DeclareParents 引介增强，相当于IntroductionInterceptor</li></ol></li></ol><blockquote><p><a href="#">Spring事务运用</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 未完成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程</title>
      <link href="/2020/05/25/%E7%BA%BF%E7%A8%8B/"/>
      <url>/2020/05/25/%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="线程Thread"><a href="#线程Thread" class="headerlink" title="线程Thread"></a>线程Thread</h1><p>[toc]</p><blockquote><p>Thread隶属于java.lang包下的类 ,java语言的JVM允许程序运行多个线程</p><p>Thread:每个线程通过特定Thread对象的run()方法来完成操作,经常把</p></blockquote><h2 id="程序-线程和进程"><a href="#程序-线程和进程" class="headerlink" title="程序,线程和进程"></a>程序,线程和进程</h2><ul><li><p><strong>程序(Program):</strong>为了完成特定任务, 用某种语言编写的一组指令集合. 即<kbd>一段静态代码</kbd>,静态对象</p></li><li><p><strong>进程(process):</strong>是指程序的一次执行过程, 或是<kbd>正在运行的一个程序</kbd>. 动态过程: 有它自身的产生, 存在和消亡的过程.</p><blockquote><p>如: 运行中的软件qq 浏览器等</p><p>程序是静态的,运行的进程是动态的</p></blockquote></li><li><p><strong>线程(Thread):</strong>进程细化一些为线程,是一个程序内部的一条执行路径</p><blockquote><p>当热程序在同一时间可以有多个执行路径, 也就是支持多线程</p></blockquote></li></ul><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><blockquote><p>java中线程分为:<strong>守护线程(daemon)</strong>和<strong>用户线程</strong></p><blockquote><p>虚拟机必须保证用户线程执行完毕,守护线程不需要等待: 如后台记录日志,内存监控,gc垃圾回收等</p></blockquote><p>守护线程设置: thread.setDemon(true为守护线程)</p></blockquote><pre><code>1.线程就是独立执行的路径2.在程序运行时，即使没有创建线程，也会有多个线程(javg gc线程，主线程)3.main()称为主线程 ，为系统的入口，用于执行整个程序4.在一个进程中，开了多个线程，线程的运行由调度器安排调度，调度器是与操作系统5.紧密相关的，先后顺序是不能人为干预的6.对同一份资源操作时，会存在资源抢夺问题，要加入并发控制7.线程会带来额外的开销，cpu调度时间，并发控制开销8.每个线程在自己的工作内存中交互，内存控制不当会造成数据不一致</code></pre><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><blockquote><p>在JDK中Thread.State枚举表示了线程的六种状态</p><blockquote><p>getState():获取状态:hamburger:</p></blockquote><ul><li>新生(NEW):  当一个Thread类或子类的对象被声明并且创建后,新的线程处于新建状态</li><li>就绪(RUNABLE): 当线程被start()后,将进入线程队列等待cpu时间片</li><li>运行(running ): 线程被调度并且获得处理器资源时,进入运行状态,-run()方法内执行</li><li>阻塞(BLOCKED): 被人为挂起或者其它方式,让出cpu并临时终止自己执行<ul><li>(Waiting):正在等待另一个线程执行特定动作的线程出于此状态</li><li>(TIMED_WAITTING):正在等待另一个线程执行动作达到指定等待时间的线程处于此状态</li></ul></li><li>死亡(TERMINATED): 线程完成或者出现错误/异常被强制终止<ul><li>主动线程停止方式：推荐使用标志位，设置一个停止状态让线程自然死亡</li></ul></li></ul></blockquote><p>​                                                            如图</p><p><img src="https://i.loli.net/2020/05/27/sQ7TN4wSIAkUCFp.png" alt="线程生命周期"></p><h2 id="线程的三种创建方式"><a href="#线程的三种创建方式" class="headerlink" title="线程的三种创建方式"></a>线程的三种创建方式</h2><blockquote><p><strong>Junit4单元测试线程异常</strong>: 具体原因不太了解但是和junit的实现有关(记到小本本–下次在了解)</p></blockquote><h3 id="一-继承Thread类"><a href="#一-继承Thread类" class="headerlink" title="一 . 继承Thread类"></a>一 . 继承Thread类</h3><blockquote><p>重写run()方法 ,并且用thread.start()启动线程</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadBuild</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadTest threadTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadTest<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 启动线程</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 重写run方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 线程命名</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取当前线程名 + 变量</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>程序中创建了一个 <strong>线程1</strong> 线程 在主线程中启动 线程间是独立执行的 ,如图:</p><p><img src="/images/Thread.png" alt="执行方式图解"></p><p>所以会看到并行交替执行的情况:</p><p><img src="/images/%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="并没有顺序"></p></blockquote><p>在Thread中有以下代码保证了Start()方法不能重复调用:<img src="/images/start.png" alt="start的源码"></p><h4 id="练习"><a href="#练习" class="headerlink" title="练习:"></a>练习:</h4><blockquote><p> 用多线程写图片复制/用线程实现3个售票窗口(<strong>要考虑产生资源冲突</strong>)(代码emmmm就不粘了)</p></blockquote><h3 id="二-实现Runnable接口"><a href="#二-实现Runnable接口" class="headerlink" title="二. 实现Runnable接口"></a>二. 实现Runnable接口</h3><blockquote><p>实现Runnable接口并且重写run()方法</p><p>由于Thread类为一个代理类 代理了Runnable</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 实现接口的线程创建方式</span>        ThreadTest threadTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Runnable接口实现类对象</span>        <span class="token comment" spellcheck="true">// 将此对象作为形参放入 Thread的构造方法中 并创造对象</span>        Thread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>threadTest<span class="token punctuation">)</span><span class="token punctuation">;</span>         Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>threadTest<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"1Thread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 命名</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 启动线程</span>           thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// lamdba表达式（1.8新特性）</span>     <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><ol><li><p>Thread 本身就实现了Runnable接口</p></li><li><p>实现方式优于继承方式</p><ol><li>避免了java中单继承的局限性</li><li>在操作同一份资源中,更适合使用实现方式<ol><li>一个对象的资源给多个线程使用</li></ol></li></ol></li></ol></blockquote><h3 id="三-实现Callable接口"><a href="#三-实现Callable接口" class="headerlink" title="三. 实现Callable接口"></a>三. 实现Callable接口</h3><blockquote><p>重写的call()方法 </p><p>需要执行服务和关闭服务(ExecutorService的对象 )<br><kbd>ExecutorService service = Executors.newFixedThreadPool(3);</kbd></p><p>提交执行 submit(线程对象)<br><kbd>Future f1 = service.submit(c);</kbd></p><p>获取返回值 记得结束服务<br><kbd>String s1 = (String) f1.get();</kbd><kbd>service.shutdown();</kbd></p></blockquote><h2 id="Thread类常用方法"><a href="#Thread类常用方法" class="headerlink" title="Thread类常用方法"></a>Thread类常用方法</h2><blockquote><ol><li><p>start(): 启动线程并执行响应的run()方法</p></li><li><p>run():子线程要执行的代码</p></li><li><p>currentThread(): 静态的,调用当前的线程</p></li><li><p>getName()/setName(): 获取和设置线程名字</p></li><li><p>yield():  调用此方法的线程放弃当前cpu的执行权，礼让别的线程（我让了但是，你们抢不抢得到那不归我管）</p></li><li><p>join(): 在A线程中调用B.join()方法. （插入A线程中） </p><blockquote><p><strong>表示</strong>: A线程停止,直到B线程执行完毕 A线程在执行后面的代码</p><blockquote><p> sleep()和yield()方法</p><ul><li><p>sleep不考虑优先级/yield同优先级</p></li><li><p>sleep 后是阻塞/yield是就绪状态</p></li><li><p>sleep有异常 /而且不会释放线程 – 都不会释放标志锁</p></li><li><p>sleep比yield有更好的移植性</p></li></ul><p>wait()</p><ul><li>和notify()/notifyAll() 一起用</li><li>在synchronized中使用</li><li>wait会释放标志锁/sleep和yield不会</li></ul></blockquote></blockquote></li><li><p>isAlive(): 判断当前线程是否存活</p></li><li><p>sleep(long time): 当前线程睡眠time毫秒(1000ms = 1s)</p><ol><li>不会释放线程</li></ol></li><li><p>线程通信中wait()</p></li><li><p>notify()：释放优先级高的等待的线程</p></li><li><p>notifyAll()：释放所有等待的线程</p></li><li><p>设置线程的优先级</p><blockquote><p>getPriority(): 返回当前线程优先级</p><p>setPriority(int newPriority): 改变当前线程优先级 : <kbd>正常为5,最大10,最小是1</kbd></p></blockquote></li></ol></blockquote><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><blockquote><blockquote><p><strong>保证线程安全</strong></p></blockquote><ul><li>尽量避免<strong>共享</strong>资源的存取冲突, 如果必须有共享资源, 那就设计一个规则(锁)来保证, 同时间只有一个线程访问资源  而且<strong>一个客户</strong>的计算工作由<strong>一个线程</strong>解决</li></ul></blockquote><blockquote><p><del>线程不安全的集合:ArrayList –&gt; CopyOnWriterArrayLis(JUC下并发安全的包)</del></p><ul><li><del>ArrayList ：</del></li><li><del>LinkedList：</del></li><li><del>HashMap：</del></li><li><del>HashSet：</del></li><li><del>TreeMap：</del></li><li><del>TreeSet：</del></li><li><del>StringBulider：</del></li></ul><p>(待完成)</p></blockquote><blockquote><p>刚才的窗口买票程序就会出现安全问题</p><p>原因:由于多个线程在操作共享的数据时,在其中一个线程未执行完毕时,另一个线程进入,导致共享数据出现问题</p></blockquote><p><img src="https://i.loli.net/2020/05/28/EhVquDZ5Bwpit4g.png" alt="线程安全出现的原因.png"></p><ul><li><p>如何解决线程安全的问题? </p><blockquote><p>想办法热那个一个线程操作数据完毕后,其他线程才能操作</p></blockquote></li><li><p>java中实现线程安全,线程同步机制:</p><blockquote></blockquote><ul><li><p>一 同步代码块</p><blockquote><p>synchronized关键字 — 要有一个对象充当同步监视器(缺点:会影响效率)</p><p>同步监视器:由一个类的对象充当.当一个线程获取监视器,就执行代码.(通一把锁的对象一定是同一个对象) — <strong>锁</strong></p></blockquote><p><img src="https://i.loli.net/2020/05/28/dEHqCfLVynIOJQP.png" alt="synchronized.png"></p></li></ul></li></ul><pre><code>实现代码:```java public  void run() {        while (true) {            synchronized (this) { // 用本类的对象为同步监视器                if (ticket &gt; 0) { // 如果有票 修改变量                    try {                        Thread.sleep(10); // 假设睡眠                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                    System.out.println(Thread.currentThread().getName() + &quot;:&quot; + ticket);                    ticket--;                }            }        }  }```</code></pre><ul><li><p>二 同步方法</p><blockquote><p>保证同一时间只有一个线程访问此方法</p><p>用synchronized修饰方法: <kbd>public synchronized void method()</kbd>叫同步方法</p><p>同步监视器对象默认为当前对象</p></blockquote></li></ul><ul><li>在单例模式中 – <a href="https://sunxinan12138.github.io/2020/05/31/单例模式/" target="_blank" rel="noopener">锁的问题(双重锁定)</a></li></ul><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><blockquote><ul><li>概念: 不同的线程分别占用对方的同步资源不放弃,都在等待对方放弃自己需要的同步资源,就形成了死锁</li><li>解决办法: <ul><li>算法, 原则</li><li>尽量减少同步资源的定义</li></ul></li></ul></blockquote><h4 id="LOCK锁"><a href="#LOCK锁" class="headerlink" title="LOCK锁"></a>LOCK锁</h4><blockquote><ul><li>从JDk5.0开始, JAVA提供了更强大的线程同步机制–通过显式定义同步锁对象来实现同步. 同步锁使用Lock对象充当</li><li>Java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具. 锁提供了对共享资源的独占访问, 每次只能有一个线程对Lock对象加锁, 线程开始访问共享资源之前硬获得Lock对象</li><li>ReentrantLock(可重入锁)类实现了Lock, 它拥有与synchronized相同的并发性,在实现线程安全控制中,比较常用的是ReentrantLock, 可以显式加锁,释放锁</li></ul></blockquote><blockquote><p><strong>Lock与synchronized的对比</strong></p><ul><li>Lock是显式锁(需要手动开关)  synchronized是隐式锁,自动释放</li><li>Lock只是锁代码块</li><li>使用Lock, JVM调度线程花费时间少,性能好. 而且具有更好的扩展性(提供更多的子类)</li><li>优先级:<ul><li>Lock &gt; 同步代码块&gt;同步方法</li></ul></li></ul></blockquote><pre class=" language-java"><code class="language-java"> <span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 官方建议用Try，catch， finally</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 加锁</span>               <span class="token comment" spellcheck="true">// 需要加锁的代码区</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 解锁</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><blockquote><p>关键字:wait(), notify()和 notifyAll() – 线程调度的方法</p><ul><li><p>wait(): 令当前线程挂起cpu/同步资源器, 使别的线程可以访问并修改公共资源,当前线程会在排队等待状态.</p></li><li><p>notify():唤醒正在排队等待同步资源的的<strong>优先级最高</strong>的线程 – 结束等待</p></li><li><p>notifyAll(): 唤醒正在排队等待同步资源的的<strong>所有</strong>线程 – 结束等待</p></li></ul><p>注意: 这三个方法为java.lang.Object下的 而且只有在synchronized方法或代码块中才会使用.</p></blockquote><h2 id="写个生产者-消费者练习-不是OO的Pattern"><a href="#写个生产者-消费者练习-不是OO的Pattern" class="headerlink" title="写个生产者/消费者练习(不是OO的Pattern)"></a>写个生产者/消费者练习(不是OO的Pattern)</h2><p><img src="https://i.loli.net/2020/06/01/jQAPyZdFRN1Ye4w.png" alt="image.png"></p><blockquote><p>分析:</p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 是否考虑线程<span class="token list punctuation">2.</span> 是否涉及共享数据<span class="token list punctuation">3.</span> 如果有共享数据 考虑线程安全/同步的问题<span class="token list punctuation">4.</span> 是否有线程通信</code></pre></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 管城法</span><span class="token comment" spellcheck="true">// 生产者做东西 消费者买 (通信:生产到20 停止生产 0开始生产停止购买)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">P2CTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 主线程</span>        Clerk clerk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Clerk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Producer producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>clerk<span class="token punctuation">)</span><span class="token punctuation">;</span>        Consumer consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>clerk<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>producer<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>producer<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread c3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"生产1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"生产2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"消费1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"消费2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"消费3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Clerk</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 店员 公共部分</span>    <span class="token keyword">int</span> product<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 生产到20 停止生产 0开始生产停止购买</span>    <span class="token comment" spellcheck="true">// 同步方法</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token operator">>=</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果作满了 停止制作</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"暂停制作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            product <span class="token operator">+=</span> num<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 添加制作数量</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"生产了: "</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">"====现在还有"</span> <span class="token operator">+</span> product<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果有存货就释放锁 让用户购买</span>                <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">buyProduct</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"暂停购买"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            product <span class="token operator">-=</span> num<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"购买了了: "</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">"====现在还有"</span> <span class="token operator">+</span> product<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果数量不足释放生产者来制作</span>                <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 生产者</span>    Clerk clerk<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Producer</span><span class="token punctuation">(</span>Clerk clerk<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clerk <span class="token operator">=</span> clerk<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            clerk<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 消费者</span>    Clerk clerk<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Consumer</span><span class="token punctuation">(</span>Clerk clerk<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clerk <span class="token operator">=</span> clerk<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            clerk<span class="token punctuation">.</span><span class="token function">buyProduct</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="线程池-了解"><a href="#线程池-了解" class="headerlink" title="线程池(了解)"></a>线程池(了解)</h2><blockquote><ul><li>将线程放入池子,方便使用和管理,也避免了销毁造成的浪费</li><li>ExecutorService:线程池接口</li><li>Executors(Runable 接口):工具类,线程池工厂</li></ul></blockquote><pre class=" language-java"><code class="language-java">ExecutorService service <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 数量</span>service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SJSThread</span><span class="token punctuation">)</span><span class="token punctuation">;</span>service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SJSThread</span><span class="token punctuation">)</span><span class="token punctuation">;</span>service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SJSThread</span><span class="token punctuation">)</span><span class="token punctuation">;</span>service<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结束线程连接池</span></code></pre><h2 id="同步-异步"><a href="#同步-异步" class="headerlink" title="同步/异步"></a>同步/异步</h2><blockquote><ul><li><strong>异步: (非阻塞)</strong><ol><li>当程序正在执行一个较长时间的程序, 不等待他的返回,就是异步</li><li>异步效率高.</li></ol></li><li><strong>同步:(阻塞)</strong><ol><li>当程序中存在竞争资源,  或者正在读取的数据可能被修改 就使用同步存取</li><li>如果有公共数据就要用同步方法</li><li>数据库的排它锁</li></ol></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程的基础 </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单的工厂模式</title>
      <link href="/2020/05/23/%E7%AE%80%E5%8D%95%E7%9A%84%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/05/23/%E7%AE%80%E5%8D%95%E7%9A%84%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="简单的工厂模式-大话设计模式"><a href="#简单的工厂模式-大话设计模式" class="headerlink" title="简单的工厂模式 - 大话设计模式"></a>简单的工厂模式 - 大话设计模式</h1><p><strong><em>每一个模式描述了一个在我们周围不断重复发生的问题,以及该问题的解决方案的核心。</em></strong></p><blockquote><p>先了解面向对象设计</p></blockquote><blockquote><p>当你需要实例化哪个类,或者未来会不会增加实例化对象,所以考虑用一个单独的类来做这个创造实例化的过程–<kbd>工厂</kbd> </p></blockquote><blockquote><p>耦合度降低 每个实例是相对独立的 做到了<strong>容易维护,扩展和复用</strong></p></blockquote><h2 id="例子"><a href="#例子" class="headerlink" title="例子:"></a>例子:</h2><p><img src="/images/SimpleFactory.png" alt="简单的工厂模式"><br>1.PO类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>sjs<span class="token punctuation">.</span>SimpleFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Operation</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> numberA<span class="token punctuation">;</span>    <span class="token keyword">double</span> numberB<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getNumberA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> numberA<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNumberA</span><span class="token punctuation">(</span><span class="token keyword">double</span> numberA<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>numberA <span class="token operator">=</span> numberA<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getNumberB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> numberB<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNumberB</span><span class="token punctuation">(</span><span class="token keyword">double</span> numberB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>numberB <span class="token operator">=</span> numberB<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getReasult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.加减乘除类(封装类继承基类)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>sjs<span class="token punctuation">.</span>SimpleFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Add</span> <span class="token keyword">extends</span> <span class="token class-name">Operation</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 重写getResult方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getReasult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>numberA <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span>numberB<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Operation</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 重写getResult方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getReasult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>numberA <span class="token operator">-</span> <span class="token keyword">super</span><span class="token punctuation">.</span>numberB<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.简单工厂类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>sjs<span class="token punctuation">.</span>SimpleFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperationFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 当你输入表达式工厂自动匹配类创建对象</span>    <span class="token comment" spellcheck="true">// 实例化对象的问题交给工厂</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Operation <span class="token function">operation</span><span class="token punctuation">(</span>String operate<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 用符号自动匹配要创建的实例</span>        Operation operation <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>operate<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">"+"</span><span class="token operator">:</span>                <span class="token comment" spellcheck="true">// add</span>                operation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"-"</span><span class="token operator">:</span>                <span class="token comment" spellcheck="true">// sub</span>                operation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> operation<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.使用简单工厂模式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>sjs<span class="token punctuation">.</span>SimpleFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 简单工厂模式()</span>        <span class="token comment" spellcheck="true">// 用工厂类自动创建实例</span>        Operation operation <span class="token operator">=</span> OperationFactory<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        operation<span class="token punctuation">.</span><span class="token function">setNumberA</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        operation<span class="token punctuation">.</span><span class="token function">setNumberB</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>operation<span class="token punctuation">.</span><span class="token function">getReasult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 没有代理模式</span><span class="token comment" spellcheck="true">//        Operation add = new Add();</span><span class="token comment" spellcheck="true">//        add.setNumberA(12);</span><span class="token comment" spellcheck="true">//        add.setNumberB(23);</span><span class="token comment" spellcheck="true">//        System.out.println(add.getReasult());</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        Operation sub = new Sub();</span><span class="token comment" spellcheck="true">//        sub.setNumberA(12);</span><span class="token comment" spellcheck="true">//        sub.setNumberB(23);</span><span class="token comment" spellcheck="true">//        System.out.println(sub.getReasult());</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大话设计模式 </category>
          
          <category> 抄书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单工厂模式 </tag>
            
            <tag> GOF-23 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一题-76.最小覆盖子串</title>
      <link href="/2020/05/23/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-76-%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2-1/"/>
      <url>/2020/05/23/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-76-%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2-1/</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode每日一题-76-最小覆盖子串"><a href="#leetcode每日一题-76-最小覆盖子串" class="headerlink" title="leetcode每日一题:76.最小覆盖子串"></a>leetcode每日一题:76.最小覆盖子串</h1><p><a href="https://leetcode-cn.com/problems/minimum-window-substring/" target="_blank" rel="noopener">76.最小覆盖子串</a><br><br><img src="/images/76.png" alt="img"><br><br>代码和注释:</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mainTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">minWindow</span><span class="token punctuation">(</span><span class="token string">"ADOBECODEBANC"</span><span class="token punctuation">,</span> <span class="token string">"ABC"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 滑动窗口</span>    <span class="token keyword">public</span> String <span class="token function">minWindow</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> String t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 左右指针</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 存储s和t出现次数</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> snum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tnum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tlen <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// t串存入</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tlen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tnum<span class="token punctuation">[</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> minLenth <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 右指针移动</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            snum<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将s出现的次数存入数组</span>            <span class="token comment" spellcheck="true">// 如果满足 当前字符是t字符里的 并且在当前范围只出现一次</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tnum<span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> tnum<span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">>=</span> snum<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 当长度满足t时</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> tlen<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 从左到右移动left 指针直到count长度不足</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tnum<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> tnum<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">>=</span> snum<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    count<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 找到最短长度 将初始和结尾储存</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> minLenth<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    minLenth <span class="token operator">=</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    min <span class="token operator">=</span> left<span class="token punctuation">;</span>                    max <span class="token operator">=</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                snum<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            right<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 记录/踩坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DataBase&amp;algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的hexo博客搭建配置更改</title>
      <link href="/2020/05/22/%E6%88%91%E7%9A%84hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE%E6%9B%B4%E6%94%B9/"/>
      <url>/2020/05/22/%E6%88%91%E7%9A%84hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE%E6%9B%B4%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="从0开始搭建hexo博客-win10"><a href="#从0开始搭建hexo博客-win10" class="headerlink" title="从0开始搭建hexo博客(win10)"></a>从0开始搭建hexo博客(win10)</h1><h2 id="基本安装"><a href="#基本安装" class="headerlink" title="基本安装"></a>基本安装</h2><blockquote><p>安装node.js <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js官网下载地址</a></br><br>安装git <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git官方下载地址</a></br><br>在git/gitee 新建库并且以你的名字命名 git:<kbd>yourName.github.io</kbd> gitee:<kbd>yourName</kbd><br><br>安装hexo<kbd>$ npm install -g hexo-cli</kbd> win会有警告 忽略就好</br><br>新建: (<strong>找到你的文件夹</strong>)执行 <kbd>hexo init</kbd>   <kbd>$ cd </kbd>   <kbd>$ npm install </kbd></br><br>配置:</p><blockquote><p>可以参考 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">这里</a> <br></p><pre><code>建议配置:**url**: https://gitee.com/xxx/xxx.git 你的博客访问地址**per_page**:改为6的倍数 6,12,18 **# Site** 此处 有更多关于首页配置**title**: 博客名字</code></pre></blockquote></blockquote><p>hexo的目录配置</p><pre class=" language-markdown"><code class="language-markdown">|-- demo//项目跟目录名<span class="token code keyword">    |-- .gitignore//git时忽略的文件或目录</span><span class="token code keyword">    |-- package-lock.json</span><span class="token code keyword">    |-- package.json//应用程序的信息</span><span class="token code keyword">    |-- _config.yml//网站的配置信息</span><span class="token code keyword">    |-- scaffolds//模板文件夹，Hexo的模板是指在新建的markdown文件中默认填充的内容。</span><span class="token code keyword">    |   |-- draft.md</span><span class="token code keyword">    |   |-- page.md</span><span class="token code keyword">    |   |-- post.md//博文模板</span><span class="token code keyword">    |-- source//资源文件夹，存放用户资源</span><span class="token code keyword">    |   |-- _posts//博文目录</span><span class="token code keyword">    |       |-- hello-world.md//博文</span><span class="token code keyword">    |-- themes//主题文件夹，Hexo 会根据主题来生成静态页面</span><span class="token code keyword">        |-- landscape.//默认主题</span></code></pre><h2 id="配置git和gitee库"><a href="#配置git和gitee库" class="headerlink" title="配置git和gitee库"></a>配置git和gitee库</h2><ol><li>首先你要有这两个仓库</li><li>修改[^ _config.yml ] 此文件的配置<pre><code>deploy:type: &#39;git&#39;repo:   github: https://github.com/xxxx/xxxx.github.io.git   gitee: https://gitee.com/xxxx/xxxx.gitbranch: master</code></pre></li><li>在执行 hexo d 就能在你的链接访问啦</li><li><strong>提示</strong>：gitee要启动一下gitee Pages<kbd>自你的库-服务- gitee pages</kbd>每次更新后要重新更新一下gitee Pages<h2 id="基本语句"><a href="#基本语句" class="headerlink" title="基本语句"></a>基本语句</h2><ul><li>执行 <kbd>hexo server</kbd> == <kbd>hexo s</kbd> 默认为 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br></li><li><ul><li><kbd>-p</kbd> 选项，指定服务器端口，默认为 4000</li></ul></li><li><ul><li><kbd>-i</kbd> 选项，指定服务器 IP 地址，默认为 0.0.0.0</li></ul></li><li><ul><li><kbd>-s</kbd> 选项，静态模式 ，仅提供 public 文件夹中的文件并禁用文件监视</li></ul></li><li><kbd>hexo generate</kbd> 命令用于生成静态文件，一般可以简写为 hexo g</li><li><kbd>hexo d</kbd> 发布到 git/gitee库</li><li><strong>说明</strong> ：部署前需要修改 _config.yml 配置文件，下面以 git/gitee 为例进行</li><li><kbd>hexo clean</kbd> 命令用于清理缓存文件，是一个比较常用的命令</li><li>根目录命令行输入hexo new &lt;模板&gt; &lt;文章名&gt; 新建博客</li><li>末班在scaffold文件夹下</li></ul></li></ol><table><thead><tr><th>参数</th><th>功能</th><th>路径</th></tr></thead><tbody><tr><td>post</td><td>新建文章</td><td>/source/_posts/</td></tr><tr><td>draft</td><td>新建草稿</td><td>/source/_drafts/</td></tr><tr><td>page</td><td>新建页面（标签页，分类页等）</td><td>/source/</td></tr></tbody></table><h2 id="主题安装配置"><a href="#主题安装配置" class="headerlink" title="主题安装配置"></a>主题安装配置</h2><p> 有很多优秀好看的主题 next等 不想折腾就用next吧 用的多排坑的也多 <br><br> 我的是Matery 我的主页下方有下载地址[^ Theme Matery ] 或者戳<a href="https://github.com/blinkfox/hexo-theme-matery">这里</a><br><br> (下载的主题有说明文档)😜 </p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><blockquote><p> 图片轮播位置: _config.yml/ myGallery:<br>文章图片: _config.yml/  featureImages</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> build </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
