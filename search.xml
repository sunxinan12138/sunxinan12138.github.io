<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>游戏服务器中的分布式</title>
      <link href="/2021/01/23/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F/"/>
      <url>/2021/01/23/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="游戏服务器中的分布式"><a href="#游戏服务器中的分布式" class="headerlink" title="游戏服务器中的分布式"></a>游戏服务器中的分布式</h1><p>之前有了解一些服务器架构发展</p><p>现在大多游戏的服务端都是分布式架构，这个篇文章稍微学习以下分布式架构在游戏中使用吧。</p><h2 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h2><p>在《分布式系统原理与范型》一书中定义:<strong>分布式系统是若干独立计算机的集合, 这些计算机对于用户来说就像单个相关系统</strong></p><p><img src="C:%5CUsers%5C25778%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210123145603950.png" alt="image-20210123145603950"></p><h2 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h2><p>多个组件通过网路配合协作</p><ol><li><p>socket</p><p>网络编程，写服务器客户端连接，服务端与服务端连接，第三方服务连接等。</p></li><li><p>一些中间件，消息队列，MQ，tbus（腾讯的）等</p></li></ol><h3 id="tbus"><a href="#tbus" class="headerlink" title="tbus"></a>tbus</h3><p>Tbus基于共享内存构建无锁双通循环消息队列，发送的双方通过专用的读写队列完成数据收发，实现本地进程通信或者远程进程间通信。通信双方使用的两个队列称之为tbus通道(channel)，每一组通讯的双方就需要有一个tbus通道。进程A或B启动后，通过tbus API绑定到对应的通道，使用通道的两个消息队列进行收发数据，而不用关注对方的部署位置。</p><p><img src="https://i.loli.net/2021/01/23/NFUkQWCjEYBGdZs.png" alt="image.png"></p><h4 id="如果A和B进程不在同一台物理设备上"><a href="#如果A和B进程不在同一台物理设备上" class="headerlink" title="如果A和B进程不在同一台物理设备上"></a>如果A和B进程不在同一台物理设备上</h4><p><img src="https://i.loli.net/2021/01/23/fQrnp82u3UNmx6F.png" alt="image.png"></p><ol><li><p>标记找到进程A和B的地址（World.Zone.Func.Instance）4位十进制的地址</p></li><li><p>通过Tbusd将两台机器建立联系，互相发送消息</p></li><li><p>Tbusd如何获得进程地址，以及相互建立联系呢？这时候就有了GCIM(本机)和GRM</p></li></ol><h4 id="GCIM-GRM"><a href="#GCIM-GRM" class="headerlink" title="GCIM GRM"></a>GCIM GRM</h4><ul><li>一台服务器可以有诸多的通信关系，每一条tbus通道就是最小的通信单元，每条通道都有自己的配置区域，保存着通道大小，通道地址以及读写指针等，一台服务器上所有配置信息汇聚起来就是全局通道信息表（globalchannel information map, GCIM），一台服务器仅需要一份。管理GCIM的工具是tbusmgr。管理关系如下：</li></ul><p><img src="https://i.loli.net/2021/01/23/edGH6u4rkLa9vEc.png" alt="image.png"></p><ul><li>如果一台服务器不需要和其他远程服务器通信，则使用GCIM就能完成所有工作。当两台服务器需要使用tbus进行通信时，为了完成通信，除了启动tbusd服务进程之外，还需要建立一份通信配置，称之为全局路由表（globalroute map，GRM），用于说明哪些通道的消息需要中转。GRM也是保存在共享内存中，每一台机器只需要一份，管理GRM的工具为trelaymgr。</li></ul><h2 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h2><p>通信格式，发送者和接受者统一，并且高效。</p><ol><li>序列化、反序列化（高性能）</li><li>版本兼容</li></ol><p>例如： protocol buffers：</p><p><img src="https://i.loli.net/2021/01/23/tyAm6pcEC7OgbvM.png" alt="image.png"></p><h2 id="定时器-超时处理"><a href="#定时器-超时处理" class="headerlink" title="定时器 - 超时处理"></a>定时器 - 超时处理</h2><p>没什么理解（未来在做吧）</p><p>时间轮</p><p><img src="C:%5CUsers%5C25778%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210123152819172.png" alt="image-20210123152819172"></p><h2 id="游戏中经典的三层架构"><a href="#游戏中经典的三层架构" class="headerlink" title="游戏中经典的三层架构"></a>游戏中经典的三层架构</h2><p>接入层-》逻辑层-》数据层</p><p><img src="https://i.loli.net/2021/01/23/vklXESOUd5RT2jW.png" alt="image.png"></p><h3 id="分区分服务的实现"><a href="#分区分服务的实现" class="headerlink" title="分区分服务的实现"></a>分区分服务的实现</h3><p><img src="https://i.loli.net/2021/01/23/bqkEY3ohapIFBix.png" alt="image.png"></p><h2 id="其他技术"><a href="#其他技术" class="headerlink" title="其他技术"></a>其他技术</h2><p>异步处理框架：</p><ol><li>网络处理，多路复用：</li><li>状态机框架</li><li>协程处理</li></ol><h1 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h1><p>todo： 比较杂，什么时候全面了在补全</p><p><a href="https://www.jianshu.com/p/543480357755" target="_blank" rel="noopener">tbus</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>epoll</title>
      <link href="/2021/01/17/epoll/"/>
      <url>/2021/01/17/epoll/</url>
      
        <content type="html"><![CDATA[<h1 id="epoll为什么性能好"><a href="#epoll为什么性能好" class="headerlink" title="epoll为什么性能好"></a>epoll为什么性能好</h1><blockquote><p>对 select/poll/epoll 一个记录吧，一些自己的理解</p></blockquote><p>服务端开发嘛，所以很重要的是网络编程，epoll作为linux下的高性能网络服务所以了解一下也蛮重要的。比如epoll和select的区别是什么？epoll高效率的原因是什么？</p><h2 id="如何处理网络信息"><a href="#如何处理网络信息" class="headerlink" title="如何处理网络信息"></a>如何处理网络信息</h2><ul><li>一台机器接收到了一条消息后，硬件的传输后，写入到内存。这个写入内存的操作是一个优先级较高的中断程序。当很多很多的消息从客户端传来，怎么处理？</li><li>计算机如何知道网络数据对应哪个(socket)连接？如何同时监控这些数据。</li></ul><p>=.=</p><ul><li>首先第一个：建立多个连接，每个连接一个线程（如果是一个多线程的程序，一个用户一个线程，上下文切换会消耗很多性能，如果单线程下如何处理大量的网络消息呢？）</li><li>第二个：<ul><li><strong>如何识别哪个连接：</strong> ip和端口号在操作系统的socket的索引。</li><li><strong>同时监控呢？</strong> 多路复用是重点</li></ul></li></ul><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><p>先写一个程序来在用户态实现这个功能：</p><pre class=" language-java"><code class="language-java">首先在一个的循环程序下，遍历这个所有的连接，有数据进行处理。<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>fdx in <span class="token function">fd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">~</span><span class="token function">fd</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fd 有数据<span class="token punctuation">)</span><span class="token punctuation">{</span>            处理。。。        <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// todo ----</span></code></pre><p>网络数据不应该在用户态进行监控，所以基于内核的select技术出现了，源码：</p><pre class=" language-c++"><code class="language-c++">int do_select(int n, fd_set_bits *fds, s64 *timeout)    {     struct poll_wqueues table;     poll_table *wait;     int retval, i;     rcu_read_lock();     /*根据已经打开fd的位图检查用户打开的fd, 要求对应fd必须打开, 并且返回最大的fd*/    retval = max_select_fd(n, fds);     rcu_read_unlock();     if (retval < 0)      return retval;     n = retval;     /*将当前进程放入自已的等待队列table, 并将该等待队列加入到该测试表wait*/    poll_initwait(&table);     wait = &table.pt;     if (!*timeout)      wait = NULL;     retval = 0;     for (;;) {/*死循环*/     unsigned long *rinp, *routp, *rexp, *inp, *outp, *exp;      long __timeout;      /*注意:可中断的睡眠状态*/     set_current_state(TASK_INTERRUPTIBLE);      inp = fds->in; outp = fds->out; exp = fds->ex;      rinp = fds->res_in; routp = fds->res_out; rexp = fds->res_ex;      for (i = 0; i < n; ++rinp, ++routp, ++rexp) {/*遍历所有fd*/      unsigned long in, out, ex, all_bits, bit = 1, mask, j;       unsigned long res_in = 0, res_out = 0, res_ex = 0;       const struct file_operations *f_op = NULL;       struct file *file = NULL;       in = *inp++; out = *outp++; ex = *exp++;       all_bits = in | out | ex;       if (all_bits == 0) {        /*       __NFDBITS定义为(8 * sizeof(unsigned long)),即long的位数。       因为一个long代表了__NFDBITS位，所以跳到下一个位图i要增加__NFDBITS       */       i += __NFDBITS;        continue;       }       for (j = 0; j < __NFDBITS; ++j, ++i, bit <<= 1) {        int fput_needed;        if (i >= n)         break;        /*测试每一位*/       if (!(bit & all_bits))         continue;        /*得到file结构指针，并增加引用计数字段f_count*/       file = fget_light(i, &fput_needed);        if (file) {         f_op = file->f_op;         mask = DEFAULT_POLLMASK;         /*对于socket描述符,f_op->poll对应的函数是sock_poll        注意第三个参数是等待队列，在poll成功后会将本进程唤醒执行*/        if (f_op && f_op->poll)          mask = (*f_op->poll)(file, retval ? NULL : wait);         /*释放file结构指针，实际就是减小他的一个引用计数字段f_count*/        fput_light(file, fput_needed);         /*根据poll的结果设置状态,要返回select出来的fd数目，所以retval++。        注意：retval是in out ex三个集合的总和*/        if ((mask & POLLIN_SET) && (in & bit)) {          res_in |= bit;          retval++;         }         if ((mask & POLLOUT_SET) && (out & bit)) {          res_out |= bit;          retval++;         }         if ((mask & POLLEX_SET) && (ex & bit)) {          res_ex |= bit;          retval++;         }        }        /*       注意前面的set_current_state(TASK_INTERRUPTIBLE);       因为已经进入TASK_INTERRUPTIBLE状态,所以cond_resched回调度其他进程来运行，       这里的目的纯粹是为了增加一个抢占点。被抢占后，由等待队列机制唤醒。       在支持抢占式调度的内核中（定义了CONFIG_PREEMPT），cond_resched是空操作       */         cond_resched();       }       /*根据poll的结果写回到输出位图里*/      if (res_in)        *rinp = res_in;       if (res_out)        *routp = res_out;       if (res_ex)        *rexp = res_ex;      }      wait = NULL;      if (retval || !*timeout || signal_pending(current))/*signal_pending前面说过了*/      break;      if(table.error) {       retval = table.error;       break;      }      if (*timeout < 0) {       /*无限等待*/      __timeout = MAX_SCHEDULE_TIMEOUT;      } else if (unlikely(*timeout >= (s64)MAX_SCHEDULE_TIMEOUT - 1)) {       /* 时间超过MAX_SCHEDULE_TIMEOUT,即schedule_timeout允许的最大值，用一个循环来不断减少超时值*/      __timeout = MAX_SCHEDULE_TIMEOUT - 1;       *timeout -= __timeout;      } else {       /*等待一段时间*/      __timeout = *timeout;       *timeout = 0;      }      /*TASK_INTERRUPTIBLE状态下，调用schedule_timeout的进程会在收到信号后重新得到调度的机会，     即schedule_timeout返回,并返回剩余的时钟周期数     */     __timeout = schedule_timeout(__timeout);      if (*timeout >= 0)       *timeout += __timeout;     }     /*设置为运行状态*/    __set_current_state(TASK_RUNNING);     /*清理等待队列*/    poll_freewait(&table);     return retval;    }    </code></pre><p>一个实例：</p><pre class=" language-c++"><code class="language-c++">// 创建连接的描述符 fd[x]// max 表示集合中最大的数字sockfd = socket(AF_INET, SOCK_STREAM, 0);memset(&addr, 0, sizeof(addr));addr.sin_family = AF_INET;addr.sin_port = htons(20OO);addr.sin_addr.s_addr = INADDR_ANY;bind(sockfd，(struct sockaddr *) & addr, sizeof(addr));listen(sockfd，S);for (i = 0; i < 5; i++){    memset(&client，0，sizeof(client));    addrlen = Sizeof(client);    // 创建了五个连接    fds[i] = accept(sockfd，(struct sockaddr *) & client, &addrlen);    if (fdsp[i] > max)        max = fds[i];}// while 来处理网络消息  执行while (1){    // set 是一个bitMap 半段哪些会被监听    /*            bitMap有1024位            如果：1，2，5，6，7（fd中数据）             所以：就是 0 1 1 0 0 1 1 1 0 0。。。。    */    FD_ZERO(&rset);    for (i = 0; i < 5; i++)    {        FD_SET(fds[i], &set);    }    puts("round again");    /*  1. max+1        2. 读文件描述符集合        3. 写文件描述符集合        4. 异常集合        5. 超时时间    */    select(max + l, &rset, NULL, NULL, NULL);    for (i = 0; i < 5; i++)    {            // 要对每一个有数据的描述符(fd)进行处理            if (FD_ISSET(fds[i]，&rset))            {                memset(buffer, 0, MAXBUF);                read(fds[i], buffer, MAXBUF);                puts(buffer);// 处理函数            }    }}</code></pre><ol><li>用户创建 出rset 给内核来监听 判断到数据发送回用户态对应到fd[x]</li><li>select函数如果没有数据会一致阻塞</li><li>rset置位，select执行结束。用户可以根据rset的变化来判断哪个收到了数据，并且处理</li></ol><ul><li>图中列出了缺点</li></ul><p><img src="https://i.loli.net/2021/01/17/HkrL4MjAeB3sSuq.png" alt="select"></p><h2 id="poll-epoll"><a href="#poll-epoll" class="headerlink" title="poll/epoll"></a>poll/epoll</h2><p>用例：</p><pre class=" language-c++"><code class="language-c++">// 结构体的改变/*    fd    events: 在意的事件 （POLLIN， POLLOUT）    revents: 对事件的反馈*/struct pollfd{ int fd;short events;short revents;}// --------------------// 创建连接for(i=0; i<5; i++){    memset(&cltent, 0, sizeof(client));    addrlen = sizeof(client);    pollfds[i].fd=accept(sockfd,struct sockaddr*)&cltent, &addrlen);    pollfds[i].events=POLLIN;}sleep(l);// 执行while(l){    puts("roundagain");    /*         1. poofd:结构体        2. 数量        3. 超时时间    */    poll(pollfds, 5, 50000);    for(i=0; i<5; i++){    if(po11fds[i].revents & POLLIN){        // 置位回去        pollfds[i]].revents = 0；        memset(buffer，0，MAXBUF);        read(pollfds[i].fd, buffer, MAXBUF)；        puts(buffer);    }}</code></pre><ol><li>内核判断有数据   置位revent我们就知道哪个有数据了</li><li>置位方式所以可以重用</li></ol><p><img src="C:%5CUsers%5C25778%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210117175836804.png" alt="image-20210117175836804"></p><h2 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h2><p>将复杂度简化为O(1)</p><p>用例：</p><pre class=" language-c++"><code class="language-c++">struct epolI_event events[5];int epfd = epoll_create(10);......// 创建EPFDfor (i = 0;i < 5; i++){    static struct epoll_event ev;    memset(&cltent, 0, sizeof(client));    addrlen = sizeof(client);    ev.data.fd =accept(sockfd，(struct sockaddr*)&client，&addrlen);    ev.events = EPOLLIN;    // 在结构体添加 fd - events （有五个）    epoll_ctl(epfd, EPOLL_CTL_ADD, ev.data.fd, &ev);}// 执行:while(l){    puts("roundagain");    // 具体函数    nfds = epoll_wait(epfd, events,5, 10000）;    for(i = 0; i < nfds; i++){        memset(buffer,0,MAXBUF);        read(events[i],data,fd,buffer,MAXBUF);        puts(buffer);    }}</code></pre><ol><li>epfd 是一个公用的 所以不用拷贝了</li><li>置位方式：重排序（将有数据的fd放到最前） 所以不需要单独的结构来处理置位</li><li>复杂度降低O(1) 不需要遍历所有的fd  因为返回的 只是接收的数据（nfds） </li></ol><p><img src="C:%5CUsers%5C25778%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210117175854638.png" alt="image-20210117175854638"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="C:%5CUsers%5C25778%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210117175913944.png" alt="image-20210117175913944"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://zhuanlan.zhihu.com/p/63179839" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/63179839</a></p><p><a href="https://www.bilibili.com/video/BV1qJ411w7du?from=search&amp;seid=12266065751194287806" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1qJ411w7du?from=search&amp;seid=12266065751194287806</a></p><h3 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h3><p>epoll 没有深入</p><p>代码实现</p><p>底层</p>]]></content>
      
      
      <categories>
          
          <category> 类别 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学</title>
      <link href="/2020/12/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
      <url>/2020/12/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机科学-随便记"><a href="#计算机科学-随便记" class="headerlink" title="计算机科学(随便记)"></a>计算机科学(随便记)</h1><blockquote><p> 了解点计算机科学以及历史 记录一下</p></blockquote><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><ol><li>计算机最早的机电设备  一般以十进制 齿轮计数 到 晶体管</li><li>后来以 开、关两种状态 出现二进制</li><li>有电流为1(true) 没有电流为0(false) 基本的数字电路嘛(逻辑代数部分)</li><li>布尔代数就是逻辑代数中的<strong>与或非</strong>运算 可以被晶体管很容易实现</li></ol><p><img src="https://i.loli.net/2020/12/29/BqIVYFEwKXALxRr.png" alt="image.png"></p><ol start="5"><li><a href="https://zhidao.baidu.com/question/535926678.html" target="_blank" rel="noopener">真值表</a> 或者 <a href="https://blog.csdn.net/qq_39497488/article/details/81367998" target="_blank" rel="noopener">这里</a> 二进制实现更加支持</li></ol><h2 id="到硬件部分了"><a href="#到硬件部分了" class="headerlink" title="到硬件部分了"></a>到硬件部分了</h2><h3 id="算数逻辑单元ALU"><a href="#算数逻辑单元ALU" class="headerlink" title="算数逻辑单元ALU"></a>算数逻辑单元ALU</h3><p>计算机中所有操作都需要这部分</p><p><img src="https://i.loli.net/2020/12/29/HefU4sAk2JxGqMP.png" alt="image.png"></p><p>加法器就是 2个半加器 组成全加器 多个全加器进行计算 预留进位(可以判断是否溢出)</p><ul><li>电脑会有专门做乘除法的计算单元</li></ul><h3 id="寄存器，锁存器-内存"><a href="#寄存器，锁存器-内存" class="headerlink" title="寄存器，锁存器,内存"></a>寄存器，锁存器,内存</h3><p>锁存器： 锁存器是电平触发的存储单元</p><p><img src="https://i.loli.net/2020/12/29/T7XCbPIszY3OZaD.png" alt="image.png"></p><p>另一种锁存器：</p><p><img src="https://i.loli.net/2020/12/29/xOZqhBUJfvWRbAi.png" alt="image.png"></p><p>这些能存储一位的数据，经他们组合起来 叫寄存器 通常为8、16….位的</p><p>寄存器：用来存放数据的一些小型存储区域，用来暂时存放参与运算的数据和运算结果</p><p><img src="https://i.loli.net/2020/12/29/ar7AxNC1RngjXYF.png" alt="image.png"></p><p>多路复用：矩阵</p><p><img src="https://i.loli.net/2020/12/29/glhBtuJHLODmrwb.png" alt="image.png"></p><p>多个组成内存</p><p><img src="https://i.loli.net/2020/12/29/g53NeW9VioFHpIv.png" alt="image.png"></p><p>再有多个独立内存空间组合成现在使用的内存（RAM）</p><p>从基本的电路到一层一层抽象到内存芯片 其中的内容还是蛮多的 ，这里只是介绍一下， 如果想进一步学习，可以去学习 数电模电、和电路(毕竟这个专业对口了=。=)</p><p><img src="https://i.loli.net/2020/12/29/uc1vMINgkQTPAYs.png" alt="image.png"></p><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><p>内存 算数逻辑单元 都有了</p><p>我们拼一个cpu(中央处理器)出来</p><p><img src="https://i.loli.net/2020/12/29/KUpJEDlvFZirTgM.png" alt="image.png"></p><p>根据指令（匹配到对应的操作码） 执行对应操作 到寄存器</p><p>取指令 - 解码 - 执行 </p><p>alu 计算 时钟信号进行控制cpu频率</p><p>简化的cpu就设计完成了 – 取指令 - 解码 - 执行  时钟 计算</p><p><img src="https://i.loli.net/2020/12/29/32TlJe15jKuQhzV.png" alt="image.png"></p><ul><li>==<strong>集成电路&amp;摩尔定律</strong>==</li></ul><p><a href="https://baike.baidu.com/item/%E6%91%A9%E5%B0%94%E5%AE%9A%E5%BE%8B/350634?fr=aladdin" target="_blank" rel="noopener">摩尔定律</a></p><p>光刻技术：</p><p>硅为原材料</p><p><img src="https://i.loli.net/2020/12/29/AXNVQ2BE6InSswU.png" alt="image.png"></p><h2 id="指令，程序"><a href="#指令，程序" class="headerlink" title="指令，程序"></a>指令，程序</h2><p>CPU之所以强大是因为是可编程的</p><p>所以将二进制指令改为英文指令写入内存</p><p><img src="https://i.loli.net/2020/12/29/LekVIqMFlKiHb9o.png" alt="image.png"></p><p>cpu处理指令长度和一些方式：指令长度， 可变指令长度，立即值(立即数)当然只介绍  -  好奇的话可以去了解<a href="https://blog.csdn.net/qq_36982160/article/details/82950848" target="_blank" rel="noopener">汇编语言基本指令</a></p><h2 id="真正的CPU"><a href="#真正的CPU" class="headerlink" title="真正的CPU"></a>真正的CPU</h2><p>在真正的cpu中相比于上面简单的来说，需要处理的问题要大得多，所以现在cpu会处理的：</p><ol><li>首先超高的时钟 让ram的传输速率跟不上 于是在cpu加上了缓存  一批一批的读取数据</li><li>缓存会有一些处理方式： 缓存命中/ 未命中</li><li>脏位： 数据与缓存不一致， 被修改过</li><li>程序执行会在流水线中执行 – 流水线满了会执行分支预测(90%以上的正确率)</li><li>ALU不让他们闲置</li><li>取址  –  解码  –  执行并行处理</li></ol><p>性能可以通过多核、多个cpu来实现</p><p>中国神威·太湖有40960个cpu，每个256核 现存<strong>最快的</strong>超级计算机</p><p><img src="https://i.loli.net/2020/12/29/TSsKji8UNHPOe6E.png" alt="image.png"></p><h2 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h2><p>从插线 – 卡纸 – 面板编程（很多开关） – 汇编等</p><ul><li>二进制写程序： 纸伪代码，手工转二进</li><li>葛丽丝．霍晋(GraceHopper)-哈佛1号计算机首批程序员，海军军官</li><li>Grace设计了编程语言A-O</li><li>IBM编程语言：FORTRAN</li><li>第一个可移植的：COBOL （真名实姓提到过）</li><li>新语言： c，C++ ， obj-C， python。。。。java</li></ul><p>有了语言 软件或者编译器将器转换为计算机认识的语言</p><p>再有一些数据结构 就是现代编程了 不需要过多考虑 计算机的硬件实现</p><h1 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h1><ul><li><input checked="" disabled="" type="checkbox"> 图片</li><li><input disabled="" type="checkbox"> P9，20，21</li><li><input checked="" disabled="" type="checkbox"> 24，25</li><li><input disabled="" type="checkbox"> </li></ul>]]></content>
      
      
      <categories>
          
          <category> 随记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机科学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/2020/12/22/Python/"/>
      <url>/2020/12/22/Python/</url>
      
        <content type="html"><![CDATA[<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p><img src="C:%5CUsers%5C25778%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201226231711012.png" alt="image-20201226231711012"></p><h2 id="robots-txt协议"><a href="#robots-txt协议" class="headerlink" title="robots.txt协议"></a>robots.txt协议</h2><p><img src="C:%5CUsers%5C25778%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201226230628167.png" alt="image-20201226230628167"></p>]]></content>
      
      
      <categories>
          
          <category> 类别 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏服务器架构</title>
      <link href="/2020/10/08/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%20/"/>
      <url>/2020/10/08/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%20/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码哦=.=</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="0e6399905b007cf521b7eeace931cf4764f42407c92900f627f170945a987eed"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏服务器架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="/2020/10/02/JVM/"/>
      <url>/2020/10/02/JVM/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式</title>
      <link href="/2020/10/02/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
      <url>/2020/10/02/%E5%88%86%E5%B8%83%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h1><h2 id="分布式理论"><a href="#分布式理论" class="headerlink" title="分布式理论"></a>分布式理论</h2><blockquote><p>什么是分布式系统</p><p>建立在网络之上的软件系统</p></blockquote><p>在《分布式系统原理与范型》一书中定义:<strong>分布式系统是若干独立计算机的集合, 这些计算机对于用户来说就像单个相关系统</strong></p><p>分布式系统是由一组通过网络进行通信,  为了完成共同任务而协调工作的计算机节点组成的系统,  分布式系统的出现是为了用廉价的, 普通的机器完成单个计算机无法完成的计算, 存储任务. 其目的是==利用更多的机器, 处理更多的数据==  </p><blockquote><p>分布式的进化过程</p></blockquote><ol><li>刚开始是:  单一应用架构ORM</li><li>垂直应用架构MVC</li><li>分布式服务框架<strong>(RPC, 并发)</strong></li></ol><p><img src="https://i.loli.net/2020/08/24/u8tkBrvRU2ps4Gy.png" alt="image.png"></p><ol start="4"><li>流动计算架构  <strong>提高机器利用率的资源调度和治理中心</strong>(SOA) </li></ol><blockquote><p>分布式的高性能体现</p></blockquote><ol><li><p>并行性(parallelism)</p></li><li><p>容错性 (fault - tolerance)</p><ul><li>可用性: 因为系统是相对隔离的所以尽管出现了一些故障 还是可以运行的</li><li>可恢复性: 其中一个服务器坏了 修好了还能正常一样运行 减少一些不必要的重启</li><li>复制技术: 将数据做多个副本, 就算出现问题也能保证数据不出问题</li></ul></li><li><p>在物理层面实现 ( 不同地方的计算机实现数据交互 )</p></li><li><p>实现了系统的隔离 会相对的安全 : (功能分开 利用网络通信来链接 其中一个服务崩溃 不会影响总体的服务)</p></li><li><p>可扩展性: 两倍的计算机 可以拥有两倍的处理性能(并行处理)或吞吐量 (理想条件)</p></li></ol><h2 id="分布式架构的问题"><a href="#分布式架构的问题" class="headerlink" title="分布式架构的问题"></a>分布式架构的问题</h2><p>虽然分布式大大增加了系统的性能但是需要解决的问题也多了  数据一致性啊  传输速度和方案啊 因为服务器数量增加了 单一服务器出现的小概率问题  也会显现出来</p><blockquote><p>一致性</p></blockquote><ul><li><p>强一致性 (每次修改数据同步所有服务器节点)(高消耗) : 因为数据同步时需要网络传输 如果每次操作都需要将所有服务器都同步 开销很大的 </p><p>如果创建了副本 副本肯定不在同一个地方 这样的化通信时间也是问题</p></li><li><p>若一致性(修改数据不需要同步所有节点. 要有一些策略来保证获得数据时的正确性): 还是比较优秀的</p><p>还有一种处理方式 在获取数据时 : 多获取几个版本的  做到数据一致性</p></li></ul><blockquote><p>非易失性存储(Non-Volatile-Storage) </p></blockquote><p>非易失性存储的数据更新时的代价很高</p><p>非易失性存储的管理技巧: LOG WAL  Redo/Undo  </p><h2 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h2><p>2003年谷歌用来实现分布式计算海量数据的计算的一个技术 当然也是一种思想</p><h3 id="Map和Reduce"><a href="#Map和Reduce" class="headerlink" title="Map和Reduce"></a>Map和Reduce</h3><p>看了知乎的一篇文章解释的很到位</p><p>Map的本质实际上是拆解，比如说有辆红色的小汽车，有一群工人，把它拆成零件了，这就是Map。</p><p><img src="https://pic3.zhimg.com/80/v2-60294db5923f28063681a47e8b4be66e_720w.jpg" alt="img"></p><p>那什么是Reduce呢？Reduce就是组合，我们有很多汽车零件，还有很多其他各种装置零件，把他们一阵拼装，变成变形金刚，这就是Reduce。</p><p><img src="https://pic2.zhimg.com/80/v2-d32f853d005bacd372128679b9fa05ad_720w.jpg" alt="img"></p><ul><li>MapReduce就是把文件输入拆解分类 然后按照你需要的方式传出结果(排序,筛选….)</li></ul><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>大致分为六部: Input, Split, Map, Shuffle, Reduce(归约函数), Finalize</p><blockquote><p> 举个例子 处理文件中相同数据的个数</p></blockquote><p><img src="https://i.loli.net/2020/10/05/yTobZcFjs7IlLm9.png" alt="MapReduce"></p><p>当然 处理结果也可以作为下一步操作的输入文件</p><p>shuffle 传递时会产生流量 实际上这是大量的数据</p><h3 id="真实情况下MapReduce怎么用众多服务器实现呢"><a href="#真实情况下MapReduce怎么用众多服务器实现呢" class="headerlink" title="真实情况下MapReduce怎么用众多服务器实现呢"></a>真实情况下MapReduce怎么用众多服务器实现呢</h3><p>job: 处理业务逻辑的一个整体</p><p>task: 调用执行MapReduce叫一个Task</p><p>Worker: 程序申请时 由Master worker来负责调度 由不同的worker来进行map/Reduce 当然可以是不同的服务器</p><p><img src="https://i.loli.net/2020/10/05/7IgflH1xGoDCSdp.png" alt="MapReduce架构"></p><h1 id="雪花算法-–-分布式中确保唯一id的算法"><a href="#雪花算法-–-分布式中确保唯一id的算法" class="headerlink" title="雪花算法 – 分布式中确保唯一id的算法"></a>雪花算法 – 分布式中确保唯一id的算法</h1><p><img src="https://i.loli.net/2020/10/02/3CITvUSjqGHdsnA.png" alt="image-20200912161729887.png"></p><ol><li>加锁获取id  下面三组数据与运算</li></ol><blockquote><p>private long sequenceMask = -1L ^ (-1L &lt;&lt; sequenceBits); 一个long类型的最大值(12位的1)   4096</p><p>-1L二进制全是一(反码的补码) 左移 sequenceBits(12) 位 得到 <strong>12位的1</strong></p></blockquote><ul><li>时间戳 左移22位 <code>如果序列号加一 与上 sequenceMask (12位的1)为0</code>  那么进入下一毫秒<code>tilNextMillis</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">tilNextMillis</span><span class="token punctuation">(</span><span class="token keyword">long</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>timestamp <span class="token operator">&lt;=</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>            timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> timestamp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>机房号(左移17位)   和 机位id (左移12位) (一共1024个)</li><li>序列号 sequence</li></ul><pre class=" language-java"><code class="language-java"> <span class="token keyword">if</span> <span class="token punctuation">(</span>lastTimestamp <span class="token operator">==</span> timestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sequence <span class="token operator">=</span> <span class="token punctuation">(</span>sequence <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> sequenceMask<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 正好12位的值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sequence <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 证明数值超出了</span>                timestamp <span class="token operator">=</span> <span class="token function">tilNextMillis</span><span class="token punctuation">(</span>lastTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            sequence <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>lastTimestamp <span class="token operator">=</span> timestamp<span class="token punctuation">;</span></code></pre><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://zhuanlan.zhihu.com/p/32172999" target="_blank" rel="noopener">深入浅出MapReduce</a></p><p><a href="https://blog.csdn.net/qq_35078688/article/details/83240661" target="_blank" rel="noopener">mapreduce Java实现</a></p>]]></content>
      
      
      <categories>
          
          <category> 课程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty</title>
      <link href="/2020/10/02/netty/"/>
      <url>/2020/10/02/netty/</url>
      
        <content type="html"><![CDATA[<h1 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h1><p>Netty是一个由JBoss提供的java开源框架, </p><p>Netty是一个异步的,  基于事件驱动的网络应用框架,  用于快速开发高性能, 高可用的网络IO程序.</p><p>Netty主要针对在TCP协议下, 面向client端的高并发应用, 或者Peer-to-Peer场景下的大量数据持续传输应用. </p><p>Netty 主要基于NIO</p><ul><li><h2 id="四种IO"><a href="#四种IO" class="headerlink" title="四种IO"></a>四种IO</h2></li></ul><blockquote><p>netty 是基于 NIO 那先简单介绍一下IO</p></blockquote><h4 id="IO模型"><a href="#IO模型" class="headerlink" title="IO模型"></a>IO模型</h4><ol><li><p>I/O模型: 简单理解就是用什么方式进行数据的发送和接收, 决定了通信的性能</p></li><li><p>三种IO模型:</p></li></ol><h4 id="BIO-同步并阻塞"><a href="#BIO-同步并阻塞" class="headerlink" title="BIO(同步并阻塞)"></a>BIO(同步并阻塞)</h4><p>   一个连接创建一个线程, 客户端有连接请求时服务器端就需要启动一个线程处理, 如果连接不进行操作还会造成<strong>不必要的开销</strong></p><p><img src="https://i.loli.net/2020/08/25/Ttdh36PEOjWy2vC.png" alt="BIO"></p><ul><li>BIO例子</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ServerSocket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Socket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutorService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">serverBIo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        Socket accept <span class="token operator">=</span> null<span class="token punctuation">;</span>        ExecutorService executorService <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ServerSocket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lianjie..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 循环链接</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            accept <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Socket finalAccept <span class="token operator">=</span> accept<span class="token punctuation">;</span>            executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">handler</span><span class="token punctuation">(</span>finalAccept<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">returnMsg</span><span class="token punctuation">(</span>Socket finalAccept<span class="token punctuation">,</span> String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"return"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        OutputStream outputStream <span class="token operator">=</span> finalAccept<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//  outputStream.close();</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handler</span><span class="token punctuation">(</span>Socket accept<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        InputStream stream <span class="token operator">=</span> null<span class="token punctuation">;</span>        String s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            stream <span class="token operator">=</span> accept<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"in"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>                s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":::"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                stream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">returnMsg</span><span class="token punctuation">(</span>accept<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MainDemo server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MainDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            server<span class="token punctuation">.</span><span class="token function">serverBIo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>缺点:</strong> </p><ul><li>需要独立的线程 并发大时 ==需要大量的线程进行处理== 并且 如果没有读写操作 线程会阻塞在Read上 造成资源浪费</li></ul><h4 id="NIO-同步非阻塞"><a href="#NIO-同步非阻塞" class="headerlink" title="NIO(同步非阻塞)"></a>NIO(同步非阻塞)</h4><p>   和BIO相比 实现了一个<strong>多路复用</strong>的功能 服务器可以用一个线程处理多个连接, 多路复用器进行轮询如果有IO请求就处理</p><p>   <img src="https://i.loli.net/2020/08/25/LQHDTZR8NGntb76.png" alt="NIO"></p><blockquote><p> 三大核心: Selector Channel  Buffer</p></blockquote><p>具体方式:</p><p><img src="C:%5CUsers%5C25778%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200825235215229.png" alt="image-20200825235215229"></p><p>NIO的通讯:</p><ul><li>客户端</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetSocketAddress<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ByteBuffer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>SelectionKey<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>Selector<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>SocketChannel<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GroupChatClient</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String HOST <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//服务器地址</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> PORT <span class="token operator">=</span> <span class="token number">6667</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//服务器端口</span>    <span class="token keyword">private</span> Selector selector<span class="token punctuation">;</span>    <span class="token keyword">private</span> SocketChannel socketChannel<span class="token punctuation">;</span>    <span class="token keyword">private</span> String userName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">GroupChatClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//得到选择器</span>        selector <span class="token operator">=</span> Selector<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//连接远程服务器</span>        socketChannel <span class="token operator">=</span> SocketChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> PORT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置非阻塞</span>        socketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//注册选择器并设置为 read</span>        socketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> SelectionKey<span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//得到客户端 IP 地址和端口信息，作为聊天用户名使用</span>        userName <span class="token operator">=</span> socketChannel<span class="token punctuation">.</span><span class="token function">getLocalAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userName <span class="token operator">+</span> <span class="token string">" is ok ~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//向服务器端发送数据</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendInfo</span><span class="token punctuation">(</span>String info<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果控制台输入 exit 就关闭通道，结束聊天</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"exit"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            socketChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>ByteBuffer<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            socketChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            socketChannel <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        info <span class="token operator">=</span> userName <span class="token operator">+</span> <span class="token string">" 说: "</span> <span class="token operator">+</span> info<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//往通道中写数据</span>            socketChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>ByteBuffer<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//从服务器端接收数据</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> readyChannels <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>readyChannels <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//有可用通道</span>                Set selectedKeys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Iterator keyIterator <span class="token operator">=</span> selectedKeys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>keyIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    SelectionKey sk <span class="token operator">=</span> <span class="token punctuation">(</span>SelectionKey<span class="token punctuation">)</span> keyIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>sk<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//得到关联的通道</span>                        SocketChannel sc <span class="token operator">=</span> <span class="token punctuation">(</span>SocketChannel<span class="token punctuation">)</span> sk<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//得到一个缓冲区</span>                        ByteBuffer buff <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//读取数据并存储到缓冲区</span>                        sc<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//把缓冲区数据转换成字符串</span>                        String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buff<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    keyIterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//删除当前 SelectionKey，防止重复处理</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//会检测到没有可用的channel ，可以退出</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有可用channel ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception  <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建一个聊天客户端对象</span>        GroupChatClient chatClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GroupChatClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//单独开一个线程不断的接收服务器端广播的数据</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    chatClient<span class="token punctuation">.</span><span class="token function">readInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//间隔 3 秒</span>                        Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在控制台输入数据并发送到服务器端</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String msg <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            chatClient<span class="token punctuation">.</span><span class="token function">sendInfo</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>服务端</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetSocketAddress<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ByteBuffer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GroupChatServer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Selector selector<span class="token punctuation">;</span>    <span class="token keyword">private</span> ServerSocketChannel listenerChannel<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PORT <span class="token operator">=</span> <span class="token number">6667</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//服务器端口</span>    <span class="token keyword">public</span> <span class="token function">GroupChatServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 得到选择器</span>            selector <span class="token operator">=</span> Selector<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 打开监听通道</span>            listenerChannel <span class="token operator">=</span> ServerSocketChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 绑定端口</span>            listenerChannel<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>PORT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置为非阻塞模式</span>            listenerChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 将选择器绑定到监听通道并监听 accept 事件</span>            listenerChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> SelectionKey<span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token string">"服务器 ok......."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//不停轮询</span>                <span class="token keyword">int</span> count <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取就绪 channel</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Iterator<span class="token operator">&lt;</span>SelectionKey<span class="token operator">></span> iterator <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        SelectionKey key <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 监听到 accept</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            SocketChannel sc <span class="token operator">=</span> listenerChannel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//非阻塞模式</span>                            sc<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//注册到选择器上并监听 read</span>                            sc<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> SelectionKey<span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//System.out.println(sc.getRemoteAddress().toString().substring(1) + "online ...");</span>                            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRemoteSocketAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 上线 ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//将此对应的 channel 设置为 accept,接着准备接受其他客户端请求</span>                            key<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span>SelectionKey<span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">//监听到 read</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token function">readData</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//读取客户端发来的数据</span>                        <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">//一定要把当前 key 删掉，防止重复处理</span>                        iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"waitting ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readData</span><span class="token punctuation">(</span>SelectionKey key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SocketChannel channel <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 得到关联的通道</span>            channel <span class="token operator">=</span> <span class="token punctuation">(</span>SocketChannel<span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置 buffer 缓冲区</span>            ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//从通道中读取数据并存储到缓冲区中</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果读取到了数据</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//把缓冲区数据转换为字符串</span>                String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printInfo</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//将关联的 channel 设置为 read，继续准备接受数据</span>                key<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span>SelectionKey<span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">sendInfoToOtherClients</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//向所有客户端广播数据</span>            <span class="token punctuation">}</span>            buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//当客户端关闭 channel 时，进行异常如理</span>                <span class="token comment" spellcheck="true">//printInfo(channel.getRemoteAddress().toString().substring(1) + "offline...");</span>                <span class="token function">printInfo</span><span class="token punctuation">(</span>channel<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRemoteSocketAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 离线了 ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                key<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//取消注册</span>                channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//关闭通道</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendInfoToOtherClients</span><span class="token punctuation">(</span>SocketChannel except<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务器进行消息转发 ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//转发数据到所有的 SocketChannel 中</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>SelectionKey key <span class="token operator">:</span> selector<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Channel targetchannel <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//排除自身</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>targetchannel <span class="token keyword">instanceof</span> <span class="token class-name">SocketChannel</span> <span class="token operator">&amp;&amp;</span> targetchannel <span class="token operator">!=</span> except<span class="token punctuation">)</span> <span class="token punctuation">{</span>                SocketChannel dest <span class="token operator">=</span> <span class="token punctuation">(</span>SocketChannel<span class="token punctuation">)</span> targetchannel<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//把数据存储到缓冲区中</span>                ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//往通道中写数据</span>                dest<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">printInfo</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//显示消息</span>        SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务器接收到消息 时间: ["</span> <span class="token operator">+</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] -> "</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        GroupChatServer server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GroupChatServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><a href="#">细节的NIO在这</a></li></ul><h4 id="AIO-异步非阻塞-一般用于长稳定的连接"><a href="#AIO-异步非阻塞-一般用于长稳定的连接" class="headerlink" title="AIO(异步非阻塞)一般用于长稳定的连接"></a>AIO(异步非阻塞)一般用于长稳定的连接</h4><h2 id="Reactor模式"><a href="#Reactor模式" class="headerlink" title="Reactor模式"></a>Reactor模式</h2><h3 id="什么是Reactor"><a href="#什么是Reactor" class="headerlink" title="什么是Reactor"></a>什么是Reactor</h3><p>wiki上reactor的解释</p><ul><li><p>The reactor design pattern is an event handling pattern for handling service requests delivered concurrently to a service handler by one or more inputs. The service handler then demultiplexes the incoming requests and dispatches them synchronously to the associated request handlers.</p></li><li><p>说人话就是来处理一个或者多个输入请求的事件处理模式(基于事件驱动). 采用IO复用监听事件</p></li><li><p>服务器端将传入的请求分派到相应的线程进行处理所以也是Dispatcher模式</p></li></ul><blockquote><p> 先看一下传统的模型:</p></blockquote><p><img src="https://i.loli.net/2020/09/10/8nVLgUWyYIswPbD.png" alt="image.png"></p><p><strong>问题分析</strong></p><ol><li><p>当并发数很大，就会创建大量的线程，占用很大系统资源</p></li><li><p>连接创建后，如果当前线程暂时没有数据可读，该线程会阻塞在read 操作，造成线程资源浪费</p></li></ol><blockquote><p> Reactor模型(IO复用)</p></blockquote><p><img src="https://i.loli.net/2020/09/10/yTOxXHjq3LoAdCP.png" alt="image.png"></p><ol><li>Reactor 模式，通过一个或多个输入同时传递给<strong>服务处理器</strong>的模式(基于事件驱动)</li><li>服务器端程序处理传入的多个请求,并将它们同步分派到相应的处理线程， 因此Reactor模式也叫 Dispatcher模式</li><li>Reactor 模式使用IO复用监听事件, 收到事件后，分发给某个线程(进程), 这点就是网络服务器高并发处理关键</li></ol><h3 id="三种reactor实现"><a href="#三种reactor实现" class="headerlink" title="三种reactor实现"></a>三种reactor实现</h3><blockquote><p>单reactor单线程实现方式</p></blockquote><img src="https://i.loli.net/2020/10/18/6McxaiBhpH218Xw.png" alt="单线程" style="zoom:80%;" /><ul><li>select：通过一个阻塞对象监听多路连接请求</li><li>实现流程：</li></ul><p>客户端的请求由Reactor中的select监听请求类型 :</p><ol><li>建立连接（Accept来创建handler对象处理业务）2. 其他请求由handler来处理</li></ol><ul><li>因为是的单线程所以请求多或者业务处理耗时很大时还是会发生<strong>阻塞</strong>情况</li></ul><blockquote><p>单reactor多线程</p></blockquote><p><img src="https://i.loli.net/2020/10/18/5l9JyYQf6Tu2Hoc.png" alt="多线程"></p><ul><li>流程：</li></ul><p>还是由reactor监听分发 但是handler<strong>不做业务处理只作事件的响应</strong> 分发给对应的worker线程池中的worker来处理(可以继续响应消息), worker返回结果由handler发送回客户端</p><ul><li>由于业务在线程池中处理 性能高于单线程 但是多线程的数据处理很麻烦 而且reactor是在单线程情况下 还是会有性能瓶颈的</li></ul><blockquote><p>主从reactor</p></blockquote><p><img src="https://i.loli.net/2020/10/18/fAW4twYm7JOXiHg.png" alt="主从reactor"></p><ul><li>我们可以让 Reactor 在多线程中运行</li><li>reactor的主线程监听到消息由MainReactor分发 并且只是处理连接(Accept)请求</li><li>其他的请求分发到子Reactor(SubReactor), SubReactor处理客户端(除连接)的请求,并且等待worker线程处理结果发回客户端</li><li>主线可以对应多个子线程 每个子线程可以对应多个worker线程</li></ul><p><strong>Scalable</strong> <strong>IO in</strong> <strong>Java</strong> 对 <strong>Multiple</strong> <strong>Reactors</strong> 的原理图解：</p><p><img src="https://i.loli.net/2020/10/18/D6uZxUe9aM2lAH3.png" alt="image.png"></p><p><strong>主从reactor的优点</strong></p><ol><li><p>父线程与子线程的数据交互简单职责明确，父线程只需要接收新连接，子线程完成后续的业务处理。</p></li><li><p>父线程与子线程的数据交互简单，Reactor 主线程只需要把新连接传给子线程，子线程无需返回数据。</p></li></ol><h2 id="Netty模型"><a href="#Netty模型" class="headerlink" title="Netty模型"></a>Netty模型</h2><p>上面说了主从reactor Netty是一个主从多线程模型的支持</p><h3 id="netty模型简单介绍"><a href="#netty模型简单介绍" class="headerlink" title="netty模型简单介绍"></a>netty模型简单介绍</h3><p>和reactor的主从模型很像 在此基础上实现了多个”Reactor”</p><p><img src="https://i.loli.net/2020/10/18/Zxitv1FETIgbhQA.png" alt="netty"></p><p><img src="https://i.loli.net/2020/10/18/oHSMmUwI83rt6lp.png" alt="netty模型"></p><h3 id="netty详细模型"><a href="#netty详细模型" class="headerlink" title="netty详细模型"></a>netty详细模型</h3><p><img src="https://i.loli.net/2021/01/23/xFJ7CIuD2P1defG.png" alt="image.png"></p><h3 id="客户端-服务端实现（Netty的TCP实现）"><a href="#客户端-服务端实现（Netty的TCP实现）" class="headerlink" title="客户端-服务端实现（Netty的TCP实现）"></a>客户端-服务端实现（Netty的TCP实现）</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 服务</span><span class="token comment" spellcheck="true">/** * @author SunJusong * @date 2020年 11月08日 21:24:31 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * step:         *      1. 创建一个线程组：接收客户端连接         *      2. 创建一个线程组：处理网络操作         *      3. 创建服务端启动助手，配置参数         *          1. 设置两个线程组         *          2. 使用NioServerSocketChannel作为服务器端通道的实现         *          3. 设置线程队列中等待的连接个数         *          4. 保持活动连接状态         *          5. 向PipleLine中添加handler         *     4. 绑定端口bind         *     5. 记得关闭连接         */</span>        <span class="token comment" spellcheck="true">// 1</span>        NioEventLoopGroup bossGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        NioEventLoopGroup workGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ServerBootstrap bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>bossGroup<span class="token punctuation">,</span> workGroup<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioServerSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_BACKLOG<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">childOption</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_KEEPALIVE<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel socketChannel<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        socketChannel<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NettyServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ChannelFuture channelFuture <span class="token operator">=</span> bootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">6668</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"server is ready..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channelFuture<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bossGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        workGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ----------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">/** * 自定义handler * * @author SunJusong * @date 2020年 11月22日 18:44:08 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server:"</span> <span class="token operator">+</span> ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteBuf buf <span class="token operator">=</span> <span class="token punctuation">(</span>ByteBuf<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端发来的消息："</span> <span class="token operator">+</span> buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelReadComplete</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务端发送"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">"服务端发：hello client(>^ω^&lt;)喵123123"</span><span class="token punctuation">,</span> CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 客户</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         *  step:         *      1. 创建线程组         *      2. 创建客户端启动助手，以及配置         *          1. 设置线程组         *          2. 设置客户端通道实现类         *          3. 创建通道初始化         *          4. 网Pipeline中加入handler         *      3. 启动客户端         *      4. 关闭         */</span>        EventLoopGroup group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Bootstrap bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel socketChannel<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init kehu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        socketChannel<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NettyClientHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"client is ready"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ChannelFuture sync <span class="token operator">=</span> bootstrap<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6668</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sync<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ----------------------------------------------------------------------------------</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyClientHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelActive</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">channelActive</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">"hello  clientHandler"</span><span class="token punctuation">,</span> CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">channelRead</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteBuf buf <span class="token operator">=</span> <span class="token punctuation">(</span>ByteBuf<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务端接收到的是："</span> <span class="token operator">+</span> buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="任务队列-TaskQueue"><a href="#任务队列-TaskQueue" class="headerlink" title="任务队列 - TaskQueue"></a>任务队列 - TaskQueue</h3><p>当很耗时的任务在PipeLine中可以将这个任务异步到处理队列（TaskQueue）</p><p><strong>使用场景：</strong></p><ol><li>用户程序自定义普通任务</li></ol><pre class=" language-java"><code class="language-java">ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>用户自定义定时任务 - ScheduleTaskQueue</li></ol><pre class=" language-java"><code class="language-java">ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>HOURS<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li><p>非当前Reaactor线程调用Channel的方法</p><p>推送系统：根据客户的标识，找到Channel引用，调用Write类方法向用户推送消息，就会进入到这种场景里面，Write会提交到任务队列中被异步消费。</p></li></ol><blockquote><p> 对上述方案说明</p><ol><li>Netty抽象出两组<strong>线程池</strong>， BossGroup站门负责接收客户端的连接，WorkGroup负责网络的读写。</li><li>NioEventLoop表示一个不断循环执行处理任务的线程，每个NioEventLoop有一个select，用于监听绑定在socket上的网联络通道。</li><li>NioEventLoop采用串行设计。(读取-&gt;解码-&gt;编码-&gt;发送)。</li></ol><ul><li>NioEventLoopGroup下有多个NioEventLoop</li><li>每个NioEventLoop中包含一个Select，一个NioChannel</li><li>每个NioChannel只会绑定在唯一的NioEventLoop上，并且都有自己的一个ChannelPipeline</li></ul></blockquote><h3 id="异步操作"><a href="#异步操作" class="headerlink" title="异步操作"></a>异步操作</h3><ul><li>Listen_result(不需要等待)，Bind，Write，Connect都是异步监听操作。返回一个ChannelFuture用来监听</li><li>调用时不会立即有结果，通过Future-Listener机制，用户可以主动获取。</li><li>Netty的异步模型在future（Future-Listener机制体现）和callback（回调）之上。</li></ul><p>==链式模型==</p><p><img src="https://i.loli.net/2021/01/24/tvCHJ6eaBhD285M.png" alt="image.png"></p><p>==Future-Listener机制==</p><ol><li>当Future对象创建时，处于非完成状态，返回一个ChannelFuture获取操作的状态，注册监听函数来执行完成后的操作。</li><li><ul><li>isDone / isSuccess / getCause / ……操作</li></ul></li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取链接的状态</span>serverBootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>future <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">newDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": 端口["</span><span class="token operator">+</span> port <span class="token operator">+</span> <span class="token string">"]绑定成功!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>           System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"端口["</span><span class="token operator">+</span> port <span class="token operator">+</span> <span class="token string">"]绑定失败!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Http-服务"><a href="#Http-服务" class="headerlink" title="Http 服务"></a>Http 服务</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 服务端</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span>  Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 事件循环组，就是死循环         */</span>        <span class="token comment" spellcheck="true">//仅仅接受连接，转给workerGroup，自己不做处理</span>        EventLoopGroup bossGroup<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//真正处理</span>        EventLoopGroup workerGroup<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//很轻松的启动服务端代码</span>            ServerBootstrap serverBootstrap<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//childHandler子处理器,传入一个初始化器参数TestServerInitializer（这里是自定义）</span>            <span class="token comment" spellcheck="true">//TestServerInitializer在channel被注册时，就会创建调用</span>            serverBootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>bossGroup<span class="token punctuation">,</span>workerGroup<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioServerSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                    <span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TestServerInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//绑定一个端口并且同步，生成一个ChannelFuture对象</span>            ChannelFuture channelFuture<span class="token operator">=</span>serverBootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">6668</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//对关闭的监听</span>            channelFuture<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//循环组优雅关闭</span>            bossGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            workerGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 注册方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestServerInitializer</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这是一个回调的方法，在channel被注册时被调用</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//一个管道，里面有很多ChannelHandler，这些就像拦截器，可以做很多事</span>        ChannelPipeline pipeline<span class="token operator">=</span>ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//增加一个处理器，neety提供的.名字默认会给，但还是自己写一个比较好</span>        <span class="token comment" spellcheck="true">/**         * 注意这些new的对象都是多例的，每次new出来新的对象,因为每个连接的都是不同的用户         */</span>        <span class="token comment" spellcheck="true">//HttpServerCodec完成http编解码，可查源码</span>        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"httpServerCodec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">HttpServerCodec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//增加一个自己定义的处理器hander</span>        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"testHttpServerHandler"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TestHttpServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 继承InboundHandler类，代表处理进入的请求，还有OutboundHandler,处理出去请求 * 其中里面的泛型表示msg的类型，如果指定了HttpObject，表明相互通讯的数据被封装成HttpObject */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestHttpServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleChannelInboundHandler</span><span class="token operator">&lt;</span>HttpObject<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 通过这个可以看到在服务器 每一个客户端对应一个 独立的handler</span>    <span class="token comment" spellcheck="true">//channelRead0读取客户端请求，并返回响应的方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">channelRead0</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> HttpObject msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果不加这个判断使用curl 测试会报错，使用curl测试命令curl "http://localhost:8899"</span>        <span class="token comment" spellcheck="true">//判断这个是不是httprequest请求</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token keyword">instanceof</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            HttpRequest httpRequest<span class="token operator">=</span> <span class="token punctuation">(</span>HttpRequest<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>            URI uri<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span>httpRequest<span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//判断url是否请求了favicon.ico, 可以不对此请求响应</span><span class="token comment" spellcheck="true">//            if ("/favicon.ico".equals(uri.getPath())){</span><span class="token comment" spellcheck="true">//                System.out.println("请求了favicon.ico");</span><span class="token comment" spellcheck="true">//                return;</span><span class="token comment" spellcheck="true">//            }</span>            <span class="token comment" spellcheck="true">/**             * 上面这段代码是验证如果用浏览器访问             * chrome浏览器发起了两次请求，一次是发起的端口，第二次是请求/favicon.ico图标             * 具体可以查看360 浏览器的请求             */</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求方法名:"</span><span class="token operator">+</span>httpRequest<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//ByteBuf,neety中极为重要的概念，代表响应返回的数据</span>            ByteBuf content <span class="token operator">=</span> Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">"Hello! 我是服务器"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>count<span class="token punctuation">)</span><span class="token punctuation">,</span> CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//构造一个http响应,HttpVersion.HTTP_1_1:采用http1.1协议，HttpResponseStatus.OK：状态码200</span>            FullHttpResponse response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultFullHttpResponse</span><span class="token punctuation">(</span>HttpVersion<span class="token punctuation">.</span>HTTP_1_1<span class="token punctuation">,</span>                    HttpResponseStatus<span class="token punctuation">.</span>OK<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>HttpHeaderNames<span class="token punctuation">.</span>CONTENT_TYPE<span class="token punctuation">,</span> <span class="token string">"text/plain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>HttpHeaderNames<span class="token punctuation">.</span>CONTENT_LENGTH<span class="token punctuation">,</span> content<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果只是调用write方法，他仅仅是存在缓冲区里，并不会返回客户端</span>            <span class="token comment" spellcheck="true">//调用writeAndFlush可以</span>            ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 处理顺序如下：     * handlerAdded     * channelRegistered     * channelActive     * 请求方法名:GET（channelRead0）     * （下面的表示的是断开连接后）     * 1.如果是使用curl ：连接会立刻关闭     * 2.如果是浏览器访问，http1.0：它是短连接，会立刻关闭。http1.1，是长连接，连接保持一段时间     * channelInactive     * channelUnregistered     * @param ctx     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelActive</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"channelActive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">channelActive</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRegistered</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"channelRegistered"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">channelRegistered</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlerAdded</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"handlerAdded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handlerAdded</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelInactive</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"channelInactive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">channelInactive</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelUnregistered</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"channelUnregistered"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">channelUnregistered</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>由于HTTP协议的无状态</p><p>所以刷新会重置handler和对应的Pipeline</p><p><img src="https://i.loli.net/2021/01/24/Sc5uvKQETCkshtp.png" alt="image.png"></p><p>不知道为什么谷歌浏览器访问不到 todo</p><h2 id="什么是RPC"><a href="#什么是RPC" class="headerlink" title="什么是RPC"></a>什么是RPC</h2><p>RCP(Remote Procedure Call) 远程调用过程</p><p> 远程调用过程? ()这玩应就跟把Socket翻译成套接字一样 说个锤子)  </p><p>那有远程调用就有本地调用 – 本地就是在自己的服务里进行交互; 那很显然远调就是 自己的服务与别的服务进行交互</p><p><img src="C:%5CUsers%5C25778%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200824230828180.png" alt="通信过程"></p><p><img src="https://i.loli.net/2020/08/24/anKBl9hW1dHz8Ls.png" alt="image.png"></p><h3 id="举个栗子🌰"><a href="#举个栗子🌰" class="headerlink" title="举个栗子🌰"></a>举个栗子🌰</h3><ol><li>普通架构计, 做一个加法计算 主函数调用 计算的add方法</li><li>分布式呢就是把计算的服务单独拿出来了 但是怎么获取到计算服务的方法呢?</li></ol><p>可以在计算服务加一个接口? 但是不能每一次都发起http请求呀</p><p>如何让使用者感受不到远程调用呢?</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Reference</span><span class="token keyword">private</span> 计算 name<span class="token punctuation">;</span></code></pre><p>使用<strong>代理模式</strong>和Spring的<strong>IOC</strong>一起, 注入需要的对象</p><ul><li><strong>核心模块</strong> 通讯 和 序列化</li><li><strong>解决分布式系统中，服务之间的调用问题。</strong></li><li><strong>远程调用时，要能够像本地调用一样方便，让调用者感知不到远程调用的逻辑。</strong></li></ul><h2 id="dubbo"><a href="#dubbo" class="headerlink" title="dubbo"></a>dubbo</h2><p><img src="http://dubbo.apache.org/docs/zh-cn/user/sources/images/dubbo-architecture-roadmap.jpg" alt="dubbo流程"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.jianshu.com/p/2accc2840a1b" target="_blank" rel="noopener">如何给老婆解释什么是RPC</a></p><p><a href="https://www.cnblogs.com/haimishasha/p/10756448.html#autoid-0-0-0" target="_blank" rel="noopener">NIO通信模型案例</a></p><p><strong>Scalable</strong> <strong>IO in</strong> <strong>Java</strong> (一本书)</p>]]></content>
      
      
      <categories>
          
          <category> 课程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式</title>
      <link href="/2020/08/17/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/17/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>观察者模式</title>
      <link href="/2020/08/17/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/17/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><h2 id="观察者例子"><a href="#观察者例子" class="headerlink" title="观察者例子"></a>观察者例子</h2><p>一个气象台 想要<strong>几个显示器</strong> , 数据从<strong>weather对象</strong>中获取 如果 weather 数据更新 显示器要更新对应数据</p><blockquote><p>显示器就是观察者 而气象台的数据weather 就是通知者(<strong>主题对象</strong>)</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author SunJusong * 观察者部分 * @date 2020年 08月27日 23:17:48 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Obs</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span><span class="token punctuation">,</span> DisPlay <span class="token punctuation">{</span>    <span class="token keyword">float</span> temp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 温度</span>    <span class="token keyword">float</span> humidity<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 湿度</span>    <span class="token keyword">float</span> pressur<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 气压</span>    <span class="token keyword">private</span> Subject weather<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 天气对象</span>    <span class="token keyword">public</span> <span class="token function">Obs</span><span class="token punctuation">(</span>Subject sub<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weather <span class="token operator">=</span> sub<span class="token punctuation">;</span>        sub<span class="token punctuation">.</span><span class="token function">RegistObserver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 实现update 方法来显示</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">float</span> temp<span class="token punctuation">,</span> <span class="token keyword">float</span> humidity<span class="token punctuation">,</span> <span class="token keyword">float</span> pressure<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temp <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> humidity<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pressur <span class="token operator">=</span> pressure<span class="token punctuation">;</span>        <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>temp <span class="token operator">+</span> <span class="token string">"=="</span> <span class="token operator">+</span> humidity <span class="token operator">+</span> <span class="token string">"=="</span> <span class="token operator">+</span> pressur<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// -----------------观察者接口-------------------------</span><span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">float</span> temp<span class="token punctuation">,</span> <span class="token keyword">float</span> humidity<span class="token punctuation">,</span> <span class="token keyword">float</span> pressure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// -----------------显示功能接口-----------------------</span><span class="token keyword">interface</span> <span class="token class-name">DisPlay</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ---------------主方法--------------------------</span><span class="token keyword">class</span> <span class="token class-name">MainDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建主体对象</span>        Weather weather <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Weather</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建观察者 当然 也可以是多个不同的类</span>        Obs obs1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obs</span><span class="token punctuation">(</span>weather<span class="token punctuation">)</span><span class="token punctuation">;</span>        Obs obs2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obs</span><span class="token punctuation">(</span>weather<span class="token punctuation">)</span><span class="token punctuation">;</span>        Obs obs3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obs</span><span class="token punctuation">(</span>weather<span class="token punctuation">)</span><span class="token punctuation">;</span>        weather<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        weather<span class="token punctuation">.</span><span class="token function">RemoveObserver</span><span class="token punctuation">(</span>obs2<span class="token punctuation">)</span><span class="token punctuation">;</span>        weather<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author SunJusong * 主体对象部分 * @date 2020年 08月27日 23:14:29 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Weather</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Observer<span class="token operator">></span> observers<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 观察者列表</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> temp<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> humidity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> pressur<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Weather</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">RegistObserver</span><span class="token punctuation">(</span>Observer o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        observers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">RemoveObserver</span><span class="token punctuation">(</span>Observer o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> observers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        observers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Observer observer <span class="token operator">:</span> observers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> humidity<span class="token punctuation">,</span> pressur<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* jdk自带     观察者要继承Observable 观察者实现 Observer     public void change() {         // 封裝了通知和changed方法         setChanged();         notifyObservers();     }     public float getTemp() {         return temp;     }     public float getHumidity() {         return humidity;     }     public float getPressur() {         return pressur;     } */</span>    <span class="token comment" spellcheck="true">// 传入更新的数值</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token keyword">float</span> temp<span class="token punctuation">,</span> <span class="token keyword">float</span> humidity<span class="token punctuation">,</span> <span class="token keyword">float</span> pressure<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temp <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> humidity<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pressur <span class="token operator">=</span> pressure<span class="token punctuation">;</span>        <span class="token function">notifyObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 主体对象接口</span><span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 注册观察者</span>    <span class="token keyword">void</span> <span class="token function">RegistObserver</span><span class="token punctuation">(</span>Observer o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 移除观察者</span>    <span class="token keyword">void</span> <span class="token function">RemoveObserver</span><span class="token punctuation">(</span>Observer o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 更新信息</span>    <span class="token keyword">void</span> <span class="token function">notifyObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://i.loli.net/2020/08/18/GRxYKhX5bvAluLs.png" alt="image.png"></p><h2 id="观察者模式-1"><a href="#观察者模式-1" class="headerlink" title="观察者模式"></a>观察者模式</h2><blockquote><p>定义了一种一对多的依赖关系, 让多个观察者对象同时监听某个<strong>主题对象</strong>. 这个主体对象发生变化时会通知所有的<strong>观察者</strong>, 使得他们自己可以更新自己 </p></blockquote><p><img src="https://i.loli.net/2020/08/18/LPSEpFO87CcHmkB.png" alt="image.png"></p><p>​                                                                                                                                                                                                                                                                                                                                                                                                                  </p><h2 id="观察者监听"><a href="#观察者监听" class="headerlink" title="观察者监听"></a>观察者监听</h2><p>观察者list </p><p>被观察者event</p><p>初始化和成就事件触发检测需要被移除的观察者</p><pre><code>事件监听list(在初始化时监听) -- 当事件触(发送时间event.fire) --  obs类根据条件遍历发送消息到对应的对象 -- 对象接收时间判断.... 是否取消监听...</code></pre><h2 id="java中lambda实现委托"><a href="#java中lambda实现委托" class="headerlink" title="java中lambda实现委托"></a>java中lambda实现委托</h2><h3 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h3><p>委托是一种引用方法类型, 一旦为委托分配了方法,委托与该方法有完全相同的行为. 委托方法使用和其他方法一样.委托可以看做对函数的抽象, 是函数的”类”, 委托的实例代表的一个具体的函数,</p><p>委托能搭载的方法必须有相同的参数列表和返回值 和java8中方法引用的实现方式相同</p><p><strong>代码实现:</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDelegate</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> MyAction<span class="token operator">&lt;</span>Integer<span class="token operator">></span> delegate<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 委托事件</span>    <span class="token comment" spellcheck="true">// --------主方法--------------</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建实例</span>        MyDelegate delegate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 一:</span>        delegate<span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token punctuation">(</span>Integer i<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        delegate<span class="token punctuation">.</span>delegate<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 二:</span>        delegate<span class="token punctuation">.</span>delegate <span class="token operator">=</span> MyDelegate<span class="token operator">:</span><span class="token operator">:</span>action<span class="token punctuation">;</span>        delegate<span class="token punctuation">.</span>delegate<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">action</span><span class="token punctuation">(</span>Integer i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"::"</span> <span class="token operator">+</span> <span class="token string">"--"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ------------------委托类型接口(消费形)------------------</span><span class="token keyword">interface</span> <span class="token class-name">MyAction</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">action</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 可以使用委托实现观察者模式</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GOF-23 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发插件</title>
      <link href="/2020/07/26/%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6/"/>
      <url>/2020/07/26/%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="开发插件"><a href="#开发插件" class="headerlink" title="开发插件"></a>开发插件</h1><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><h3 id="1-Maven是啥"><a href="#1-Maven是啥" class="headerlink" title="1.Maven是啥"></a>1.Maven是啥</h3><p>当我第一次听到这玩应,觉得很高大上. 说白了 就是个<strong>自动导入jar包的</strong></p><ul><li><p>Maven还是很强大的:</p><ul><li>项目继承(在多个模块的项目中很好用的)</li><li>解决jar冲突</li><li>自动导入jar(从本地库寻找如果没有–会自动去中央仓库下载)<ul><li><a href="https://mvnrepository.com/" target="_blank" rel="noopener">依赖配置地址</a></li></ul></li></ul></li><li><p>生命周期</p><p><img src="https://www.runoob.com/wp-content/uploads/2018/09/7642256-c967b2c1faeba9ce.png" alt="Maven生命周期"></p></li></ul><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><p><a href="https://blog.csdn.net/daffordil/article/details/89419252" target="_blank" rel="noopener">安装看这个</a> 把镜像和本地库地址配置了就好</p><h3 id="3-自动配置"><a href="#3-自动配置" class="headerlink" title="3. 自动配置"></a>3. 自动配置</h3><ul><li>常用的三中模式</li></ul><pre class=" language-java"><code class="language-java"><span class="token number">1</span>、cocoon<span class="token operator">-</span><span class="token number">22</span><span class="token operator">-</span>archetype<span class="token operator">-</span>webapp   <span class="token operator">--</span> <span class="token number">2</span>、maven<span class="token operator">-</span>archetype<span class="token operator">-</span>quickstart   <span class="token operator">--</span> <span class="token number">7</span><span class="token number">3</span>、maven<span class="token operator">-</span>archetype<span class="token operator">-</span>webapp       <span class="token operator">--</span> <span class="token number">10</span></code></pre><blockquote><p><a href="https://blog.csdn.net/sirdean/article/details/81636658" target="_blank" rel="noopener">其他的可以看这里</a></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token string">'groupId'</span><span class="token operator">:</span> 公司名<span class="token string">'artifactId'</span><span class="token operator">:</span> 项目名字<span class="token string">'version'</span><span class="token operator">:</span> 版本 <span class="token punctuation">(</span>默认是 <span class="token number">1.0</span><span class="token operator">-</span>SNAPSHOT<span class="token punctuation">)</span><span class="token string">'package'</span><span class="token operator">:</span> com<span class="token punctuation">.</span>sjs<span class="token operator">:</span>包名</code></pre><p>Maven通过’groupId’, ‘artifactId’, ‘version’来定位 项目/类库 坐标</p><h3 id="4-cmd配置-命令自动生成"><a href="#4-cmd配置-命令自动生成" class="headerlink" title="4. cmd配置(命令自动生成)"></a>4. cmd配置(命令自动生成)</h3><p>创建:</p><pre class=" language-java"><code class="language-java">mvn archetype<span class="token operator">:</span>generate指令直接创建项目    mvn archetype<span class="token operator">:</span>generate <span class="token operator">-</span>DgroupId<span class="token operator">=</span>公司名 <span class="token operator">-</span>DartifactId<span class="token operator">=</span>工程名 <span class="token operator">-</span>Dviersion<span class="token operator">=</span><span class="token number">1.0</span><span class="token operator">-</span>SNAPSHOT <span class="token operator">-</span>Dpackage<span class="token operator">=</span>包名</code></pre><p>常用命令</p><pre class=" language-java"><code class="language-java">maven <span class="token operator">-</span>vmvn test<span class="token operator">:</span> 测试 <span class="token punctuation">(</span>会有测试报告日止<span class="token punctuation">)</span>mvn clean<span class="token operator">:</span> cleanmvn <span class="token keyword">package</span><span class="token operator">:</span> 将当前这个项目打包成jar，或者是war，pommvn install<span class="token operator">:</span> 首先将pom<span class="token punctuation">.</span>xml中需要的jar包安装到本地仓库上，并且，将自己打包然后安装到本地仓库上。mvn compile<span class="token operator">:</span> 编译源代码</code></pre><ul><li><strong>scope(定义依赖的范围)的6中属性值：</strong></li></ul><pre class=" language-java"><code class="language-java">compile：默认的范围，编译测试运行都有效provided：编译和测试有效runtime：测试和运行时有效test：只在测试时有效system：在编译和测试时有效，移植性低，与本机系统相关联<span class="token keyword">import</span>：导入范围，她只使用在dependencyManagement中，表示从其他的pom中导入dependency的配置</code></pre>]]></content>
      
      
      <categories>
          
          <category> TOOL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql</title>
      <link href="/2020/07/07/Mysql/"/>
      <url>/2020/07/07/Mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><h2 id="Mysql介绍"><a href="#Mysql介绍" class="headerlink" title="Mysql介绍"></a>Mysql介绍</h2><ul><li>java企业级开发离不开数据库</li><li><strong>数据是所有软件体系中核心存在</strong>   (DBA职位)</li></ul><blockquote><p>只会写代码,学好数据库,混饭吃</p><p>操作系统,数据结构 ! 不错的程序猿</p><p>离散数学,数字电路, 体系结构, 编译原理 + 经验 大佬</p></blockquote><h3 id="1-数据库-DB-DataBase"><a href="#1-数据库-DB-DataBase" class="headerlink" title="1. 数据库(DB, DataBase)"></a>1. 数据库(DB, DataBase)</h3><p>数据的仓库</p><p>SQL: 可以存储大量数据 500万以下都没问题</p><h4 id="数据库分类-SQL-NOSQL"><a href="#数据库分类-SQL-NOSQL" class="headerlink" title="数据库分类(SQL/NOSQL)"></a>数据库分类(SQL/NOSQL)</h4><ul><li>关系型数据库(SQL)<ul><li>Mysql,  Oracle,  Sql Server,  DB2, SQLlite</li><li>通过表和表之间, 行和列之间的关系进行数据存储.  </li></ul></li><li>菲关系型数据库(NOSQL) <ul><li>Redis,  MongDB</li><li>存储对象,通过对象的自身属性.  而且使用key-value的关系存储的</li></ul></li></ul><p>==DBSM(数据库管理系统)==</p><ul><li>数据库的管理软件, 管理和维护我们的数据</li><li>MySql 就是DBMS</li></ul><h3 id="Mysql操作语句"><a href="#Mysql操作语句" class="headerlink" title="Mysql操作语句"></a>Mysql操作语句</h3><table><thead><tr><th>操作语句</th><th>作用</th></tr></thead><tbody><tr><td>mysqld - install</td><td>安装数据库(在bin目录下)</td></tr><tr><td>mysqld –initialize-insecure –user=mysql</td><td>初始化数据文件</td></tr><tr><td>flush privileges;</td><td>刷新权限</td></tr><tr><td>net start mysql</td><td>启动Mysql服务</td></tr><tr><td>net stop mysql</td><td>结束Mysql服务</td></tr><tr><td>exit</td><td>退出Mysql</td></tr></tbody></table><h3 id="InnoDB和MyISAM"><a href="#InnoDB和MyISAM" class="headerlink" title="InnoDB和MyISAM"></a>InnoDB和MyISAM</h3><ul><li>现在都是默认使用InnoDB</li><li>MySAM 比较老,以前用</li></ul><blockquote><p>区别:</p></blockquote><table><thead><tr><th></th><th>MySAM</th><th>INNODB</th></tr></thead><tbody><tr><td>1. 事务</td><td>不支持</td><td><strong>支持</strong>(ACID)</td></tr><tr><td>2. 数据锁定方式</td><td>表锁定</td><td><strong>行锁定,表锁定</strong></td></tr><tr><td>3. 外键约束</td><td>不支持</td><td><strong>支持</strong></td></tr><tr><td>4. 全文索引</td><td><strong>支持</strong></td><td>不支持</td></tr><tr><td>5, 表空间大小</td><td>小</td><td>大,约为MySAM的两倍</td></tr><tr><td>6. 索引</td><td>b+树</td><td>b+树</td></tr></tbody></table><blockquote><p>在物理空间:</p></blockquote><p>所有数据库都是以文件形式存储在data目录下,一组文件对应一个数据库,本质还是文件存储</p><p>Mysql引擎</p><ul><li>INNODB在数据库上只有一个*.frm, 以及上级目录的ibdata1文件</li><li>MySAM<ul><li>*.frm 表结构</li><li>*.myd  数据文件(data)</li><li>*.MYI  索引文件(index)</li></ul></li></ul><h2 id="数据库操作语句"><a href="#数据库操作语句" class="headerlink" title="数据库操作语句"></a>数据库操作语句</h2><blockquote><p>书写顺序</p><p>select – from  – where  – group by  – order by</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查看有什么数据库</span><span class="token keyword">show</span> <span class="token keyword">database</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 创建库</span>creat <span class="token keyword">database</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 使用库</span><span class="token keyword">user</span> 库名<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 展示表</span><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 显示结构</span><span class="token keyword">describe</span> 表名<span class="token punctuation">;</span><span class="token keyword">desc</span> 表名<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 创建表</span><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>列名 类型<span class="token punctuation">(</span>长度<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 更新</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span>  <span class="token keyword">column</span>  列名 类型<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span>  列名 类型<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--------------------------------------------------</span><span class="token comment" spellcheck="true">--查看数据库建库语句</span><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">database</span> 库<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查看表的定义语句</span><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> 表<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 展示表结构</span><span class="token keyword">desc</span> 表<span class="token punctuation">;</span></code></pre><h2 id="数据库聚合函数"><a href="#数据库聚合函数" class="headerlink" title="数据库聚合函数"></a>数据库聚合函数</h2><blockquote><p>聚合函数: 他们只运行非空值,如果有空值将不会计算在内</p><p>而且默认重复值会被取到</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 基本计算</span><span class="token function">MAX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">MIN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">AVG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">count</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span> 一共多少行如果是<span class="token operator">*</span> 那就是总数<span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> 参数<span class="token punctuation">)</span>  除去重复<span class="token comment" spellcheck="true">-- 去重</span><span class="token keyword">DISTINCT</span> 名字<span class="token comment" spellcheck="true">--日期</span>    <span class="token comment" spellcheck="true">-- 格式化日期</span>    <span class="token keyword">data</span> _format<span class="token punctuation">(</span>获取的日期<span class="token punctuation">,</span><span class="token string">'%Y%m%d'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">-- 当前时间</span>    CURDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 正则表达式 </span><span class="token operator">regexp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">-- 模糊查询不用%</span>    <span class="token comment" spellcheck="true">-- ^a 表示以a开始</span>    <span class="token comment" spellcheck="true">-- a$ 以a结尾</span>    <span class="token comment" spellcheck="true">-- |  逻辑与</span>    <span class="token comment" spellcheck="true">-- [abc] 包括其中任一个</span>    <span class="token comment" spellcheck="true">-- [a-b] - 表示a到b的任一个</span>LAST_INSERT_ID<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">-- 最后一个INSERT或 UPDATE 自增长(AUTO_INCREMENT)列的ID</span><span class="token comment" spellcheck="true">-- 分组</span><span class="token keyword">group</span> <span class="token keyword">by</span> 列<span class="token number">1</span><span class="token punctuation">,</span>列<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">-- 在聚合函数(分组)后使用 的条件筛选</span><span class="token keyword">having</span>条件 <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">and</span> 条件<span class="token number">2</span><span class="token comment" spellcheck="true">-- WITH ROLLUP运算</span>用来统计当前列的总和， 统计的是聚合函数的列  计算的结果是聚合函数的方式 sum是和， AVG是平均数<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> 列<span class="token number">1</span><span class="token punctuation">,</span>列<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">WITH ROLLUP</span> </code></pre><table><thead><tr><th>having</th><th>where</th></tr></thead><tbody><tr><td>只能判断select过的列名</td><td>能判断所有列名</td></tr><tr><td>其他差不多</td><td></td></tr></tbody></table><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 家早va的并且 订单总额大于100</span><span class="token keyword">SELECT</span>    <span class="token number">c</span><span class="token punctuation">.</span>customer_id<span class="token punctuation">,</span>    <span class="token number">c</span><span class="token punctuation">.</span>first_name<span class="token punctuation">,</span>    <span class="token number">c</span><span class="token punctuation">.</span>last_name<span class="token punctuation">,</span>    <span class="token function">SUM</span><span class="token punctuation">(</span> oi<span class="token punctuation">.</span>quantity <span class="token operator">*</span> oi<span class="token punctuation">.</span>unit_price <span class="token punctuation">)</span> <span class="token keyword">AS</span> spend <span class="token keyword">FROM</span>    orders o    <span class="token keyword">JOIN</span> customers <span class="token number">c</span> <span class="token keyword">USING</span> <span class="token punctuation">(</span> customer_id <span class="token punctuation">)</span>    <span class="token keyword">JOIN</span> order_items oi <span class="token keyword">USING</span> <span class="token punctuation">(</span> order_id <span class="token punctuation">)</span> <span class="token keyword">WHERE</span>    <span class="token number">c</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'VA'</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>    <span class="token number">c</span><span class="token punctuation">.</span>customer_id<span class="token punctuation">,</span>    <span class="token number">c</span><span class="token punctuation">.</span>first_name<span class="token punctuation">,</span>    <span class="token number">c</span><span class="token punctuation">.</span>last_name<span class="token keyword">HAVING</span>    spend <span class="token operator">></span> <span class="token number">90</span></code></pre><h2 id="CURD"><a href="#CURD" class="headerlink" title="CURD"></a>CURD</h2><p>增删改查</p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h4 id="查询-排序"><a href="#查询-排序" class="headerlink" title="查询/排序"></a>查询/排序</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 自动那个提交状态</span><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'autocommit'</span><span class="token comment" spellcheck="true">-- 条件查询</span><span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">and</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">or</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- 是否存在 可以代替and操作</span>    <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">--  是否存在</span>    exist <span class="token punctuation">(</span>返回的是 <span class="token boolean">true</span><span class="token operator">/</span><span class="token boolean">false</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">-- 在...之间</span>    <span class="token keyword">WHERE</span> <span class="token operator">between</span> <span class="token number">10</span> <span class="token operator">and</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- 空, 非空</span>    <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token operator">/</span> <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span>  <span class="token comment" spellcheck="true">-- 模糊查询 like %表示任意数量字符 _表示单个任意字符 可以有多个_</span><span class="token keyword">where</span> 列 <span class="token operator">like</span> <span class="token string">'%val%'</span><span class="token operator">LIKE</span> <span class="token string">'___啊'</span><span class="token comment" spellcheck="true">-- 排序</span><span class="token keyword">order</span> <span class="token keyword">by</span> 列  <span class="token keyword">desc</span> 降序 <span class="token keyword">asc</span> 升序<span class="token comment" spellcheck="true">-- 截取</span><span class="token keyword">limit</span> x 表示从头截取x个<span class="token keyword">limit</span> y<span class="token punctuation">,</span>x 表示从y开始截取x个 <span class="token punctuation">(</span>分页会用<span class="token punctuation">)</span></code></pre><h4 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询:"></a>内连接查询:</h4><blockquote><p>复合主键: 表中主键数量超过一列</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- inner可以省略</span><span class="token keyword">inner</span> <span class="token keyword">join</span> 表<span class="token number">1</span> <span class="token keyword">on</span> 条件<span class="token comment" spellcheck="true">-- 跨数据库链接</span><span class="token keyword">join</span> <span class="token number">a</span>库<span class="token punctuation">.</span><span class="token number">a</span>表<span class="token comment" spellcheck="true">-- 多表查询</span><span class="token keyword">from</span> 表<span class="token number">1</span> <span class="token keyword">join</span> 表<span class="token number">2</span> <span class="token keyword">on</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">join</span> 表<span class="token number">3</span> <span class="token keyword">on</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">-- 复合链接: 知识点:复合主键 就是多了一个判断条件</span><span class="token keyword">join</span> 表 <span class="token keyword">on</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">and</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">-- 隐式链接 </span>把 <span class="token keyword">join</span> <span class="token keyword">on</span> 用 <span class="token keyword">where</span> 代替 尽量不使用<span class="token keyword">where</span></code></pre><h4 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询:"></a>外连接查询:</h4><blockquote><p>内连接如果不满足 on 的条件不会返回 </p><p>外连接会以 left/right 为主表 不满足也会返回</p><p>outer join (outer可以省略)</p><ul><li>两种:<ul><li>左连接: left join  (一般情况使用左连接)</li><li>右链接: right join</li></ul></li></ul></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 多表连接</span>例子:<span class="token keyword">SELECT</span>    o<span class="token punctuation">.</span>order_date<span class="token punctuation">,</span>    o<span class="token punctuation">.</span>order_id<span class="token punctuation">,</span>    <span class="token number">c</span><span class="token punctuation">.</span>first_name <span class="token keyword">AS</span> customer<span class="token punctuation">,</span>    s<span class="token punctuation">.</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">AS</span> shipper<span class="token punctuation">,</span>    os<span class="token punctuation">.</span>NAME <span class="token keyword">AS</span> <span class="token string">'status'</span> <span class="token keyword">FROM</span>    orders o    <span class="token keyword">JOIN</span> customers <span class="token number">c</span> <span class="token keyword">ON</span> o<span class="token punctuation">.</span>customer_id <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>customer_id    <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> shippers s <span class="token keyword">ON</span> s<span class="token punctuation">.</span>shipper_id <span class="token operator">=</span> o<span class="token punctuation">.</span>shipper_id    <span class="token keyword">JOIN</span> order_statuses os <span class="token keyword">ON</span> os<span class="token punctuation">.</span>order_status_id <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token comment" spellcheck="true">-- using(列1,列2...)</span><span class="token keyword">using</span><span class="token punctuation">(</span>列<span class="token number">1</span><span class="token punctuation">,</span>列<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>可以替换掉 <span class="token keyword">on</span> 但是要求要查询的两个表的的列明相等 当然也可以给多个参数用<span class="token punctuation">,</span> 隔开</code></pre><h4 id="其他链接查询"><a href="#其他链接查询" class="headerlink" title="其他链接查询"></a>其他链接查询</h4><ul><li>自然连接 natural join:<br> 数据库引擎自动匹配 不建议使用</li><li>交叉连接:</li></ul><blockquote><p>将两个表的数据交叉组合(三种饮料和三种杯子尺寸 交叉连接出所有状态)</p></blockquote><pre class=" language-sql"><code class="language-sql">表<span class="token number">1</span> <span class="token keyword">CROSS</span> <span class="token keyword">JOIN</span> 表<span class="token number">2</span> <span class="token punctuation">(</span>建议使用<span class="token punctuation">)</span><span class="token keyword">from</span> 表<span class="token number">1</span><span class="token punctuation">,</span> 表<span class="token number">2</span>  </code></pre><ul><li>联合查询(UNION)</li></ul><blockquote><p>将多个查询结构集,合成一个 列数要相同, 列明取第一个查询语句</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h4 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 子查询（嵌套查询)</span>一个查询语句的结果是另一个的条件<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表 <span class="token keyword">where</span> <span class="token number">a</span> <span class="token operator">=</span> （ <span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>） </code></pre><h4 id="相关子查询"><a href="#相关子查询" class="headerlink" title="相关子查询"></a>相关子查询</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 在嵌套查询中有用到嵌套外的数据 (缺点: 慢,内存消耗高)</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表 <span class="token number">a</span> <span class="token keyword">where</span> val <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">select</span> val <span class="token keyword">from</span> 表 <span class="token number">b</span> <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span>  </code></pre><h5 id="子查询在-select-和-from中使用"><a href="#子查询在-select-和-from中使用" class="headerlink" title="子查询在 select 和 from中使用"></a>子查询在 select 和 from中使用</h5><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 计算和和平均值做差  在select中</span><span class="token keyword">SELECT</span>    <span class="token number">c</span><span class="token punctuation">.</span>client_id<span class="token punctuation">,</span>    <span class="token punctuation">(</span> <span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span> invoice_total <span class="token punctuation">)</span> <span class="token keyword">FROM</span> invoices <span class="token keyword">WHERE</span> <span class="token number">c</span><span class="token punctuation">.</span>client_id <span class="token operator">=</span> client_id  <span class="token punctuation">)</span> <span class="token keyword">AS</span> sum1_total<span class="token punctuation">,</span>    <span class="token punctuation">(</span> <span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span> invoice_total <span class="token punctuation">)</span> <span class="token keyword">FROM</span> invoices <span class="token punctuation">)</span> <span class="token keyword">AS</span> avg_total<span class="token punctuation">,</span>    <span class="token punctuation">(</span> <span class="token keyword">SELECT</span> sum1_total <span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span> <span class="token keyword">SELECT</span> avg_total <span class="token punctuation">)</span> <span class="token keyword">FROM</span>    <span class="token punctuation">`</span>invoices<span class="token punctuation">`</span> i<span class="token punctuation">,</span>    clients <span class="token number">c</span>     <span class="token keyword">WHERE</span> 条件</code></pre><h3 id="插入-复制"><a href="#插入-复制" class="headerlink" title="插入/复制"></a>插入/复制</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 增加数据</span><span class="token comment" spellcheck="true">-- defaut 表示默认</span><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名 <span class="token keyword">value</span><span class="token punctuation">(</span> defaut <span class="token punctuation">,</span>字段值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span>值<span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名<span class="token punctuation">(</span>字段名<span class="token number">1</span><span class="token punctuation">,</span>名<span class="token number">2</span>名<span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">value</span><span class="token punctuation">(</span>字段值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span>值<span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 多行插入</span><span class="token keyword">insert</span> <span class="token keyword">into</span> 表<span class="token punctuation">(</span>字段<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span>值<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>值<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 插入多个数据<span class="token comment" spellcheck="true">-- 多表 插入</span>LAST_INSERT_ID<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">-- 最近插入ID</span><span class="token comment" spellcheck="true">-- 复制表</span><span class="token keyword">create</span> <span class="token keyword">table</span> 表 <span class="token keyword">select</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">-- 创建一个你查询出来的表</span><span class="token keyword">insert</span> <span class="token keyword">into</span> 表 <span class="token keyword">select</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment" spellcheck="true">-- 插入一个你查询的表</span></code></pre><h3 id="更新-删除"><a href="#更新-删除" class="headerlink" title="更新/删除"></a>更新/删除</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 更新</span><span class="token keyword">update</span> 表名 <span class="token keyword">set</span> 字段<span class="token number">1</span> <span class="token operator">=</span> 值<span class="token number">1</span><span class="token punctuation">,</span> 字段<span class="token number">2</span> <span class="token operator">=</span> 值<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">where</span> 字段位置 <span class="token operator">=</span> 值<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 多行更新</span><span class="token keyword">UPDATE</span> 表名 <span class="token keyword">SET</span> 字段<span class="token number">1</span> <span class="token operator">=</span> 值<span class="token number">1</span><span class="token operator">+</span><span class="token number">50</span><span class="token punctuation">,</span>字段<span class="token number">2</span> <span class="token operator">=</span> 值<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">WHERE</span> 条件 <span class="token comment" spellcheck="true">-- 条件可以选定多行数据</span><span class="token comment" spellcheck="true">-- 在update中使用 select</span>嵌套查询结果集<span class="token keyword">UPDATE</span> 表名 <span class="token keyword">SET</span> 字段<span class="token number">1</span> <span class="token operator">=</span> 值<span class="token number">1</span> <span class="token keyword">WHERE</span> 列<span class="token number">1</span><span class="token operator">=</span><span class="token punctuation">(</span> <span class="token keyword">select</span> 语句<span class="token punctuation">)</span><span class="token comment" spellcheck="true">--------------删除--------------</span><span class="token keyword">delete</span> <span class="token operator">/</span> <span class="token keyword">truncate</span> <span class="token keyword">table</span> 表名<span class="token punctuation">;</span>  删除全表<span class="token keyword">delete</span> <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> 字段名 <span class="token operator">=</span> 字段值<span class="token punctuation">;</span>当然可以嵌套<span class="token keyword">select</span>语句:<span class="token keyword">delete</span> 表名 <span class="token keyword">WHERE</span> 列<span class="token number">1</span><span class="token operator">=</span><span class="token punctuation">(</span> <span class="token keyword">select</span> 语句<span class="token punctuation">)</span></code></pre><h2 id="一些函数、关键字"><a href="#一些函数、关键字" class="headerlink" title="一些函数、关键字"></a>一些函数、关键字</h2><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 判断空</span>IFNULL<span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">)</span> 如果第一个<span class="token number">a</span>是空那么返回<span class="token number">b</span></code></pre><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- in/not in</span><span class="token operator">in</span> <span class="token operator">/</span> <span class="token operator">not</span> <span class="token operator">in</span>当子查询是一个集合 就用 <span class="token operator">in</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表 <span class="token keyword">where</span> <span class="token number">a</span> <span class="token operator">in</span> （ <span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>） <span class="token comment" spellcheck="true">-- ALL 查询</span><span class="token comment" spellcheck="true">-- 表示括号里的全部  (> ALl) 大于全部</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表 <span class="token keyword">where</span> 字段 <span class="token operator">></span> <span class="token keyword">ALL</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- = ANY / SOME  (= ANY  和  IN 等效)</span><span class="token comment" spellcheck="true">-- 返回一个集合中所有条件的</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表 <span class="token keyword">where</span> 字段 <span class="token operator">=</span> <span class="token keyword">ANY</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- explain + 语句</span>查看性能 sql优化</code></pre><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><blockquote><p>视图数据是同步的(数据同步的)</p><p>创建视图时 <strong>不使用</strong> Distinct / union 以及 sum / group by … 聚合函数 的view 就是可更新表 </p><p>视图可以减小数据库设计改动的影响 简化查询操作</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建视图</span><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> clients_balance <span class="token keyword">AS</span> <span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 把查询的东西存进去<span class="token keyword">create</span> <span class="token operator">or</span> replace  或者用这个语句 <span class="token comment" spellcheck="true">-- 删除视图</span><span class="token keyword">drop</span> <span class="token keyword">view</span> name<span class="token comment" spellcheck="true">-- 修改视图 防止数据被删掉</span>在创建视图后加上<span class="token keyword">with</span> <span class="token keyword">check</span> <span class="token keyword">option</span></code></pre><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建函数(存储过程) </span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> get_invoices_and_balance<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">-- 参数 相当于函数的参数</span><span class="token keyword">BEGIN</span><span class="token keyword">SELECT</span>    <span class="token operator">*</span> <span class="token keyword">FROM</span>    invoices <span class="token keyword">WHERE</span>    <span class="token punctuation">(</span> invoice_total <span class="token operator">-</span> payment_total <span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token comment" spellcheck="true">-- 定义结束符号</span><span class="token keyword">DELIMITER</span> $$ <span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 添加参数 当然查询时也要加参数</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> name <span class="token punctuation">(</span> valName1 TYPE1<span class="token punctuation">,</span>valName2 TYPE2 <span class="token punctuation">)</span> <span class="token keyword">BEGIN</span> <span class="token comment" spellcheck="true">-- 如果要判断条件</span><span class="token keyword">IF</span> valName1 <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token operator">and</span> valName2 <span class="token operator">is</span> <span class="token boolean">NULL</span> <span class="token keyword">THEN</span><span class="token keyword">ELSE</span><span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 执行过程</span><span class="token keyword">CALL</span> get_invoices_and_balance<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 删除过程 If exists 判断是否存在 可以不加</span><span class="token keyword">drop</span> <span class="token keyword">procedure</span> <span class="token keyword">If</span> <span class="token keyword">exists</span> name<span class="token punctuation">;</span></code></pre><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>sql 可以存的格式</p><ul><li>String</li><li>Number</li><li>Data and Time</li><li>Blob</li><li>Spatial</li></ul><h3 id="1-常见的String"><a href="#1-常见的String" class="headerlink" title="1. 常见的String"></a>1. 常见的String</h3><table><thead><tr><th></th><th>Name</th><th>MAX</th></tr></thead><tbody><tr><td>1</td><td>char()</td><td>固定长度</td></tr><tr><td>2</td><td>varChar()</td><td>65000   Characters(~64kb)</td></tr><tr><td>3</td><td>mediumText</td><td>16MB</td></tr><tr><td>4</td><td>longT`ext</td><td>4GB</td></tr><tr><td>5</td><td>TinyText</td><td>255 bytes</td></tr><tr><td>6</td><td>Text</td><td>64kb</td></tr></tbody></table><h3 id="2-整数类型"><a href="#2-整数类型" class="headerlink" title="2. 整数类型"></a>2. 整数类型</h3><table><thead><tr><th></th><th>Data type</th><th>Bytes</th></tr></thead><tbody><tr><td>1</td><td>TINYINT</td><td>1</td></tr><tr><td>2</td><td>SMALLINT</td><td>2</td></tr><tr><td>3</td><td>MEDIUMINT</td><td>3</td></tr><tr><td>4</td><td>INTEGER</td><td>4</td></tr><tr><td>5</td><td>BIGINT</td><td>8</td></tr></tbody></table><h3 id="3-浮点数"><a href="#3-浮点数" class="headerlink" title="3. 浮点数"></a>3. 浮点数</h3><table><thead><tr><th></th><th>Data type</th><th>explain</th></tr></thead><tbody><tr><td>1</td><td>Decimal(P, S)</td><td>p: 位数 s: 小数 位 (比较精准)</td></tr><tr><td>2</td><td>Dec/Numeric/Fixed</td><td>和上面名字不同</td></tr><tr><td>3</td><td>Float / Double</td><td>科学计数 不是特别精准</td></tr></tbody></table><h3 id="4-时间"><a href="#4-时间" class="headerlink" title="4. 时间"></a>4. 时间</h3><p>存储时间</p><ol><li>Data:</li><li>Time:</li><li>Datetime:       8b</li><li>Timestamp:    4b (因为4b所以会有2038问题(时间存储会出问题) 好奇可以搜索一下)</li><li>Year</li></ol><h3 id="5-blob类型"><a href="#5-blob类型" class="headerlink" title="5. blob类型"></a>5. blob类型</h3><p>存储所有的二进制结构的文件: 图片 pdf word 等等</p><table><thead><tr><th></th><th>Data type</th><th>size</th></tr></thead><tbody><tr><td>1</td><td>TinyBlob</td><td>225b</td></tr><tr><td>2</td><td>Blob</td><td>65kb</td></tr><tr><td>3</td><td>mediumBlob</td><td>16mb</td></tr><tr><td>4</td><td>LongBlob</td><td>4gb</td></tr></tbody></table><p><strong>因为将数据库中存入文件会将数据库变得很大.  而且读取效率  备份时间 以及开发代码 都会变得多 所以考虑存储文件前   线考虑这些问题</strong></p><h3 id="6-Json"><a href="#6-Json" class="headerlink" title="6 Json"></a>6 Json</h3><p>mysql 8 以后开始支持</p><ul><li><p>Json </p></li><li><p>写: Json_Object(json对象)</p></li><li><p>查询</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> id<span class="token punctuation">,</span> properties <span class="token operator">-</span><span class="token operator">></span> <span class="token string">'$. name.childName'</span> <span class="token keyword">from</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token keyword">where</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> properties <span class="token operator">-</span><span class="token operator">>></span> <span class="token string">'$. name.childName'</span> : 值读取值</code></pre><ul><li>json函数 很多都比较方便 可以试试</li></ul></li></ul><h3 id="布尔-集合和枚举"><a href="#布尔-集合和枚举" class="headerlink" title=". 布尔, 集合和枚举"></a>. 布尔, 集合和枚举</h3><ol><li><p>bool / boolean:  T/F  (1/0)</p></li><li><p>set 并不是很好用</p></li><li><p>enum(A,B,C) 也不是很建议使用: 是固定的 而且</p><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2></li></ol><p>这一部分只是大概介绍一下： 因为需要很多实践就不放在这里了</p><p>如果需要设计一个数据库：</p><ol><li>Understand the requirements（了解需求是很重要的）</li><li>建立 <strong>概念，逻辑，实体</strong> 模型</li></ol><h3 id="模型建立"><a href="#模型建立" class="headerlink" title="模型建立"></a>模型建立</h3><p>数据库概念模型实际上是现实世界到机器世界的一个中间层次。侧重于具体的功能在实际世界的实现，</p><p>逻辑模型在概念模型的基础上更细化。 更侧重于数据库的实现</p><p><img src="https://i.loli.net/2020/12/20/USWmxrKMesuA5To.png" alt="概念模型和概念模型"></p><p>实体模型：具体的数据库模型</p><p> 主键：数据库标识（唯一的） 还可以复合主键</p><p> 外键： 如果一个字段X在A表中是主关键字，而在另外一张表B表中不是主关键字，则字段X称为表二的外键；</p><ul><li><p>外键约束： 虽说主键尽量不可修改 但是外键有 对应修改和删除的操作：</p><p>==<strong>on delete/update 规则：</strong>==</p><ol><li><p>CASCADE：级联</p><p>（1）所谓的级联删除，就是删除主键表的同时，外键表同时删除。</p></li><li><p>NO ACTION(非活动，默认)、RESTRICT：约束/限制</p><p> 当取值为No Action或者Restrict时，则当在主键表中删除对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除。（即外键表约束主键表）</p><p><strong>NO ACTION</strong>和<strong>RESTRICT</strong>的区别：只有在及个别的情况下会导致区别，前者是在其他约束的动作之后执行，后者具有最高的优先权执行。</p></li><li><p>SET NULL </p><p>当取值为Set Null时，则当在主键表中删除对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（一样是外键表约束主键表，不过这就要求该外键允许取null）。</p></li></ol></li></ul><h4 id="标准化"><a href="#标准化" class="headerlink" title="标准化"></a>标准化</h4><p>数据库七大约束中三范式最为重要 ： 保证了数据库的不冗余， 便捷等</p><h3 id="数据库三范式"><a href="#数据库三范式" class="headerlink" title="数据库三范式"></a>数据库三范式</h3><ol><li>表的每一列都是<strong>不可分割的原子数据</strong></li><li>非主键必须<strong>完全依赖于主键</strong></li><li>非主键必须<strong>直接</strong>依赖主键(不能有传递和间接关系)</li></ol><h5 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h5><p>其实这些范式我记的并不全面，而且实际应用当中 <em>并不一定严格准守这些约束</em>   尽可能的消除冗余就好了。 </p><ol><li><p>但是 尽量先建立模型 ， 在建立数据库， 否则会很糟糕。</p></li><li><p>但是 并不一定都需要建模， 因为建模可能和实际不符合，并且过于复杂且无用，值需要为当下确定一个可行方案， 而不是想要设计一个永远不出问题的模型</p></li></ol><ul><li>模型正向工程： 我们创建了模型 – 将模型转换为脚本 – 执行 （可以同步修改表和模型）</li><li>模型逆向工程： 将数据库转换为 模型</li></ul><p><img src="https://i.loli.net/2020/12/21/WtrYFqwLo5fkzS9.png" alt="image.png"></p><ul><li>练习 <a href="todo">航空系统</a> 链接</li></ul><h2 id="数据库保护"><a href="#数据库保护" class="headerlink" title="数据库保护"></a>数据库保护</h2><p>因为一直在本地运行，如果在真实项目要考虑安全问题</p><h3 id="用户和权限"><a href="#用户和权限" class="headerlink" title="用户和权限"></a>用户和权限</h3><p>CURD 管理可访问到数据库的用户</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> join11 <span class="token variable">@172.0.0.1</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'123123'</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> join11 IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'123123'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span>    <span class="token operator">*</span> <span class="token keyword">FROM</span>    mysql<span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">USER</span> join11 <span class="token variable">@172.0.0.1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">------------</span>权限：<span class="token keyword">GRANT</span> 权限 <span class="token keyword">on</span> tablename <span class="token keyword">from</span> name <span class="token comment" spellcheck="true">-- 增加</span>ROvoke 。。。 <span class="token comment" spellcheck="true">-- 撤销</span></code></pre><p><a href="https://blog.csdn.net/weixin_30892763/article/details/95682481" target="_blank" rel="noopener">Mysql所有权限</a></p><table><thead><tr><th align="left">Privilege</th><th align="left">Column</th><th align="left">Context</th></tr></thead><tbody><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_create" target="_blank" rel="noopener"><code>CREATE</code></a></td><td align="left"><code>Create_priv</code></td><td align="left">databases, tables, or indexes</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_drop" target="_blank" rel="noopener"><code>DROP</code></a></td><td align="left"><code>Drop_priv</code></td><td align="left">databases, tables, or views</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_grant-option" target="_blank" rel="noopener"><code>GRANT OPTION</code></a></td><td align="left"><code>Grant_priv</code></td><td align="left">databases, tables, or stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_lock-tables" target="_blank" rel="noopener"><code>LOCK TABLES</code></a></td><td align="left"><code>Lock_tables_priv</code></td><td align="left">databases</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_references" target="_blank" rel="noopener"><code>REFERENCES</code></a></td><td align="left"><code>References_priv</code></td><td align="left">databases or tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_event" target="_blank" rel="noopener"><code>EVENT</code></a></td><td align="left"><code>Event_priv</code></td><td align="left">databases</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_alter" target="_blank" rel="noopener"><code>ALTER</code></a></td><td align="left"><code>Alter_priv</code></td><td align="left">tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_delete" target="_blank" rel="noopener"><code>DELETE</code></a></td><td align="left"><code>Delete_priv</code></td><td align="left">tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_index" target="_blank" rel="noopener"><code>INDEX</code></a></td><td align="left"><code>Index_priv</code></td><td align="left">tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_insert" target="_blank" rel="noopener"><code>INSERT</code></a></td><td align="left"><code>Insert_priv</code></td><td align="left">tables or columns</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_select" target="_blank" rel="noopener"><code>SELECT</code></a></td><td align="left"><code>Select_priv</code></td><td align="left">tables or columns</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_update" target="_blank" rel="noopener"><code>UPDATE</code></a></td><td align="left"><code>Update_priv</code></td><td align="left">tables or columns</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_create-temporary-tables" target="_blank" rel="noopener"><code>CREATE TEMPORARY TABLES</code></a></td><td align="left"><code>Create_tmp_table_priv</code></td><td align="left">tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_trigger" target="_blank" rel="noopener"><code>TRIGGER</code></a></td><td align="left"><code>Trigger_priv</code></td><td align="left">tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_create-view" target="_blank" rel="noopener"><code>CREATE VIEW</code></a></td><td align="left"><code>Create_view_priv</code></td><td align="left">views</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_show-view" target="_blank" rel="noopener"><code>SHOW VIEW</code></a></td><td align="left"><code>Show_view_priv</code></td><td align="left">views</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_alter-routine" target="_blank" rel="noopener"><code>ALTER ROUTINE</code></a></td><td align="left"><code>Alter_routine_priv</code></td><td align="left">stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_create-routine" target="_blank" rel="noopener"><code>CREATE ROUTINE</code></a></td><td align="left"><code>Create_routine_priv</code></td><td align="left">stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_execute" target="_blank" rel="noopener"><code>EXECUTE</code></a></td><td align="left"><code>Execute_priv</code></td><td align="left">stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_file" target="_blank" rel="noopener"><code>FILE</code></a></td><td align="left"><code>File_priv</code></td><td align="left">file access on server host</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_create-tablespace" target="_blank" rel="noopener"><code>CREATE TABLESPACE</code></a></td><td align="left"><code>Create_tablespace_priv</code></td><td align="left">server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_create-user" target="_blank" rel="noopener"><code>CREATE USER</code></a></td><td align="left"><code>Create_user_priv</code></td><td align="left">server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_process" target="_blank" rel="noopener">PROCESS</a></td><td align="left"><code>Process_priv</code></td><td align="left">server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_proxy" target="_blank" rel="noopener">PROXY</a></td><td align="left">see <code>proxies_priv</code> table</td><td align="left">server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_reload" target="_blank" rel="noopener">RELOAD</a></td><td align="left"><code>Reload_priv</code></td><td align="left">server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_replication-client" target="_blank" rel="noopener">REPLICATION CLIENT</a></td><td align="left"><code>Repl_client_priv</code></td><td align="left">server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_replication-slave" target="_blank" rel="noopener">REPLICATION SLAVE</a></td><td align="left"><code>Repl_slave_priv</code></td><td align="left">server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_show-databases" target="_blank" rel="noopener">SHOW DATABASES</a></td><td align="left"><code>Show_db_priv</code></td><td align="left">server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_shutdown" target="_blank" rel="noopener">SHUTDOWN</a></td><td align="left"><code>Shutdown_priv</code></td><td align="left">server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_super" target="_blank" rel="noopener">SUPER</a></td><td align="left"><code>Super_priv</code></td><td align="left">server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_all" target="_blank" rel="noopener">ALL [PRIVILEGES]</a></td><td align="left"></td><td align="left">server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_usage" target="_blank" rel="noopener">USAGE</a></td><td align="left"></td><td align="left">server administration</td></tr></tbody></table><hr><h2 id="InnoDB和MySAM"><a href="#InnoDB和MySAM" class="headerlink" title="InnoDB和MySAM"></a>InnoDB和MySAM</h2><ul><li>现在都是默认使用InnoDB</li><li>MySAM 比较老,以前用</li></ul><blockquote><p>区别:</p></blockquote><table><thead><tr><th></th><th>MySAM</th><th>INNODB</th></tr></thead><tbody><tr><td>事务</td><td>不支持</td><td><strong>支持</strong></td></tr><tr><td>数据锁定方式</td><td>表锁定</td><td><strong>行锁定</strong></td></tr><tr><td>外键约束</td><td>不支持</td><td><strong>支持</strong></td></tr><tr><td>全文索引</td><td><strong>支持</strong></td><td>不支持</td></tr><tr><td>表空间大小</td><td>小</td><td>大,约为MySAM的两倍</td></tr><tr><td>聚集索引</td><td>比普通索引多了个约束</td><td>叶子节点就是数据节点</td></tr></tbody></table><blockquote><p>在物理空间:</p></blockquote><p>所有数据库都是以文件形式存储在data目录下,一组文件对应一个数据库,本质还是文件存储</p><p>Mysql引擎</p><ul><li>INNODB在数据库上只有一个*.frm, 以及上级目录的ibdata1文件</li><li>MySAM<ul><li>*.frm 表结构</li><li>*.myd  数据文件(data)</li><li>*.MYI  索引文件(index)</li></ul></li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>MySQL官方对索引的定义为：索引（Index）是帮助MySQL高效获取数据的数据结构。提取句子主干，就可以得到索引的本质：索引是数据结构。</p><p>IO次数和数据结构的次数有关(树 – 就是高度) , 如果没有索引那就是一个数据一次IO</p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p><a href="https://zhuanlan.zhihu.com/p/29118331" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/29118331</a></p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>mysql的索引分为单列索引(主键索引(聚集索引),唯一索引(UNIQUE INDEX),普通索引(INDEX ))和组合索引.</p><p>单列索引:一个索引只包含一个列,一个表可以有多个单列索引.</p><p>组合索引:一个组合索引包含两个或两个以上的列,</p><hr><p>聚集索引: 数据行的物理顺序与列值的<strong>顺序相同</strong></p><p>非聚集索引: 该索引中索引的逻辑顺序与磁盘上行的物理存储顺序不同，一个表中可以拥有多个非聚集索引。(普通索引，唯一索引，全文索引)</p><p>回表查询解决方式:   复合索引（覆盖索引）</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 组合</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> IndexName <span class="token keyword">On</span> <span class="token punctuation">`</span>TableName<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>字段名<span class="token punctuation">`</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">`</span>字段名<span class="token punctuation">`</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>覆盖索引: select 的 和查找的都是索引</p><blockquote><p> 索引的数据结构:</p></blockquote><p>哈希:</p><p>B树</p><p>B+树</p><blockquote><p>索引</p><p><a href="https://www.jianshu.com/p/2879225ba243" target="_blank" rel="noopener">https://www.jianshu.com/p/2879225ba243</a></p></blockquote><h2 id="LOG"><a href="#LOG" class="headerlink" title="LOG"></a>LOG</h2><p><em>TODO：</em></p><ul><li><input disabled="" type="checkbox"> <p>P52 - p63 一些函数和语句: 我跳了</p></li><li><input disabled="" type="checkbox"> <p>P74 - P84 存储过程的其他东西 和 触发器 我跳了</p></li><li><input disabled="" type="checkbox"> <p>还差索引</p></li><li><input disabled="" type="checkbox"> <p>整理</p></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/jiadajing267/article/details/81269067" target="_blank" rel="noopener">Mysql调优 – explain</a></p><p><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="noopener">MySQL索引背后的数据结构及算法原理</a></p>]]></content>
      
      
      <categories>
          
          <category> 课程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xx-net 访问Google</title>
      <link href="/2020/07/04/xx-net-%E8%AE%BF%E9%97%AEGoogle/"/>
      <url>/2020/07/04/xx-net-%E8%AE%BF%E9%97%AEGoogle/</url>
      
        <content type="html"><![CDATA[<h1 id="xx-net-访问Google"><a href="#xx-net-访问Google" class="headerlink" title="xx-net 访问Google"></a>xx-net 访问Google</h1><p>访问google</p><p>下载XX-net: <a href="https://github.com/XX-net/XX-Net/blob/master/code/default/download.md">github地址</a> </p><p>下载稳定版解压(尽量不要有中文)运行 Star.bat/star.vbs</p><p>然后 提示安装证书 – 就入了浏览器 – 点击状态 – 如果未连接:</p><ul><li>设置ipv6(<strong>也可以先造作这步骤</strong>)<ol><li>打开 xx-Net/code/default/gae_proxy/local/ipv6_tunnel 下的enable_ipv6 打开自动设置</li></ol></li></ul><p>如果状态时链接那么就可以使用了</p><hr><p>当然用的是共有的appid 会有限制 可以自己配置Google appid: <a href="https://github.com/XX-net/XX-Net/wiki/how-to-create-my-appids">点击这里是官方教程</a> 我没有信用卡就先将就了:sob:</p>]]></content>
      
      
      <categories>
          
          <category> build </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xx-net </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring事务</title>
      <link href="/2020/07/04/Spring%E4%BA%8B%E5%8A%A1/"/>
      <url>/2020/07/04/Spring%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="事务说明"><a href="#事务说明" class="headerlink" title="事务说明"></a>事务说明</h2><blockquote><p>什么是事务</p></blockquote><p>事务式代表单个工作单元的一组SQL语句.  </p><p>所有这些语句都应该成功完成,  否则事务会运行失败.  </p><p>我们在需要对数据库进行多次更改的情况下使用事务</p><blockquote><p>四大特性(ACID)</p></blockquote><ol><li><p>Atomicity:  原子性 每个事物不可分割</p></li><li><p><strong>Consistency: 一致性 :</strong> 使用事务 数据库始终保持一致的状态</p><ul><li>完整约束</li></ul></li><li><p>Isolation: 隔离性 事物之间不可干扰</p><ul><li><p>锁行</p><p>如果多个事务想要更新相同的数据</p><p>受影响的行会被锁定</p><p>因此只有一个事务可以更新行</p></li></ul></li><li><p>Durability: 持续性  一旦提交 事务的更改是永久的</p></li></ol><blockquote><p>Mysql对事务处理</p></blockquote><p>mysql会封装我们写的sql 如果检查无误自动提交</p><p><img src="https://i.loli.net/2020/08/23/LaimKnoYh1dc2P5.png" alt="mysql自动提交属性"></p><p>mysql innodb引擎已经通过MVCC、间隙锁&amp;临键锁解决了可重复读隔离级别下的幻读问题</p><h2 id="创建事务"><a href="#创建事务" class="headerlink" title="创建事务"></a>创建事务</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// sql语句...</span><span class="token keyword">Commit</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 提交</span><span class="token keyword">RollBack</span> <span class="token comment" spellcheck="true">-- 回滚</span><span class="token comment" spellcheck="true">-- 保存点</span><span class="token keyword">SAVEPOINT</span> point_name<span class="token keyword">RollBack</span>  <span class="token keyword">to</span> point_name <span class="token comment" spellcheck="true">-- 回滚到保存点</span></code></pre><h2 id="并发和锁定"><a href="#并发和锁定" class="headerlink" title="并发和锁定"></a>并发和锁定</h2><blockquote><p>在真实场景中肯定会有多个用户去访问相同的数据 这就是 并发 如果正在访问被修改的数据 那就回出现问题</p></blockquote><ul><li>mysql 默认并发处理 – 锁行</li></ul><p>当一个事务修改行没有结束时    另一个事务再次对其修改会被锁住发生超时 </p><pre class=" language-sql"><code class="language-sql"><span class="token operator">></span> <span class="token number">1205</span> <span class="token operator">-</span> <span class="token keyword">Lock</span> wait timeout exceeded<span class="token punctuation">;</span> try restarting <span class="token keyword">transaction</span><span class="token comment" spellcheck="true">// 超过了锁定等待超时；尝试重新启动事务  -- 事务会失效</span></code></pre><h2 id="并发问题"><a href="#并发问题" class="headerlink" title="并发问题"></a>并发问题</h2><p><strong>Lost Update :</strong> 当有两个事务修改/删除一个数据时, 后提交的会把先提交的覆盖掉</p><p><strong>脏度</strong>:读取到了<strong>另一个事务未结束</strong>的数据(回滚前 或者更新前)</p><p><code>举个例子:</code>  <strong>A事务</strong> 增加20积分 <strong>B事务</strong> 根据积分来选择折扣  – 如果 A事务在B事务结束前回滚了那么B事务的数据就是不真实的 也就是很笨不存在的</p><p><strong>不可重复读</strong>:(不一致读) 再<strong>一次事务</strong>中, 两次查询不一致,可能在两次查询中更改了数据</p><p><strong>幻读</strong>:  有数据变化时没有查询到 – 事务查询后添加, 修改或删除的</p><p><code>举个例子:</code> A事务查询积分大于100的 B事务将 <em>小明</em>  的积分加到100 先A后B 但是A事务查不到 小明</p><h2 id="四种隔离级别"><a href="#四种隔离级别" class="headerlink" title="四种隔离级别"></a>四种隔离级别</h2><blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> @<span class="token variable">@tx_isolation</span><span class="token punctuation">;</span> 查看事务隔离级别</code></pre></blockquote><ol><li><p>默认</p></li><li><p>Read UNCOMMITTED（未提交内容读）</p></li><li><p>Read Committed（提交内容读）</p></li><li><p>Repeatable Read（可重读）</p></li><li><p>Serializable（可串行化(可序列化)） : 防止幻读 当A事务发现有事务在修改我要查询的数据 就会等待</p></li></ol><p><img src="https://i.loli.net/2020/08/23/42nrMJzVkWZ7Fp6.png" alt="image.png"></p><img src="https://i.loli.net/2020/09/07/iMKPBzVfsqt9oC1.png" alt="image.png" style="zoom:80%;" /><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token keyword">session</span> <span class="token operator">/</span> globel <span class="token keyword">transaction</span> <span class="token keyword">isolation level</span> 级别 <span class="token comment" spellcheck="true">-- 设置级别 Mysql 默认Repeatable Read</span>   <span class="token keyword">session</span><span class="token punctuation">(</span>当前会话<span class="token punctuation">)</span> <span class="token operator">/</span> globel <span class="token punctuation">(</span>全局<span class="token punctuation">)</span></code></pre><p>   事务实现技术/原理</p><p><img src="https://i.loli.net/2020/08/23/O1uMT6z3eIAVWS7.png" alt="image.png"></p><h3 id="事务的实现原理"><a href="#事务的实现原理" class="headerlink" title="事务的实现原理"></a>事务的实现原理</h3><ol><li>事务的<strong>原子性 通过undo log</strong> 实现<ul><li><del>undo log : 操作任何数据之前,将数据备份到一个地方 (Undo log).  然后进行数据修改. 如果出现错误或者执行RollBack语句.  系统用备份在undo log 下的数据进行回滚(sql执行相反操作delect – insetr update – 相反的update)</del> </li></ul></li><li>事务的<strong>持久性 通过redo log</strong> 实现<ul><li>和undo log 相反, redo 是记录是新数据的备份 系统崩溃时 可以根据redo 恢复?</li></ul></li><li>事务的隔离性 通过(<strong>读写锁+MVCC</strong>[多版本并发控制])来实现</li><li>==事务一致性通过 原子性, 持久性, 隔离性实现!!!!!==</li></ol><ul><li>bin log (binary log)</li></ul><h3 id="隔离性实现原理-锁"><a href="#隔离性实现原理-锁" class="headerlink" title="隔离性实现原理 : 锁"></a>隔离性实现原理 : <strong>锁</strong></h3><ol><li><p>Mysql 分为:</p><ul><li>共享锁(Shared): ==锁行== 将数据对象变为<strong>只读</strong>形式, 不能进行更新 也是<strong>读写</strong>锁定. 多个事务共享但是 不能修改</li><li>排它锁(Exclusive):  ==锁行==   <strong>不与其他锁共存</strong> 如果一个事务获取了排它锁. 其他事务就不能在获取锁了, 只有获取锁的事务对数据进行修改</li><li>还有个自增锁(对于自增列自增长的一个特殊的表级锁)</li></ul></li><li><p>锁得粒度(粒度越高效率低但是安全)</p><ul><li>记录</li><li>表</li><li>数据库</li></ul></li><li><p>锁的并发流程</p><ul><li>事务根据自己的草最获取对应的锁</li><li>申请的请求被发给 锁管理器 (是否冲突 是否可以获得)</li><li>若被授予锁 则继续 否则等待 直到其他的事务释放</li></ul></li></ol><h1 id="Spring事务"><a href="#Spring事务" class="headerlink" title="Spring事务"></a>Spring事务</h1><h3 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h3><p>传播特性</p><h3 id="编程式事务"><a href="#编程式事务" class="headerlink" title="编程式事务"></a>编程式事务</h3><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="noopener">http://blog.codinglabs.org/articles/theory-of-mysql-index.html</a></p><p><a href="http://blog.codinglabs.org/articles/index-condition-pushdown.html" target="_blank" rel="noopener">http://blog.codinglabs.org/articles/index-condition-pushdown.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 未完成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring事务</title>
      <link href="/2020/07/04/%E4%BA%8B%E5%8A%A1/"/>
      <url>/2020/07/04/%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="事务说明"><a href="#事务说明" class="headerlink" title="事务说明"></a>事务说明</h2><blockquote><p>什么是事务</p></blockquote><p>事务式代表单个工作单元的一组SQL语句.  </p><p>所有这些语句都应该成功完成,  否则事务会运行失败.  </p><p>我们在需要对数据库进行多次更改的情况下使用事务</p><blockquote><p>四大特性(ACID)</p></blockquote><ol><li><p>Atomicity:  原子性 每个事物不可分割</p></li><li><p><strong>Consistency: 一致性 :</strong> 使用事务 数据库始终保持一致的状态</p><ul><li>完整约束</li></ul></li><li><p>Isolation: 隔离性 事物之间不可干扰</p><ul><li><p>锁行</p><p>如果多个事务想要更新相同的数据</p><p>受影响的行会被锁定</p><p>因此只有一个事务可以更新行</p></li></ul></li><li><p>Durability: 持续性  一旦提交 事务的更改是永久的</p></li></ol><blockquote><p>Mysql对事务处理</p></blockquote><p>mysql会封装我们写的sql 如果检查无误自动提交</p><p><img src="https://i.loli.net/2020/08/23/LaimKnoYh1dc2P5.png" alt="mysql自动提交属性"></p><p>mysql innodb引擎已经通过MVCC、间隙锁&amp;临键锁解决了可重复读隔离级别下的幻读问题</p><h2 id="事务实现技术-原理"><a href="#事务实现技术-原理" class="headerlink" title="事务实现技术/原理"></a>事务实现技术/原理</h2><p><img src="https://i.loli.net/2020/08/23/O1uMT6z3eIAVWS7.png" alt="image.png"></p><h3 id="事务的实现原理"><a href="#事务的实现原理" class="headerlink" title="事务的实现原理"></a>事务的实现原理</h3><ol><li>事务的<strong>原子性 通过undo log</strong> 实现<ul><li><del>undo log : 操作任何数据之前,将数据备份到一个地方 (Undo log).  然后进行数据修改. 如果出现错误或者执行RollBack语句.  系统用备份在undo log 下的数据进行回滚(sql执行相反操作delect – insetr update – 相反的update)</del> </li></ul></li><li>事务的<strong>持久性 通过redo log</strong> 实现<ul><li>和undo log 相反, redo 是记录是新数据的备份 系统崩溃时 可以根据redo 恢复?</li></ul></li><li>事务的隔离性 通过(<strong>读写锁+MVCC</strong>[多版本并发控制])来实现</li><li>==事务一致性通过 原子性, 持久性, 隔离性实现!!!!!==</li></ol><ul><li>bin log (binary log)</li></ul><h3 id="隔离性实现原理-锁"><a href="#隔离性实现原理-锁" class="headerlink" title="隔离性实现原理 : 锁"></a>隔离性实现原理 : <strong>锁</strong></h3><ol><li><p>Mysql 分为:</p><ul><li>共享锁(Shared): ==锁行== 将数据对象变为<strong>只读</strong>形式, 不能进行更新 也是<strong>读写</strong>锁定. 多个事务共享但是 不能修改</li><li>排它锁(Exclusive):  ==锁行==   <strong>不与其他锁共存</strong> 如果一个事务获取了排它锁. 其他事务就不能在获取锁了, 只有获取锁的事务对数据进行修改</li><li>还有个自增锁(对于自增列自增长的一个特殊的表级锁)</li></ul></li><li><p>锁得粒度(粒度越高效率低但是安全)</p><ul><li>记录</li><li>表</li><li>数据库</li></ul></li><li><p>锁的并发流程</p><ul><li>事务根据自己的草最获取对应的锁</li><li>申请的请求被发给 锁管理器 (是否冲突 是否可以获得)</li><li>若被授予锁 则继续 否则等待 直到其他的事务释放</li></ul></li></ol><h2 id="创建事务"><a href="#创建事务" class="headerlink" title="创建事务"></a>创建事务</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// sql语句...</span><span class="token keyword">Commit</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 提交</span><span class="token keyword">RollBack</span> <span class="token comment" spellcheck="true">-- 回滚</span><span class="token comment" spellcheck="true">-- 保存点</span><span class="token keyword">SAVEPOINT</span> point_name<span class="token keyword">RollBack</span>  <span class="token keyword">to</span> point_name 回滚到保存点</code></pre><h2 id="并发和锁定"><a href="#并发和锁定" class="headerlink" title="并发和锁定"></a>并发和锁定</h2><blockquote><p>在真实场景中肯定会有多个用户去访问相同的数据 这就是 并发 如果正在访问被修改的数据 那就回出现问题</p></blockquote><ul><li>mysql 默认并发处理 – 锁行</li></ul><p>当一个事务修改行没有结束时    另一个事务再次对其修改会被锁住发生超时 </p><pre class=" language-sql"><code class="language-sql"><span class="token operator">></span> <span class="token number">1205</span> <span class="token operator">-</span> <span class="token keyword">Lock</span> wait timeout exceeded<span class="token punctuation">;</span> try restarting <span class="token keyword">transaction</span><span class="token comment" spellcheck="true">// 超过了锁定等待超时；尝试重新启动事务  -- 事务会失效</span></code></pre><h2 id="四种隔离级别"><a href="#四种隔离级别" class="headerlink" title="四种隔离级别"></a>四种隔离级别</h2><blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> @<span class="token variable">@tx_isolation</span><span class="token punctuation">;</span> 查看事务隔离级别</code></pre></blockquote><ol><li><p>默认</p></li><li><p>Read UNCOMMITTED（未提交内容读）</p></li><li><p>Read Committed（提交内容读）</p></li><li><p>Repeatable Read（可重读）</p></li><li><p>Serializable（可串行化(可序列化)）</p><p><img src="https://i.loli.net/2020/08/23/42nrMJzVkWZ7Fp6.png" alt="image.png"></p><p>脏度:读取到了<strong>另一个事务未结束</strong>的数据(回滚前 或者更新前)</p><p>不可重复读: 再<strong>一次事务</strong>中, 两次查询不一致,可能在两次查询中更改了数据 </p><p>幻读:  两次查询,第二次查到了新的行(多了一行)</p></li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token keyword">session</span> <span class="token operator">/</span> globel <span class="token keyword">transaction</span> <span class="token keyword">isolation level</span> 级别 <span class="token comment" spellcheck="true">// 设置级别 </span><span class="token keyword">session</span><span class="token punctuation">(</span>当前会话<span class="token punctuation">)</span> <span class="token operator">/</span> globel <span class="token punctuation">(</span>全局<span class="token punctuation">)</span></code></pre><h3 id="Read-UNCOMMITTED（未提交内容读）"><a href="#Read-UNCOMMITTED（未提交内容读）" class="headerlink" title="Read UNCOMMITTED（未提交内容读）"></a><del>Read UNCOMMITTED（未提交内容读）</del></h3><h3 id="Read-Committed（提交内容读）"><a href="#Read-Committed（提交内容读）" class="headerlink" title="Read Committed（提交内容读）"></a><del>Read Committed（提交内容读）</del></h3><h3 id="Repeatable-Read（可重读）"><a href="#Repeatable-Read（可重读）" class="headerlink" title="Repeatable Read（可重读）"></a><del>Repeatable Read（可重读）</del></h3><h3 id="Serializable（可串行化-可序列化-）"><a href="#Serializable（可串行化-可序列化-）" class="headerlink" title="Serializable（可串行化(可序列化)）"></a><del>Serializable（可串行化(可序列化)）</del></h3><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><ul><li>某两个或以上的事务   获取了其他事务执行时必要的锁 且不能释放      那么就会发生死锁</li></ul><h1 id="Spring事务"><a href="#Spring事务" class="headerlink" title="Spring事务"></a>Spring事务</h1><h3 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h3><p>传播特性</p><h3 id="编程式事务"><a href="#编程式事务" class="headerlink" title="编程式事务"></a>编程式事务</h3><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="noopener">http://blog.codinglabs.org/articles/theory-of-mysql-index.html</a></p><p><a href="http://blog.codinglabs.org/articles/index-condition-pushdown.html" target="_blank" rel="noopener">http://blog.codinglabs.org/articles/index-condition-pushdown.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 未完成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型模式</title>
      <link href="/2020/07/02/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/07/02/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pe系统盘解锁密码(开启安全引导后密码错误)</title>
      <link href="/2020/06/25/pe%E7%B3%BB%E7%BB%9F%E7%9B%98%E8%A7%A3%E9%94%81%E5%AF%86%E7%A0%81-%E5%BC%80%E5%90%AF%E5%AE%89%E5%85%A8%E5%BC%95%E5%AF%BC%E5%90%8E%E5%AF%86%E7%A0%81%E9%94%99%E8%AF%AF/"/>
      <url>/2020/06/25/pe%E7%B3%BB%E7%BB%9F%E7%9B%98%E8%A7%A3%E9%94%81%E5%AF%86%E7%A0%81-%E5%BC%80%E5%90%AF%E5%AE%89%E5%85%A8%E5%BC%95%E5%AF%BC%E5%90%8E%E5%AF%86%E7%A0%81%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="pe系统盘解锁密码-开启安全引导后密码错误"><a href="#pe系统盘解锁密码-开启安全引导后密码错误" class="headerlink" title="pe系统盘解锁密码(开启安全引导后密码错误)"></a>pe系统盘解锁密码(开启安全引导后密码错误)</h1><blockquote><blockquote><p>经历呢就是为了删掉<strong>某垃圾管家</strong>顽固的残留文件, 百度很多都说可以更改安全引导; 然后就登陆不进去了:sob:</p></blockquote><ul><li>登录的用户id变成了我的微软账户名;  输入什么密码都不对(贴吧很多人说是微软密码; 但是无法联网,也没法验证对不对)</li></ul><blockquote><p><strong>于是贴吧里的一个帖子:</strong>  博主名字:<a href="https://tieba.baidu.com/p/6619675494?red_tag=3379245281" target="_blank" rel="noopener">山月<img src="https://tb1.bdstatic.com/tb/cms/nickemoji/3-34.png" alt="img"></a></p></blockquote><ul><li>找出一个U盘，把U盘文件备份</li><li>用另一台电脑，插入U盘，下载微pe系统到U盘，具体可见百度经验<a href="https://jingyan.baidu.com/article/6fb756ec44a2cb241858fbfe.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/6fb756ec44a2cb241858fbfe.html</a></li><li>你的那台忘记密码的电脑，重启，进入bios菜单，进入满屏幕英文—然后选择USB storage device，回车</li><li>进入微pe系统界面，点dism+，，出现什么都点接受，然后进入专家模式，选择<strong>另一个盘</strong>，——恢复功能，引导修复</li><li>你会神奇的发现—它能用PIN码进入了</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 记录/踩坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA的JUC</title>
      <link href="/2020/06/05/JAVA%E7%9A%84JUC/"/>
      <url>/2020/06/05/JAVA%E7%9A%84JUC/</url>
      
        <content type="html"><![CDATA[<h1 id="JUC"><a href="#JUC" class="headerlink" title="JUC"></a>JUC</h1><h2 id="JUC是啥-为什么要用JUC"><a href="#JUC是啥-为什么要用JUC" class="headerlink" title="JUC是啥  /  为什么要用JUC"></a>JUC是啥  /  为什么要用JUC</h2><p><img src="C:%5CUsers%5C25778%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200903222641670.png" alt="image-20200903222641670"></p><blockquote><p>JUC是在线程的基础上 为了高效解决并发问题  并且充分利用cpu</p></blockquote><p>并发: 多个线程操作一个<strong>共同资源</strong> – cpu, 模拟出来多个线程, 只要切换执行的<strong>快</strong>  那就是牛逼!!!!  (本质是交替执行) </p><p>并行: 和串行相反 大家并排一起走 –  多核cpu</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// java代码看一下自己的 处理器数量</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://i.loli.net/2020/08/26/nUcurRmtT4aFlHe.png" alt="image.png"></p><h2 id="线程的基础"><a href="#线程的基础" class="headerlink" title="线程的基础"></a>线程的基础</h2><p><a href="#">可以看这里</a></p><h2 id="LOCK锁"><a href="#LOCK锁" class="headerlink" title="LOCK锁"></a>LOCK锁</h2><p>例子:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 用lock代替synchronized</span><span class="token keyword">private</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 业务逻辑</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 关闭锁</span><span class="token punctuation">}</span></code></pre><p>使用过程:</p><ol><li>创建锁的实例</li><li>加锁</li><li>finally中释放锁</li></ol><blockquote><p>Synchronized和Lock</p></blockquote><p><a href="https://www.bilibili.com/video/BV1B7411L7tE?p=6" target="_blank" rel="noopener">P6、Synchronized和Lock区别</a> </p><h2 id="生产者-消费者"><a href="#生产者-消费者" class="headerlink" title="生产者 / 消费者"></a>生产者 / 消费者</h2><p>在java线程中 利用 synchronized/wait/notify 实现了</p><blockquote><p>Condition 精准通知和唤醒线程</p></blockquote><p>Condition: 和obj 的wait notify notifyall 有对应方法</p><p>一个Condition 实例本质上绑定到一个锁. </p><p>– 利用Condition 实现精准唤醒</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 让三个线程一次等待和唤醒</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DataClass dataClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dataClass<span class="token punctuation">.</span><span class="token function">change1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dataClass<span class="token punctuation">.</span><span class="token function">change2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dataClass<span class="token punctuation">.</span><span class="token function">change3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 资源类</span><span class="token keyword">class</span> <span class="token class-name">DataClass</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Condition condition1 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建监视器1</span>    <span class="token keyword">private</span> Condition condition2 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建监视器2</span>    <span class="token keyword">private</span> Condition condition3 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建监视器3</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">change1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 修改数据为1 通知2号监视器</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                condition1<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 和wait用处相同</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token string">"::"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            condition2<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// == notofy</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 关闭锁</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">change2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 修改nummber 为2; 通知3号监视器 </span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">change3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 修改nummber 为0; 通知1号监视器 </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="锁-锁是啥-锁什么"><a href="#锁-锁是啥-锁什么" class="headerlink" title="锁: 锁是啥, 锁什么"></a>锁: 锁是啥, 锁什么</h2><blockquote><p>对象锁: </p></blockquote><p>就是锁对象: 每个对象一把锁 </p><pre class=" language-java"><code class="language-java">每对A进行一次对象创建 就新获取一把锁 所以 同一个对象的锁会阻塞<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>类锁</p></blockquote><p>就是锁对象: 每个对象一把锁 </p><pre class=" language-java"><code class="language-java">不管有多少个对象 只要是使用 <span class="token keyword">static</span> <span class="token keyword">synchronized</span> 锁 那就是同一把锁 就会阻塞    <span class="token comment" spellcheck="true">// 测试了一下 synchronized static 和static synchronized 是一样的 </span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>类锁和 对象锁没有直接关系 并不是通一把锁</p></blockquote><p>现在有典型的八锁问题如果理解了就会很简单:</p><blockquote><p>　    ①两个普通同步方法，两个线程，标准打印， 打印? //one </p><p>　　②新增 Thread.sleep() 给 one() ,打印?//one</p><p>　　③新增普通方法 three() , 打印? //three one two</p><p>　　④两个普通同步方法，两个 Data对象，打印? //two one</p><p>　　⑤修改 one() 为静态同步方法，打印? //two one</p><p>　　⑥修改两个方法均为静态同步方法，一个Data对象? //one two</p><p>　　⑦一个静态同步方法，一个非静态同步方法，两个 Data对象? //two one</p><p>　　⑧两个静态同步方法，两个 Data对象? //one two</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    Data date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        date1<span class="token punctuation">.</span><span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 睡眠一秒</span>    TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        date1<span class="token punctuation">.</span><span class="token function">two</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Data</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">two</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">three</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h2><blockquote><p>ReadWriteLock </p><p>读时可以多个线程同时读, 写的时候只有一个线程去写</p></blockquote><p>独占锁: 读锁: 只允许一个线程持有锁</p><p>共享锁: 多个线程共享的一个锁</p><p>例子:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 读写一个类似缓存的东西</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Cache cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建20个线程写入</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> temp <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// lambda 需要final传递变量</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> cache<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 创建10个线程读取</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> temp <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> cache<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Cache</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">volatile</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> cacacheMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> ReadWriteLock readWriteLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写操作 独占锁 用写锁</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                readWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread:"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"==写入"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                cacacheMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread:"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"==成功"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                readWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 读操作 共享的所以用读锁</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread:"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"==读"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                cacacheMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread:"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"==成功读"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="并发下的集合问题"><a href="#并发下的集合问题" class="headerlink" title="并发下的集合问题"></a>并发下的集合问题</h2><h3 id="COW写时拷贝"><a href="#COW写时拷贝" class="headerlink" title="COW写时拷贝"></a>COW写时拷贝</h3><p>要了解一个思想 叫做 COW 即 写时拷贝 (copy - on - write)</p><blockquote><p>计算机程序设计领域的一种优化策略;</p></blockquote><p>当然也有 用读写分离的手法解决</p><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><ul><li>众所周知, ArrayList是线程不安全的所以如果并发修改或者添加 就会产生<strong>并发修改异常</strong>(ConcurrentModifyException) <code>java.util.ConcurrentModificationException</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 测试异常的代码</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Integer i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 50个线程写入</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 随机一个3位的id</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>解决办法:</p><ul><li>使用线程安全的集合 vector:</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// vector 加了synchronized 锁</span>源码<span class="token operator">:</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">addElement</span><span class="token punctuation">(</span>E obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token function">ensureCapacityHelper</span><span class="token punctuation">(</span>elementCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    elementData<span class="token punctuation">[</span>elementCount<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>用一个集合工具类实现安全线程Collections.synchronizedXXX</li></ul><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>使用JUC的安全集合 CopyOnWriteAArrayLis();</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用了COW</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> newElements <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newElements<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token function">setArray</span><span class="token punctuation">(</span>newElements<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><ol><li>collections的线程安全方法</li><li>cowSet</li></ol><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>set底层实现是根据Hashmap实现的 (key唯一, value 是一个固定的对象) map具体的实现方式</p><p><a href="#">关于Hashmap</a></p><h2 id="并发使用-ConcurrentHashMap"><a href="#并发使用-ConcurrentHashMap" class="headerlink" title="并发使用 ConcurrentHashMap"></a>并发使用 ConcurrentHashMap</h2><blockquote><p>挖坑 为什么好用 实现方式 并发安全方式</p></blockquote><h2 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token punctuation">{</span>  V <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>类似于Runnable 其实例都是可能由另一个线程执行设计的.但是Callable 有返回结果&lt;这个Type就是返回类型&gt; 有一个异常</p><ul><li>Thread没有Callable接口的直接实现 要通过Runnable 的FutureTask 实现</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CallableDEmo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        MYhread mYhread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MYhread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FutureTask<span class="token operator">&lt;</span>String<span class="token operator">></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>mYhread<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">,</span> <span class="token string">"222"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// get 方法可能阻塞</span>        <span class="token comment" spellcheck="true">//     会有缓存</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MYhread</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"====Back"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"back"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="三个辅助类"><a href="#三个辅助类" class="headerlink" title="三个辅助类"></a>三个辅助类</h3><blockquote><p>CountDownLatch</p></blockquote><p>一个倒计数工具  </p><p> <code>构造方法</code>有一个int 数据 </p><ul><li>countDown() 计数减一 </li><li>await()  调用此方法会让该当前线程等待 计数器直到计数器归零 </li></ul><blockquote><p>CyclicBarrier</p></blockquote><p>和上面的相反 是正向计数</p><p>  <code>构造方法</code>  1. int a 2, int a, Runnable 线程</p><p>也有await方法 ： 同一个线程内的方法</p><blockquote><p>Semaphore 信号量</p></blockquote><p>可以理解为限流 构造方法 有线程数</p><p> 如果位置数量为3  线程数为6就需要排队 </p><p>acquire() 获取/release() 释放</p><p>在 semaphore.acquire() 和 semaphore.release()之间的代码，同一时刻只允许指定个数的线程进入，其他线程等待</p><hr><ul><li>CountDownLatch 是一次性的，CyclicBarrier 是可循环利用的</li><li>CountDownLatch 参与的线程的职责是不一样的，有的在倒计时，有的在等待倒计时结束。CyclicBarrier 参与的线程职责是一样的</li></ul><h2 id="并发队列"><a href="#并发队列" class="headerlink" title="并发队列"></a>并发队列</h2><h3 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h3><p><code>BlockingQueue</code></p><p><img src="https://i.loli.net/2020/09/27/3cyaRXPigpKCjA6.png" alt="阻塞队列"></p><p>四种不同应用场合的API</p><table><thead><tr><th></th><th>抛出异常</th><th>有返回值</th><th>阻塞</th><th>等待阻塞()</th></tr></thead><tbody><tr><td>添加</td><td>add</td><td>offer</td><td>put</td><td>offer(E e, long timeout, TimeUnit unit)</td></tr><tr><td>移除</td><td>remove</td><td>poll</td><td>take</td><td>poll(E e, long timeout, TimeUnit unit)</td></tr><tr><td>检测队首元素</td><td>element</td><td>peek</td><td>-</td><td>-</td></tr></tbody></table><blockquote><p> 原理(待完成)</p></blockquote><h3 id="同步队列"><a href="#同步队列" class="headerlink" title="同步队列"></a>同步队列</h3><p><code>SynchronousQueue</code>   </p><ul><li>不存储数据 </li><li>添加一个等待取出一个</li></ul><h2 id="线程池-重要"><a href="#线程池-重要" class="headerlink" title="线程池(重要)"></a>线程池(重要)</h2><blockquote><p> 池化技术(一种思想)</p></blockquote><p>程序运行使用系统的资源. 对其优化 就使用<strong>池化技术</strong></p><p>将资源创建好 需要的化就来取. 用完也不销毁 而是放回池子中 </p><p>线程池, 连接池, 内存池, 对象池….</p><ul><li>优点和好处</li></ul><ol><li>降低资源的消耗</li><li>提高响应的速度</li><li>方便统一管理 ……</li></ol><p>==线程复用 , 可以控制更大的并发量 ,==</p><blockquote><p> 线程池的  <code>四(五)个创建方法</code>, <code>七大参数</code>,<code>四种策略</code></p></blockquote><h3 id="三个方法"><a href="#三个方法" class="headerlink" title="三个方法"></a>三个方法</h3><p>线程池工具类: Exectors</p><ul><li><code>newCachedThreadPool</code>   <strong>灵活的</strong>创建一个可缓存的线程池，如果线程池长度超过处理需求，可灵活回收空闲线程，若无可回收，则新建线程</li><li><code>newFixedThreadPool(int nThreads)</code> 创建一个定长线程池，可控制线程最大并发数，<strong>*\</strong>超出的线程会在队列中等待**</li><li><code>newScheduledThreadPool</code> 创建一个定长线程池，<strong>支持定时及周期性任务执行</strong></li><li><code>newSingleThreadExecutor</code> 创建一个单线程化的线程池</li></ul><p>在阿里的开发者手册中提到线程池的创建建议</p><p><img src="https://i.loli.net/2020/09/28/8XBYQKzxUTm5fsq.png" alt="image.png"></p><h3 id="七个参数"><a href="#七个参数" class="headerlink" title="七个参数"></a>七个参数</h3><p>上面四种创建方法都是用ThreadPoolExecutor创建的 所以可以直接用ThreadPoolExecutor来创建</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 核心线程大小</span>                          <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 最大核心线程数  </span>                          <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 超时时间设置</span>                          TimeUnit unit<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 单位</span>                          BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 阻塞队列</span>                          ThreadFactory threadFactory<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 线程工厂    </span>                          RejectedExecutionHandler handler<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 拒绝策略</span></code></pre><ul><li>图解一下这七个参数</li></ul><p>蓝色正常不会打开 而需要时才会开启</p><p><img src="https://i.loli.net/2020/09/29/8swyPAmX467x9Lg.png" alt="正常状态"></p><p><img src="https://i.loli.net/2020/09/29/lFGKJ1zEs6Nf2OR.png" alt="拒绝策略"></p><p>如果线程池和队列满了就会执行拒绝策略</p><h3 id="四种拒绝策略"><a href="#四种拒绝策略" class="headerlink" title="四种拒绝策略"></a>四种拒绝策略</h3><p>RejectedExecutionHandler 拒绝策略接口</p><ul><li>DiscardPolicy  默认的拒绝策略。直接抛出 java.util.concurrent.RejectedExecutionException异常</li><li>CallerRunsPolicy  将任务返还给调用者线程执行</li><li>DiscardPolicy  直接抛弃无法处理的任务，不予处理不抛异常。如果业务汇总<strong>允许任务丢失</strong>，这是最好的策略</li><li>DiscardOldestPolicy  抛弃队列中等待最久的任务，然后把当前任务加入队列中尝试再次提交当前任务</li></ul><blockquote><p>线程池代码</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CORE_POLL_SIZE <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_NUM_POLL_SIZE <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Long KEEP_ALIVWTIME <span class="token operator">=</span> 20L<span class="token punctuation">;</span>    <span class="token keyword">private</span> BlockingQueue workQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ThreadPoolExecutor <span class="token function">getThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> threadPoolExecutor<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> ThreadPoolExecutor threadPoolExecutor <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ThreadPoolTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadPoolExecutor pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>                CORE_POLL_SIZE<span class="token punctuation">,</span>                MAX_NUM_POLL_SIZE<span class="token punctuation">,</span>                KEEP_ALIVWTIME<span class="token punctuation">,</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                workQueue<span class="token punctuation">,</span>                Executors<span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        threadPoolExecutor <span class="token operator">=</span> pool<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadPoolTest threadPoolTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ThreadPoolExecutor threadPoolExecutor <span class="token operator">=</span> threadPoolTest<span class="token punctuation">.</span><span class="token function">getThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> finalI <span class="token operator">=</span> i<span class="token punctuation">;</span>            threadPoolExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前:"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"==="</span> <span class="token operator">+</span> finalI<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        threadPoolExecutor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="调优部分"><a href="#调优部分" class="headerlink" title="调优部分"></a>调优部分</h4><blockquote><p>如何定义这个最大的的线程数呢</p></blockquote><ol><li>cpu密集型 : 几核就用几个最大线程数 cpu利用率最大</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取机器核数</span><span class="token keyword">int</span> processors <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li>IO密集型: 大于 number(程序中十分消耗IO的线程数)的数量 (可以是number的两倍);</li></ol><h2 id="ForkJoin-大数据量"><a href="#ForkJoin-大数据量" class="headerlink" title="ForkJoin(大数据量)"></a>ForkJoin(大数据量)</h2><p>将 大任务分解为多个小任务 然后进行处理  – 递归</p><blockquote><p>工作窃取 利用(双端队列)</p><p>A, B 两个线程 A线程执行结束 </p><p>B线程还有任务  A就窃取B的任务去处理</p></blockquote><p>例子</p><ol><li>通过forkjoinpool来执行 </li><li>将任务 forkjoinpool.execute/forkjoinpool.submit(ForkJoinTask  task(任务))</li><li>任务类 要继承 ForkJoinTask(RecursiveTask是其中一个子类)</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">RecursiveTask</span><span class="token operator">&lt;</span>Long<span class="token operator">></span> <span class="token punctuation">{</span>       <span class="token keyword">long</span> temp <span class="token operator">=</span> 10000L<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//临界值</span><span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Long <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>end <span class="token operator">-</span> st<span class="token punctuation">)</span> <span class="token operator">&lt;</span> temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Long sum <span class="token operator">=</span> 0L<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> st<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> sum<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> l <span class="token operator">=</span> st <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> st<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            Demo d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>            d1<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Demo d2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>            d2<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> d1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> d2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 三种方法实现 1 - 40亿的相加</span><span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">long</span> x <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> x1 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum"</span> <span class="token operator">+</span> sum <span class="token operator">+</span> <span class="token string">"time:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x1 <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> sum <span class="token operator">=</span> 0L<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> 40_0000_0000L<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        ForkJoinPool pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Demo demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span>0L<span class="token punctuation">,</span> 40_0000_0000L<span class="token punctuation">)</span><span class="token punctuation">;</span>        ForkJoinTask<span class="token operator">&lt;</span>Long<span class="token operator">></span> submit <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> submit<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Stream 并行流</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> LongStream<span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span>0L<span class="token punctuation">,</span> 40_0000_0000L<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Long<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果:</p><blockquote><p>数据量越大越能体现出区别</p><ol><li><p><strong>for循环相加:</strong>  time:3427 </p></li><li><p><strong>ForkJoin:</strong>  time:13310 /time:10786(更改了临界值)  和这个也有关系</p></li><li><p>stream并行流计算(内部实现的是ForkJoin)time:7933 </p></li></ol></blockquote><p>这里发现 for循环 要比其他的快 : 其实ForkJoin 和并行流都是并发的操作 根据CPU的性能决定的 但是就算你的任务拆分了 系统性能不支持 并行操作  / 或者说没有那么多资源满足你的操作 那么速度当然会比单线程的慢</p><p>并不是所有操作中并发操作一定效率高</p><h2 id="JAVA异步通信"><a href="#JAVA异步通信" class="headerlink" title="JAVA异步通信"></a>JAVA异步通信</h2><p>在多线程中 获取现成的返回值 或者返回状态(成功 失败 异常…) (AJAX的方式很像)</p><ul><li>为了实现 回调  / 异步编程</li></ul><p><a href="https://www.jianshu.com/p/6f3ee90ab7d3/" target="_blank" rel="noopener">CompletableFuture几个方法</a></p><p>Future(父)   new CompletableFuture()(子类);</p><p>runAsync(Runnable) 无返回值的异步调用 </p><p>supplyAsync(Runnable) 有返回值</p><h2 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h2><ul><li>什么是JMM(java memory model)</li></ul><p>JMM: java内存模型, 一种规则, 概念, 约定. 主要规定了线程和内存之间的一些关系 为了解决多线程和共享内存进行通信是的问题. </p><p><strong>约定:</strong></p><ol><li>线程解锁前, 必须把共享变量==立即==刷新回主存</li><li>线程加锁前, 必须读取主存中的最新值到工作内存</li><li>线程 有工作内存, 主内存</li></ol><p>JMM和JVM没有什么关系 但都提供了系统的可移植性</p><ul><li>JMM的实现:</li></ul><p><img src="https://i.loli.net/2020/10/03/312ni4afCugcPwT.png" alt="image.png"></p><ul><li>问题的出现</li></ul><p><img src="https://i.loli.net/2020/10/03/rN9vclqCeQuGZxW.png" alt="image.png"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 线程一</span>            <span class="token comment" spellcheck="true">// 如果不作处理</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 确保上面的线程可以先执行</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 线程二</span>            num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 线程一不知道被修改了</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>注: 并不是所有条件下都会出现问题 和系统环境有关系 但是加上volatile一定不会出现问题</p></blockquote><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><p>Volatile是java虚拟机提供的<strong>轻量级的同步机制</strong></p><ol><li>保证了内存可见性</li></ol><p>上面的多线程问题只要加上volatile关键字修饰变量就可以解决</p><p><code>private volatile static int num = 1;</code></p><ol start="2"><li>但是不保证原子性</li></ol><p>使用JUC自带的原子类和操作 就可以保证原子性</p><h3 id="3-禁止了指令重排序"><a href="#3-禁止了指令重排序" class="headerlink" title="3. 禁止了指令重排序"></a>3. 禁止了指令重排序</h3><blockquote><p>什么是指令重排</p></blockquote><ul><li>说白了就是 某些情况 计算机的CPU并不会哪找你写的程序的顺序去执行 他会自己重新优化排序</li><li>编译器 – 并行指令 – 内存系统 这些地方都会有重排的可能发生</li></ul><blockquote><p>volatile 避免指令重排</p></blockquote><ul><li>当有用Volatile关键字时 在执行时会加上内存屏障 防止指令的重排序</li><li>也保证了内存的可见性</li></ul><h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><blockquote><p>什么是CAS(CompareAndSet): 比较并交换</p></blockquote><p>举个例子  原子整形中 compareAndSet操作</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果是期望值 那么久更新 否则就不更新 CAS是CPU执行并发的一种方式</span>    AtomicInteger atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>compareAndSet源码就会有unsafe类 这些原子操作都会用到这个类里面很多native的方法</p><p><img src="https://i.loli.net/2020/10/03/wqRsgcjhiNWrHO5.png" alt="image.png"></p><ul><li><p>因为java无法操作内存 但是可以调用C++来操作内存 (本地的native方法)</p></li><li><p>用自旋锁循环判定是否满足条件</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndAddInt</span><span class="token punctuation">(</span>Object var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> <span class="token keyword">int</span> var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">int</span> var5<span class="token punctuation">;</span>   <span class="token keyword">do</span> <span class="token punctuation">{</span>       var5 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getIntVolatile</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">,</span> var5<span class="token punctuation">,</span> var5 <span class="token operator">+</span> var4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> var5<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="自旋锁产生的ABA问题"><a href="#自旋锁产生的ABA问题" class="headerlink" title="自旋锁产生的ABA问题"></a>自旋锁产生的ABA问题</h3><p><img src="C:%5CUsers%5C25778%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201003195829532.png" alt="image-20201003195829532"></p><p>这就是ABA问题</p><ul><li>循环时间太长开销也会变得很大: 加入pause 指令<ol><li>延迟流水线执行指令(de-pipeline), 使cpu不会消耗过多的资源</li><li>可以避免退出循环的时候 因内存顺序冲突(Memory Order Violation) 引起的CPU流水线被清空</li></ol></li></ul><h4 id="原子引用"><a href="#原子引用" class="headerlink" title="原子引用"></a>原子引用</h4><p>乐观锁的思想</p><p>使用原子引用来解决这个问题</p><p>引入一个版本号的思想:</p><p><img src="https://i.loli.net/2020/10/03/vguV8iRorBGez6P.png" alt="image.png"></p><p>截取一部分</p><pre class=" language-java"><code class="language-java">AtomicStampedReference<span class="token operator">&lt;</span>String<span class="token operator">></span> atomicReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicStampedReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"2222"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 初始值和版本戳</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> stamp <span class="token operator">=</span> atomicReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A-stamp: "</span> <span class="token operator">+</span> stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>        atomicReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token string">"2222"</span><span class="token punctuation">,</span> <span class="token string">"21"</span><span class="token punctuation">,</span> stamp<span class="token punctuation">,</span> stamp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicReference<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 修改成功 就是21</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>==注意:== 在Java的CAS底层实现中 比较两个值是否相等时用的是<strong>==</strong> 对于自动装箱的包装类(Integer等) 会出现不相等的问题 (自动装箱的缓存问题, 我就不细说了) </p></blockquote><h2 id="各种锁"><a href="#各种锁" class="headerlink" title="各种锁"></a>各种锁</h2><p><strong>锁的类型:</strong></p><ul><li><p>可重入锁(递归所)（synchronized和ReentrantLock）：在<strong>执行对象中</strong>通用一把锁的方法<strong>不用再次获得锁</strong>(synchronized 和 Lock 都是可重入锁)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">synchronized</span> 和 Lock区别Lock锁 加锁解锁是成对的 获取道A的锁时 默认也获取到了B的锁<span class="token comment" spellcheck="true">// -------------------</span><span class="token keyword">synchronized</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">synchronized</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ---------------------------</span><span class="token comment" spellcheck="true">// 如果有线程获取到A方法的锁就默认也获取了B方法的锁 所以 A没有执行结束 B方法是被锁住的状态</span></code></pre></li><li><p>可中断锁（synchronized就不是可中断锁，而Lock是可中断锁）：在等待获取锁过程中可中断</p></li><li><p>公平锁/<strong>非公平锁</strong>（ReentrantLock和ReentrantReadWriteLock）： 按照先来后到排队  / <strong>按等待获取锁的线程的等待时间进行获取，等待时间长的具有优先获取锁权利</strong>(默认都是非公平锁)</p></li><li><p>读写锁（ReadWriteLock和ReentrantReadWriteLock）：对资源读取和写入的时候拆分为2部分处理，读的时候可以多线程一起读，写的时候必须同步地写</p></li><li><p>自旋锁  循环判断锁的状态 </p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SjsLock</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> AtomicReference<span class="token operator">&lt;</span>Thread<span class="token operator">></span> threadAtomicReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 大概写一下</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"==get LOCK ing..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>threadAtomicReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> thread<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"锁被拿走了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"==GET success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadAtomicReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>thread<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"unlock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="死锁的排查"><a href="#死锁的排查" class="headerlink" title="死锁的排查"></a>死锁的排查</h3><p>死锁四要素 <a href="https://www.cnblogs.com/bopo/p/9228834.html" target="_blank" rel="noopener">https://www.cnblogs.com/bopo/p/9228834.html</a></p><p><code>JPS - l</code>(查看进程) : <a href="https://blog.csdn.net/u013250071/article/details/80496623" target="_blank" rel="noopener">https://blog.csdn.net/u013250071/article/details/80496623</a></p><p><code>jstack - 进程号</code>(查看堆栈信息) 来排查:</p>]]></content>
      
      
      <categories>
          
          <category> 课程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA注解</title>
      <link href="/2020/06/05/JAVA%E6%B3%A8%E8%A7%A3/"/>
      <url>/2020/06/05/JAVA%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="基本概述"><a href="#基本概述" class="headerlink" title="基本概述"></a>基本概述</h2><blockquote><ul><li>Annotation(注解):<ol><li>作用:<ol><li>对程序作出解释(和注释(comment)一样)</li><li>可以被其他程序读取(编译器等)</li></ol></li><li>格式 – @注释名(参数)</li><li>作用于package/class/method/field等上, 给他们添加了额外的辅助信息,可以通过反射机制对这些元数据进行访问</li></ol></li></ul></blockquote><h2 id="部分常见注解"><a href="#部分常见注解" class="headerlink" title="部分常见注解"></a>部分常见注解</h2><blockquote><ol><li><strong>@Override:</strong> 重写超累的方法 </li><li><strong>@Deprecated:</strong> 定义为废弃的,不推荐使用, 或者有更好的选择</li><li><strong>SuppressWarnings:</strong> 用来抑制编译时 的警告信息(强迫症福利??) 有参数:<ol><li>(“all”)/(“Unchecked”)/(value = {“unchecked”,”deprecation”})</li></ol></li></ol></blockquote><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><blockquote><p>元注解(Meta-Annotation) 用来注解其他注解, java提供了四个标准元注解</p><ul><li><p>这些类型和支持的类在(java.lang.annotation)包中</p><ol><li><strong>@Target:</strong> 描述作用范围</li><li><strong>@Retention:</strong> 表示保存注释的级别, 描述注释的生命周期(SOURCE&lt;CLASS&lt;<strong>RUNTIME</strong>)</li><li><strong>@Document:</strong> 说明该注释被包含在javadoc中</li><li><strong>@Inherited:</strong> 说明子类可以<strong>继承</strong>父类的注释</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 描述作用域(ElementTYpe)</span><span class="token comment" spellcheck="true">//    TYPE, //接口、类、枚举、注解</span><span class="token comment" spellcheck="true">//    FIELD,//字段、枚举的常量</span><span class="token comment" spellcheck="true">//    METHOD,  //方法</span><span class="token comment" spellcheck="true">//    PARAMETER,  //方法参数</span><span class="token comment" spellcheck="true">//    CONSTRUCTOR,   //构造函数</span><span class="token comment" spellcheck="true">//    LOCAL_VARIABLE,  //局部变量</span><span class="token comment" spellcheck="true">//    ANNOTATION_TYPE, //注解</span><span class="token comment" spellcheck="true">//    PACKAGE   //包</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 生命周期(RetentionPolicy)</span><span class="token comment" spellcheck="true">//    SOURCE, // 源码</span><span class="token comment" spellcheck="true">//    CLASS,  // 类</span><span class="token comment" spellcheck="true">//    RUNTIME // 运行时</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>value <span class="token operator">=</span> RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 在javaDoc中</span><span class="token annotation punctuation">@Documented</span><span class="token comment" spellcheck="true">// 子类可继承</span><span class="token annotation punctuation">@Inherited</span>@<span class="token keyword">interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li></ul></blockquote><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><blockquote><p>使用<strong>@interface</strong>来声明自定义注解,<kbd>public @interface name{内容}</kbd>  </p><ul><li>自动继承Annotation接口</li><li>对于参数<ol><li>格式:  <strong>类型 名称();</strong></li><li>内部每一个方法其实是个参数  返回值类型就是参数类型(只能是基本类)</li><li>可以通过default来默认参数</li><li>如果只有一个参数成员, 一般命名为Value</li><li>注解元素必须要有值,通常使用默认为: 空字符串和0</li></ol></li></ul></blockquote><pre class=" language-java"><code class="language-java"><span class="token operator">/</span> 定义作用域<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 定义生命周期</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>@<span class="token keyword">interface</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 参数格式: 类型 名字();</span>    <span class="token comment" spellcheck="true">// 如果只有一个参数建议使用value 因为填写参数时可以省略(value = )</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置默认值 如果为-1 则不存在</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">tel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><p>元注解灵活使用</p><p>通过反射来动态获取注解的参数 </p><pre class=" language-java"><code class="language-java">Class <span class="token class-name">userClass</span> <span class="token operator">=</span> User<span class="token punctuation">.</span>calss<span class="token punctuation">;</span>AnnotationName name<span class="token operator">=</span> userClass<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>annotationName<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
            <tag> Java注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA反射机制</title>
      <link href="/2020/06/05/JAVA%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/06/05/JAVA%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="反射概述"><a href="#反射概述" class="headerlink" title="反射概述"></a>反射概述</h2><h3 id="动静态语言"><a href="#动静态语言" class="headerlink" title="动静态语言"></a>动静态语言</h3><blockquote><ul><li>动态语言<ol><li>运行时可以改变其结构的语言:Object-c, C#, JavaScript, PHP, Python等</li></ol></li><li>静态语言<ol><li>运行时结构不可变的语言:Java,C,C++</li></ol></li></ul><p>但是! Java虽不是动态语言, 但可以称为<strong>“准动态语言”</strong>. 因为Java有一定的动态性,可以利用Java的<strong>反射机制</strong>获得动态语言的特性. 可以让编程更灵活</p></blockquote><h3 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h3><blockquote><p><strong>Reflection(反射)</strong> 是Java被视为动态语言的关键.反射机制是程序执行期间借助于Reflection API获取到<strong>任何类的内部信息,并能直接操作任意对象的内部属性和方法</strong></p><p>加载完类之后, 在堆内存的方法去中就产生了一个Class类型的对象(对于每个类是唯一一个), 这个对象包含了<strong>完整的类的结构信息</strong>. 通过这个对象看到类的结构. 这个对象像个镜子, 透过这个镜子看到了类的结构 ,所以我们叫反射<br><img src="https://i.loli.net/2020/06/06/1YROeXfwlsizrCS.png" alt="image.png"></p></blockquote><h3 id="JAVA反射机制的优缺点"><a href="#JAVA反射机制的优缺点" class="headerlink" title="JAVA反射机制的优缺点"></a>JAVA反射机制的优缺点</h3><blockquote><ul><li>优点: 很明显它实现了动态创建和编译, 大大增加灵活性</li><li>缺点: 对性能有影响,. 因为反射是一个解释操作, 告诉JVM,我们需要做什么来完成操作. 肯定慢于直接操作</li></ul></blockquote><h2 id="1-类加载和初始化的"><a href="#1-类加载和初始化的" class="headerlink" title="1. 类加载和初始化的"></a>1. 类加载和初始化的</h2><blockquote><p>想要了解反射机制先了解到底类加载是怎么运行的还有初始化时JVM发什么什么</p></blockquote><h3 id="类加载内存分析"><a href="#类加载内存分析" class="headerlink" title="类加载内存分析"></a>类加载内存分析</h3><blockquote><ul><li><p>Jvm中的内存部分:</p><ol><li><strong>堆:</strong> 存放new的对象和数组 (垃圾收集器,监控的就是这部分对象)  <ol><li>可被所有线程共享, 不会存放别的对象引用</li></ol></li><li><strong>栈:</strong> 存放基本变量类型(会包含这个基本类型的具体数值),引用对象的变量(存的是这个引用在堆里的地址)</li><li><strong>方法区:</strong> 可悲线程共享/ 包含所有的calss和static变量</li></ol></li><li><p>类加载的过程</p><p>当程序主动使用某个类, 如果该类还未被夹在到内存中, 则会发生下面的步骤:</p><p><img src="https://i.loli.net/2020/06/07/hqkj6iWFR1vc9Ga.png" alt="类加载的过程"></p><ol><li><strong>加载:</strong> 将class文件字节码加载到内存,将静态数据转换成方法去的运行时数据结构,然后生成一个java.lang.Class对象(堆).</li><li><strong>链接:</strong> 将二进制(字节码)代码合并到JVM运行状态中<ol><li>==验证==:确保加载的信息符合JVM规范</li><li>==准备==:正式为类变量(static)分配内存,并设置初值– Java对象变量的默认值</li><li>==解析==:虚拟机常量池内的符号引用(常量名)替换为直接引用(地址)</li></ol></li><li><strong>初始化:</strong> 执行类构造器的<clinit>()方法的过程: 下面细说</li></ol></li></ul></blockquote><h3 id="类的初始化-–-赋初值"><a href="#类的初始化-–-赋初值" class="headerlink" title="类的初始化 – 赋初值"></a>类的初始化 – 赋初值</h3><blockquote><ul><li><p>初始化:  顺序是: <strong><em>先静态对象，后非静态对象，且静态初始化动作只进行一次</em></strong> </p><ol><li>类构造器<clinit>()方法是由编译器自动收集类中<strong>所有</strong>的<strong>类变量</strong>赋值和<strong>静态</strong>代码块的操作(类构造器是构造类的, 不是构造该对象的)</li><li>如果初始化时发现父类没有初始化,则初始化父类</li><li>虚拟机会保证<clinit>()方法在多线程中能正确加锁和同步</li></ol><blockquote><p>clinit 只有静态才会生效 而且只有一次 init 在实例化时生效</p></blockquote><ul><li>实例化步骤为：先为属性分配空间，再执行赋默认值，然后按照顺序执行代码块或赋初始值，最后执行构造方法</li></ul></li><li><p>类什么时候初始化:</p><ol><li>类的主动引用(一定发生初始化)<ol><li>一定初始化main方法所在的类</li><li>new对象</li><li>通过类调用静态成员(除了final)和静态方法</li><li>反射调用(forName(“”))</li><li>如果初始化时发现父类没有初始化,则初始化父类</li></ol></li><li>类的被动引用(不会发生初始化)<ol><li>访问一个静态域时, 如果没有声明这个域的类(比如子类调用父类的静态变量)就不会初始化</li><li>通过数组定义引用 – 只会分配空间 (类A[] a = new 类A[len])</li><li>引用常量不会触发此类的初始化 ( 常量在链接阶段就存入了常量池)</li></ol></li></ol></li></ul><p><img src="https://i.loli.net/2020/06/30/pJrK6LaXGIATNFd.png" alt="JVM.png"></p></blockquote><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><blockquote><p>如果需要查找一个class对象的时候 先查找内存三种加载器一次查找 如果没有从底层加载器加载 如果都没有抛出ClassNotFoundException  或者调用自己加载器的findClass方法加装</p><ol><li>好处: 类不重复加载</li><li>不会产生核心类被后来的覆盖</li></ol><p><img src="https://i.loli.net/2020/09/14/FouWQYTv6GM8zdh.png" alt="双亲委派"></p></blockquote><blockquote><p>类加载器就是<strong>将class文件字节码内容加载到内存中</strong>,并将这些静态数据转换成方法去的运行时的数据结构,在堆中生成一个java.lang.class对象,作为访问入口</p><p>类缓存:  标准JavaSE类加载器,可以按要求查找类, 一旦某个类被夹在将有一段时间缓存</p><ol><li><p>引导类加载器: 底层由C++编写, java自带的加载器, <strong>负责java核心库(rt.jar)</strong>, 装在核心类库. 这个无法直接获取</p></li><li><p>扩展类加载器:负责jre/lib/ext下的jar包或者java.ext.dirs指定目录的jar加载</p><p><strong>sun.misc.Launcher$ExtClassLoader@1d4e2ba</strong></p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// 系统类的父类  扩展类 </span>ClassLoader parent <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>系统类加载器: 最常用的,负责java-classpath或java.class.path所指向的目录下的类与jar包的加载</p><p><strong>sun.misc.Launcher$AppClassLoader@dad5dc</strong></p><pre class=" language-java"><code class="language-java">   <span class="token comment" spellcheck="true">// 获取系统类加载器  </span>ClassLoader loader <span class="token operator">=</span> ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><p><kbd>系统类 -> 扩展类 -> 引导类</kbd> 以及自定义加载器</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 查看系统内类加载器可以加载的路径</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.class.path"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>   <img src="https://i.loli.net/2020/06/07/Dlpi7uRVcFm3MoT.png" alt="image.png"></p></blockquote><h2 id="Class对象"><a href="#Class对象" class="headerlink" title="Class对象"></a>Class对象</h2><blockquote><p>在Object类下有一个getClass()方法,返回值是一个Class类.所有类都默认继承Object类.<kbd>public final Class getClass()</kbd></p><p>是Java反射的源头, 所以反射理解为: 可以通过对象反射找到对应的类</p><p> <img src="https://i.loli.net/2020/06/06/9fyt2kRnvHcCihs.png" alt="image.png"></p></blockquote><h4 id="获取Class类的方法"><a href="#获取Class类的方法" class="headerlink" title="获取Class类的方法"></a>获取Class类的方法</h4><blockquote><ol><li><p>已知具体类, 通过class属性来获取, 该方法<strong>最为安全可靠</strong>,程序性能最高</p><pre class=" language-java"><code class="language-java">  Class<span class="token operator">&lt;</span>Cat<span class="token operator">></span> c1 <span class="token operator">=</span> Cat<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span></code></pre></li><li><p>已知某个类的实例,调用它的getClass方法获取Class对象</p><pre class=" language-java"><code class="language-java">Cat cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class <span class="token class-name">c3</span> <span class="token operator">=</span> cat<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ol><ol start="3"><li><p>已知一个类的<strong>限定类名</strong>,且在类路径下, 可以通过Class的静态方法forName()获取</p><pre class=" language-java"><code class="language-java">Class <span class="token class-name">c2</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.sjs.Reflect.Cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><ol start="4"><li><p>内置基本数据类型可以直接调用<strong>类名.Type</strong></p><pre class=" language-java"><code class="language-java">Class<span class="token operator">&lt;</span>Integer<span class="token operator">></span> type <span class="token operator">=</span> Integer<span class="token punctuation">.</span>TYPE<span class="token punctuation">;</span></code></pre></li></ol><ol start="5"><li><p>还可以用ClassLoader</p><blockquote><p>只要是获取到<strong>同一个类的Class对象都是一个对象</strong></p><pre class=" language-java"><code class="language-java">        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c3<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们把上面的对象用hashCode()输出数据相同</p></blockquote></li></ol></blockquote><h4 id="Class类的常用方法"><a href="#Class类的常用方法" class="headerlink" title="Class类的常用方法"></a>Class类的常用方法</h4><blockquote><ol><li><strong>Class getSuperClass():</strong> 返回当前类的父类</li><li><strong>static ClassforName(String name):</strong> 返回指定类名name的Class对象</li><li><strong>Object newInstance():</strong> 调用缺省构造函数,返回Class对象的一个实例</li><li><strong>getName():</strong> 返回Class对象所表示的实体(类, 接口等)的名称</li><li><strong>Class[] getInterfaces():</strong> 返回当前Class对象的接口 </li><li><strong>ClassLoader getClassLoader():</strong> 返回该类的类加载器</li></ol></blockquote><h2 id="2-获取类的运行时结构"><a href="#2-获取类的运行时结构" class="headerlink" title="2. 获取类的运行时结构"></a>2. 获取类的运行时结构</h2><blockquote><p>通过反射可以获取运行时的类的完整结构</p><p>​        反射创建类的Class对象<kbd>Class catCl = Class.forName("com.sjs.Reflect.Animal"); </kbd></p><ol><li><p>获取属性</p><pre class=" language-java"><code class="language-java">catCl<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取所有public属性</span>catCl<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取所有属性</span></code></pre></li><li><p>获取方法</p><pre class=" language-java"><code class="language-java">catCl<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取包括父类的所有public方法</span>catCl<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取其他权限的方法</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>catCl<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"方法名字"</span><span class="token punctuation">,</span> 参数类型<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取指定方法</span></code></pre></li><li><p>获取构造器</p><pre class=" language-java"><code class="language-java">   <span class="token comment" spellcheck="true">// 获取构造器</span>        catCl<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取 public所有构造器</span>        catCl<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取 public所有构造器</span></code></pre></li><li><p>等等,,,能获取到类的完整结构(接口,注解, 父类………)</p></li></ol></blockquote><h2 id="动态创建对象-调用运行时类中的结构"><a href="#动态创建对象-调用运行时类中的结构" class="headerlink" title="动态创建对象,调用运行时类中的结构"></a>动态创建对象,调用运行时类中的结构</h2><blockquote><ul><li><p>动态创建:</p><pre class=" language-java"><code class="language-java">Animal aninmalIns <span class="token operator">=</span> <span class="token punctuation">(</span>Animal<span class="token punctuation">)</span> animal<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 反射获得的类实例创建实例</span><span class="token comment" spellcheck="true">/*************************************************************************/</span> <span class="token comment" spellcheck="true">//调用指定构造器创建对象</span>Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> constructor <span class="token operator">=</span> animal<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 用参数来确定构造方法</span>constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置访问权限拦截(true不拦截) 因为这个构造是私有的</span>Object o <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"参数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>调用运行时的方法</p><pre class=" language-java"><code class="language-java">Animal animal1 <span class="token operator">=</span> <span class="token punctuation">(</span>Animal<span class="token punctuation">)</span> animal<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建出声明类实例</span><span class="token comment" spellcheck="true">// 调用方法</span><span class="token comment" spellcheck="true">// 创建出Method对象</span>Method setName <span class="token operator">=</span> animal<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"setName"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方法参数名字和类型</span>setName<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>animal1<span class="token punctuation">,</span> <span class="token string">"参数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 参数对象是声明类的实例</span></code></pre></li><li><p>调用属性</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">// 访问和修改属性</span>Field name <span class="token operator">=</span> animal<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 属性名称</span>name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 由于是私有修改拦截方式</span>name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>animal1<span class="token punctuation">,</span> <span class="token string">"tuyi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// set 将对象和参数传入</span></code></pre></li></ul></blockquote><blockquote><ul><li>class对象可以创建类的对象, 可以访问所有权限的方法和属性</li><li><strong>invoke(Object obj, Object args[])方法</strong>  用反射创建出Method对象,用此方法调用 ,参数是类的对象和参数</li><li><strong>setAccessible(boolen par)</strong> <ol><li>Method, Field, Constructor对象都有setAccessible()方法</li><li>是用来启动或者禁用访问安全检查的开关</li><li>true为取消java语言访问检察<ol><li><strong>提高反射效率</strong>, 如果必须用反射, 设置为true</li><li>可以访问私有结构</li></ol></li><li>false则为反射的对象开启Java语言访问检察</li></ol></li></ul></blockquote><h2 id="练习-通过注解和反射完成简单的类和表结构的映射关系-ORM"><a href="#练习-通过注解和反射完成简单的类和表结构的映射关系-ORM" class="headerlink" title="练习:通过注解和反射完成简单的类和表结构的映射关系(ORM)"></a>练习:通过注解和反射完成简单的类和表结构的映射关系(ORM)</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 注解类</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">DBAnnotation</span> <span class="token punctuation">{</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 库名</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>@<span class="token keyword">interface</span> <span class="token class-name">FieldsSJS</span> <span class="token punctuation">{</span>    String <span class="token function">column</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 列明</span>    String <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 数据类型</span>    <span class="token keyword">int</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 长度</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// pojo类</span><span class="token annotation punctuation">@DBAnnotation</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@FieldsSJS</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">"int"</span><span class="token punctuation">,</span> len <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@FieldsSJS</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">"varChar"</span><span class="token punctuation">,</span> len <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ORMExercise</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> InstantiationException <span class="token punctuation">{</span>        Class <span class="token class-name">studentDB</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.sjs.Exercise.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> studentDB<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DBAnnotation dbAnnotation <span class="token operator">=</span> <span class="token punctuation">(</span>DBAnnotation<span class="token punctuation">)</span> studentDB<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>DBAnnotation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前表是: "</span> <span class="token operator">+</span> dbAnnotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> studentDB<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>            FieldsSJS fieldsjs <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>FieldsSJS<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"类中的参数是:"</span> <span class="token operator">+</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"列名字:"</span> <span class="token operator">+</span> fieldsjs<span class="token punctuation">.</span><span class="token function">column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"长度:"</span> <span class="token operator">+</span> fieldsjs<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"类型:"</span> <span class="token operator">+</span> fieldsjs<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://i.loli.net/2020/06/08/euOnThtcEdpokG4.png" alt="image.png"></p><p>clinitclinit</p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OOP编程(面向对象)基础</title>
      <link href="/2020/05/31/OOP%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/05/31/OOP%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="OOP编程-面向对象-基础"><a href="#OOP编程-面向对象-基础" class="headerlink" title="OOP编程(面向对象)基础"></a>OOP编程(面向对象)基础</h1><h2 id="类与实例"><a href="#类与实例" class="headerlink" title="类与实例"></a>类与实例</h2><blockquote><ul><li><p>OOP: Object-Oriented Programming</p><ol><li>对象: 对象是一个自包含的实体,用一组可识别的特性和行为来标识</li><li>类: 类就是具有相同属性和功能的对象的抽象集合</li><li>实例: 一个真实的对象(实例化就是创建对象的过程)</li></ol><blockquote><p>类A name;             // 声明一个 <kbd>类A</kbd>的对象 叫name </p><p>name = new 类A();  // 将name对象实例化 </p></blockquote></li></ul></blockquote><h2 id="构造方法-方法重载"><a href="#构造方法-方法重载" class="headerlink" title="构造方法/方法重载"></a>构造方法/方法重载</h2><blockquote><ul><li>构造方法—构造函数,就是对类进行初始化. 在被new时调用 <ol><li>所有类都有个默认无参数构造方法,,如果你定义了构造方法,则默认的失效</li></ol></li><li>方法重载提供了创建同名的多个方法的能力, 需要<strong>参数类型</strong>,<strong>参数个数</strong>不同</li></ul></blockquote><h2 id="封装-继承和多态"><a href="#封装-继承和多态" class="headerlink" title="封装,继承和多态"></a>封装,继承和多态</h2><blockquote><ul><li><p>封装: 每个对象都包含它能进行操作所需要的所有信息, 这就是封装, 所以对象不必依赖其他对象来完成自己的操作,好处:</p><ol><li>良好的封装能降低耦合</li><li>类内部的实现可以自由修改</li><li>类有清晰的对外接口</li></ol></li><li><p>继承: 面向对象中  <em>is - a</em>  的关系,可以说为<em>是一个</em> 的关系 . (猫类继承动物类—猫是动物)    继承可使得修改和扩展 继承而来的实现 比较容易</p><ol><li>子类拥有父类非private的属性和功能</li><li>子类具有自己的属性和功能</li><li>子类可以通过自己的方式实现弗雷德功能(方法重写)</li><li>protected修饰的只对子类公开</li></ol></li><li><p>多态: 不同的对象可以执行相同的动作,但是要通过他们自己的实现代码执行(实现的结果一样,但是行为方式不同)</p><ol><li>子类以父类的身份出现</li><li>子类在工作时以自己的方式实现</li><li>子类以父类的身份出现是,子类特有的实行和方法不可使用</li></ol><pre class=" language-java"><code class="language-java">父 f1 <span class="token operator">=</span><span class="token keyword">new</span> 子（）；<span class="token comment" spellcheck="true">// 每个子类通过自己的方式完成</span></code></pre></li></ul></blockquote><h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><blockquote><p> 重构就是在不改变软件系统外部行为的前提下，改善它的内部结构。具体实现方式不同</p></blockquote><h2 id="抽象类-abstract"><a href="#抽象类-abstract" class="headerlink" title="抽象类(abstract)"></a>抽象类(abstract)</h2><blockquote><ul><li>Java可以把类和方法声明为abstract, 即抽象方法和抽象类<ol><li>抽象类不能实例化</li><li>抽象方法必须被自类重写</li><li>抽象方法必须在抽象类中</li></ol></li><li>抽象类拥有尽可能多的共同代码,尽可能少的数据<kbd>J&DP</kbd><ol><li>抽象类提供一个继承的出发点–一定使用来继承的</li><li>在一个继承关系里 – 树叶是具体类, 树枝是抽象类</li></ol></li></ul></blockquote><h2 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口(interface)"></a>接口(interface)</h2><blockquote><p>官方解释:Java接口是一系列方法的声明，是一些方法特征的集合，<strong>一个接口只有方法的特征没有方法的实现，因此这些方法可以在不同的地方被不同的类实现，而这些实现可以具有不同的行为（功能）</strong>。</p><ul><li><p>特性</p><ol><li>实现接口必须实现所有方法和属性</li><li>接口中的方法默认抽象的</li><li>Java只支持单一继承,但是可以实现多个接口,接口也可以被多个类实现</li></ol></li><li><p>接口回调:</p><pre class=" language-java"><code class="language-java">接口 Interface <span class="token operator">=</span><span class="token keyword">new</span> 实现（）； <span class="token comment" spellcheck="true">// 接口对象可以调用被实现类中的方法</span></code></pre></li><li><p>接口和抽象类</p><ol><li>类是对对象的抽象 ,抽象类是对对象的抽象, 接口是对行为的抽象</li><li>如果行为跨越不同的类—可以用接口; 对于一些相似的类对象–用继承抽象类</li><li>实现接口和继承抽象类可以一起用不冲突</li><li>从设计角度来说: 抽象类是从子类中发现了公共选项,泛化出来的(<strong>重构</strong>); 而接口是预先定义设计出来的</li></ol></li></ul></blockquote><h2 id="委托与事件"><a href="#委托与事件" class="headerlink" title="委托与事件"></a>委托与事件</h2><blockquote><p>一般我们在实现主要业务，一些辅助功能一般是父类(一般类或抽象类)中实现好了或者通过委托实现，大多数中一般使用父类，继承父类需要耦合在主类中，使用的委托的方式是解耦主类，使主类不知道谁帮我做了这些事，但是Java中没有对委托进行封装，则需要开发者自己实现。(待完成)</p></blockquote><h2 id="OOP编程的七大原则"><a href="#OOP编程的七大原则" class="headerlink" title="OOP编程的七大原则"></a>OOP编程的七大原则</h2><blockquote><ul><li><strong>开闭原则:</strong> 对扩展开放,对修改关闭(首要遵守)</li><li>*<em>里氏替换原则: *</em> 继承必须确保超类拥有的性质在子类中任然成立(尽可能不去重写父类)</li><li><strong>依赖倒置原则：</strong>摆脱面向过程中高层依赖底层, 抽象依赖于具体. 而是面向接口编程</li><li><strong>单一职责原则：</strong>控制累的粒度大小,将对象解耦合,高内聚(一个类的职责尽量单一)</li><li><strong>接口隔离原则：</strong> 为每个类建立属于它们需要的专用接口,使用多个专门的接口比使用单一的总接口要好。</li><li><strong>迪米特原则或最少知识原则：</strong> 只与直接朋友通信,或者通过朋友与陌生人传递消息</li><li><strong>合成服用原则:</strong>  关联关系优于继承关系。尽量使用 <strong>合成/聚合</strong>(has - a)、尽量不使用继承(is - a)。</li></ul></blockquote><h1 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h1><p>要做到低耦合</p><p>资源时独立的(只有 属性和方法)</p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
          <category> 抄书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OOP/OOD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8新特性</title>
      <link href="/2020/05/31/Java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2020/05/31/Java8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><p><img src="C:%5CUsers%5C25778%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200923231111293.png" alt="image-20200923231111293"></p><h1 id="Java8新特性"><a href="#Java8新特性" class="headerlink" title="Java8新特性"></a>Java8新特性</h1><h2 id="Lamda表达式"><a href="#Lamda表达式" class="headerlink" title="Lamda表达式"></a>Lamda表达式</h2><blockquote><p>λ表达式:</p><p>本质上也是函数式编程:</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> expression<span class="token punctuation">[</span>表达式<span class="token punctuation">]</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> statement<span class="token punctuation">[</span>语句<span class="token punctuation">]</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>statements<span class="token punctuation">}</span></code></pre><ul><li>使用原因<ol><li>避免匿名内部类过多</li><li>代码看上去简洁</li><li>去掉了冗余的代码,留下核心逻辑</li></ol></li><li>使用前提:<ol><li>一定是Function Interface(函数式接口) — Function Interface定义:  任何接口如果只包含唯一一个抽象方法, 那么这就是个函数式接口. 例如 Runnable</li></ol></li></ul></blockquote><p>例子:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 写一个函数式接口</span><span class="token keyword">public</span> Interface <span class="token class-name">TestInterface</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testmethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 用lamda创建接口对象</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 匿名内部类实现 ,(我觉得Lamda表达式是匿名内部类的简化)</span>    <span class="token keyword">new</span> <span class="token class-name">TestInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 重写方法</span>         <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testmethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 代码.....    </span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">testmethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当然有参数的就可以添加参数</span><span class="token comment" spellcheck="true">/*----------------------------------------------------*/</span>      <span class="token comment" spellcheck="true">// Lamda表达式</span>   <span class="token comment" spellcheck="true">//Interface test1 = (参数)->{方法体};</span>     Interface <span class="token class-name">test1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 代码....</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">testmethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="java四个函数式接口"><a href="#java四个函数式接口" class="headerlink" title="java四个函数式接口"></a>java四个函数式接口</h2><table><thead><tr><th></th><th>函数式接口</th><th>参数类型</th><th>返回值</th><th>用途</th></tr></thead><tbody><tr><td>1</td><td>Consumer<T><br/>     消费型接口</td><td>T(泛型)</td><td>void</td><td>对类型为T的对象应用操作</td></tr><tr><td>2</td><td>Supplier<T> <br>供给型接口</td><td>无</td><td>T</td><td>安徽类型为T的对象</td></tr><tr><td></td><td>Function&lt;T, K&gt;<br>函数型</td><td>T</td><td>R</td><td>参数有两个T和R –  R.apply(T t)</td></tr><tr><td>4</td><td>Prediction<T><br>判断断定型接口</td><td>T</td><td>Boolen</td><td>确定类型为T的对象是否满足约束,并且返回Boolean值</td></tr><tr><td>5</td><td>BiFunction&lt;T,U,R&gt;<br>可以传递两个参数的函数型接口</td><td>T,U</td><td>R</td><td>可以传递两个参数</td></tr><tr><td>6</td><td>UnaryOperator<T><br>Function的子接口</td><td>T</td><td>T</td><td>对类型为T的对象进行操作 返回 操作后的T</td></tr><tr><td>7</td><td>BinaryOperator<T><br>BiFunction子接口</td><td>T, T</td><td>T</td><td>二元运算</td></tr><tr><td>8</td><td>BiConsumer&lt;T, U&gt;</td><td>T U</td><td>void</td><td></td></tr><tr><td>9</td><td>ToIntFunction<T><br>ToLongFunction<T><br>ToDoubleFunction<T></td><td>T</td><td>int<br>Long<br/>double</td><td>传参数返回不同类型数值</td></tr><tr><td>10</td><td>IntFunction<R><br/>LongFunction<R><br/>DoubleFunction<R></td><td>int<br/>Long<br/>double</td><td>R</td><td>不同参数类型返回R</td></tr></tbody></table><p>Java巧用lambda，使用函数式接口 和lambda 可以让程序异步执行 (另外写一下) <a href="https://www.jianshu.com/p/8a7aa7f93ddc?utm_campaign=hugo" target="_blank" rel="noopener">可以看这里</a></p><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><blockquote><p>若lambda体中的方法内容被实现了 就可以用<strong>方法引用</strong>的方式实现</p></blockquote><ul><li>对象::实例方法名</li><li>类::静态方法</li><li>类::实例方法</li></ul><p><strong>使用 方法引用的方法的  ==方法的参数和返回值==  一定要和对应接口中  ==方法的参数和返回值==相等</strong></p><p>构造方法: 类A::new 会根据接口的 返回值和参数 自动匹配构造器</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">method</span><span class="token punctuation">(</span>StreamDemo<span class="token operator">:</span><span class="token operator">:</span>_TEST<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">_TEST</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"操作1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"000"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>MyFunction s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"real"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>out<span class="token operator">:</span><span class="token comment" spellcheck="true">/*操作1000real*/</span></code></pre><h2 id="stream流计算"><a href="#stream流计算" class="headerlink" title="stream流计算"></a>stream流计算</h2><blockquote><p>流式计算</p></blockquote><p>在项目中数据存储在数据库 集合等地方. 数据的处理就要交给流来计算</p><blockquote><p> 操作步骤</p></blockquote><ol><li>创建Stream流</li></ol><p>根据数据源 集合 数组中创建</p><ol start="2"><li>根据API操作数据</li></ol><p>一个操作链进行选择排序,,,</p><ol start="3"><li>结束/终止操作</li></ol><p>执行操作了链条产生结果    可以使用java7的try-with-resources</p><p><a href="https://www.runoob.com/java/java8-streams.html" target="_blank" rel="noopener">API看这里</a></p><p>举个🌰</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// id,age,name.major</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">"sjs"</span><span class="token punctuation">,</span> <span class="token string">"jsj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">"zs"</span><span class="token punctuation">,</span> <span class="token string">"dzx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token string">"ls"</span><span class="token punctuation">,</span> <span class="token string">"dzx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">"ww"</span><span class="token punctuation">,</span> <span class="token string">"xx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">"lb"</span><span class="token punctuation">,</span> <span class="token string">"dzx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token string">"hhh"</span><span class="token punctuation">,</span> <span class="token string">"jsj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> s3<span class="token punctuation">,</span> s3<span class="token punctuation">,</span> s4<span class="token punctuation">,</span> s5<span class="token punctuation">,</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 根据集合创建一个流并操作</span>        <span class="token comment" spellcheck="true">/*         * 去重         * 找到id是偶数的         * age 大于14的         * 逆序排列         * */</span>        Stream<span class="token operator">&lt;</span>Student<span class="token operator">></span> stream <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> a<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">filter</span><span class="token punctuation">(</span>a <span class="token operator">-</span><span class="token operator">></span> a<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">map</span><span class="token punctuation">(</span>a <span class="token operator">-</span><span class="token operator">></span> a<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> b<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> a<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK1.8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2020/05/31/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/05/31/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式-大话设计模式"><a href="#单例模式-大话设计模式" class="headerlink" title="单例模式 - 大话设计模式"></a>单例模式 - 大话设计模式</h1><p><strong><em>每一个模式描述了一个在我们周围不断重复发生的问题,以及该问题的解决方案的核心。</em></strong></p><h2 id="单例模式-Singleton"><a href="#单例模式-Singleton" class="headerlink" title="单例模式(Singleton)"></a>单例模式(Singleton)</h2><blockquote><p>保证一个类仅有一个实例, 并提供一个访问的全局访问点[^ DP]</p><p>为了不实例化出多个对象,让类自身<strong>负责</strong>保存他的唯一实例. 这个类可以保证没有其他实例可以被创建, 并且他可以提供一个访问该实例的方法</p><p><img src="https://i.loli.net/2020/06/02/epTE4LbXZkhvYFW.png" alt="单例模式"></p><p>单例模式因为Singleton类封装了他唯一的实现类, 可以严格控制客户怎样访问以及何时访问它.—对唯一实例的受控访问</p><p>示例代码:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// private的实例变量</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"you win!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 私有的构造方法 让其他类不能访问</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果实例为空则创建</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></blockquote><h2 id="多线程单例模式"><a href="#多线程单例模式" class="headerlink" title="多线程单例模式"></a>多线程单例模式</h2><blockquote><p>在多个线程中, 单例模式会出现多个线程同时访问Singleton类, 会出现创建了多个实例的情况.   所以我们给他加<strong>锁</strong></p></blockquote><h2 id="双重锁定"><a href="#双重锁定" class="headerlink" title="双重锁定"></a>双重锁定</h2><blockquote><p>当然加锁后每个线程想访问Singleton类都要等待了, 所以我们优化一下 —  双重锁定</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton intance<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// private的实例变量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Object synchronizedLOCK <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 锁对象</span>    <span class="token comment" spellcheck="true">//只有static的成员才能在没有创建对象时进行初始化。且类的静态成员在类第一次被使用时初始化后就不会再被初始化，保证了单例</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"you win!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 私有的构造方法 让其他类不能访问</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getIntance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>intance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>synchronizedLOCK<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>intance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    intance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 如果实例为空则创建</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> intance<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></blockquote><h2 id="饿汉-懒汉单例类"><a href="#饿汉-懒汉单例类" class="headerlink" title="饿汉/懒汉单例类"></a>饿汉/懒汉单例类</h2><blockquote><ul><li><p>饿汉</p><ol><li>静态初始化的方式在自己被加载时就将自己实例化</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHungry</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SingletonHungry intance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonHungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SingletonHungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Creat new !!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonHungry <span class="token function">getIntance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> intance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>懒汉</p><ol><li>在第一次被引用时,才会将自己实例化</li></ol></li><li><p>优缺点: 饿汉类一加载就实例出对象, 会提前占用系统资源.     懒汉面临多线程访问的单圈问题,要加双重锁定. 具体用哪个取决于实际需求</p></li><li><p><strong>具体用哪个取决于实际需求</strong></p></li></ul></blockquote><h3 id="懒汉下防止指令重排序"><a href="#懒汉下防止指令重排序" class="headerlink" title="懒汉下防止指令重排序"></a>懒汉下防止指令重排序</h3><p>创建实例的方式<kbd>intance = new  Singleton();</kbd> 这不是一个原子性的操作</p><p>执行实例化时有三步的</p><ol><li>分配内存空间</li><li>执行构造方法,初始化对象</li><li>将对象指向分配的空间</li></ol><blockquote><p>如果指令2和3重排 那么创建的就是空对象… </p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> Singleton intance<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 加入volatile防止重排</span></code></pre><blockquote><p>防止反射破坏单例模式</p></blockquote><p>使用 一个加密的 开关参数(可以破译)</p><p>使用枚举 反射源码不允许创建枚举的实例  枚举是一个继承了Enum的类</p>]]></content>
      
      
      <categories>
          
          <category> 大话设计模式 </category>
          
          <category> 抄书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GOF-23 </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/2020/05/31/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/05/31/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="代理模式-大话设计模式"><a href="#代理模式-大话设计模式" class="headerlink" title="代理模式 - 大话设计模式"></a>代理模式 - 大话设计模式</h1><p><strong><em>每一个模式描述了一个在我们周围不断重复发生的问题,以及该问题的解决方案的核心。</em></strong></p><p>啊哈<a href="我可真能拖">^ =.= </a> :expressionless:</p><h2 id="代理模式-Proxy"><a href="#代理模式-Proxy" class="headerlink" title="代理模式(Proxy)"></a>代理模式(Proxy)</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><blockquote><p><strong>为其他对象提供一种代理 以控制对这个对象的访问(DP).</strong></p><ul><li>角色:<ol><li>抽象角色: 用接口或者抽象类来实现(真实对象和代理对象的共同方法)</li><li>真实角色: 被代理的角色</li><li>代理角色: 代理真是角色 当然可以扩展其他业务</li><li>客户端: 具体操作 通过代理类访问代理对象</li></ol></li><li>好处<ol><li>可以使真实角色的业务更纯粹! 其他的公共业务和扩展业务不用考虑</li><li>实现了业务的分工 – 公共业务交给代理类</li><li>公共业务发生扩展时, 方便管理 (解耦)</li></ol></li><li><strong>静态代理缺点</strong>显然很明显:  代理只能服务一个类, 要是想代理很多类就要构建多个代理类 </li></ul></blockquote><blockquote><p><img src="https://i.loli.net/2020/09/14/RLpAM1TtmGndJFD.png" alt="代理模式实现"></p><p>代码部分</p><pre class=" language-java"><code class="language-java">            <span class="token comment" spellcheck="true">/* 公用接口类 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义 RealSubject和Proxy的公共方法</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>            <span class="token comment" spellcheck="true">/* 代理类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">extends</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 保存一个引用 使得代理可以访问实体 , 继承了同一个接口 所以可以实现真实实体的所有请求</span>    <span class="token keyword">private</span> RealSubject realSubject<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 组合形式获取</span>    <span class="token comment" spellcheck="true">// 在Spring框架中推荐使用 set方法来获取对象</span>    <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>realSubject <span class="token operator">==</span> null<span class="token punctuation">)</span> realSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        realSubject<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用真实的方法</span>        <span class="token comment" spellcheck="true">// 当然可以加点东西</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 扩展的业务</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增加了日志方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>          <span class="token comment" spellcheck="true">/* 真实实体类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RealSubject</span> <span class="token keyword">extends</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 代理类代理的真实实体</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实际的请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token comment" spellcheck="true">// 客户端</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Proxy p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 通过代理访问真实的方法</span><span class="token punctuation">}</span></code></pre></blockquote><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><blockquote><ul><li><strong>远程代理</strong><ol><li>就是为一个对象在不同的地址空间提供据不同代表.  这样可以隐藏一个对象存在于不同地址空间的事实</li></ol></li><li>虚拟代理<ol><li>是根据需要创建开销很大的对象. 通过它存放实例化需要很长时间的对象.</li></ol></li><li>安全代理<ol><li>用来控制真实对象访问时的权限.  </li></ol></li><li>只能指引<ol><li>是指当调用真实对象时, 代理处理另外一些事</li></ol></li></ul></blockquote><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><blockquote><p>当然以上是静态代理的实现</p><p><strong>静态代理缺点</strong>显然很明显:  代理只能服务一个类, 要是想代理很多类就要构建多个代理类 </p><blockquote><ul><li>用反射机制构建动态代理</li><li>动态代理的代理类是动态生成的</li><li>动态代理分为两大类 – 基于接口 – 基于类<ol><li>基于接口: JDK动态代理</li><li>基于类: cglib</li><li>java字节码实现: javasist</li></ol></li><li>需要 Proxy 和InvocationHandler 两个类来创建动态代理类</li></ul></blockquote><blockquote><p><strong>JDK动态代理</strong>: 和静态代理共同的是都要有<strong>真实实体类和接口</strong></p></blockquote><p> 实体类和接口:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 接口</span> <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义 RealSubject和需要被代理的方法方法</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 真实实体类</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RealSubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 代理类代理的真实实体</span>  <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实际的请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p> 动态代理实现:</p><blockquote><p> <strong>InvocationHandler</strong>是个接口: 只有一个invoke方法  此方法在生成了一个 $Proxy.class 文件中被调用– (具体源码)[<a href="https://www.cnblogs.com/liuyun1995/p/8157098.html]" target="_blank" rel="noopener">https://www.cnblogs.com/liuyun1995/p/8157098.html]</a></p><p><strong>Proxy</strong>提供了创建动态代理类的静态方法</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建动态代理工具 -- 实现接口</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProxyInvocationHandlerTemplate</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> Object target<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 目标接口 -- 改为可复用的Obj类</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTarget</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">public</span> Object <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 三个参数 1. 类加载器 2. 反射回去接口 3. InvocationHandler(就是本身)</span>         <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>         <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 扩展业务</span>         Object o <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> o<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 扩展业务</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"haha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p> 客户端:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//        p.method(); // 通过代理访问真实的方法</span>         <span class="token comment" spellcheck="true">// 动态代理</span>         <span class="token comment" spellcheck="true">// 实例动态代理工具</span>         MyProxyInvocationHandlerTemplate template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyProxyInvocationHandlerTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 实例真真实角色</span>         RealSubject subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         template<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>         Subject sub <span class="token operator">=</span> <span class="token punctuation">(</span>Subject<span class="token punctuation">)</span> template<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建代理类</span>         sub<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行公共接口的方法</span>         <span class="token comment" spellcheck="true">// 也会有附加业务的调用</span>     <span class="token punctuation">}</span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> 大话设计模式 </category>
          
          <category> 抄书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GOF-23 </tag>
            
            <tag> 代理模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring的AOP和IOC</title>
      <link href="/2020/05/27/Spring%E7%9A%84AOP%E5%92%8CIOC/"/>
      <url>/2020/05/27/Spring%E7%9A%84AOP%E5%92%8CIOC/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring的IOC和AOP"><a href="#Spring的IOC和AOP" class="headerlink" title="Spring的IOC和AOP"></a>Spring的IOC和AOP</h1><p>[toc]</p><h2 id="Spring介绍"><a href="#Spring介绍" class="headerlink" title="Spring介绍"></a>Spring介绍</h2><blockquote><p>Spring框架即以<em>interface21<em>框架为基础,经过重新设计,并不断丰富其内涵,于</em>2004<em>年</em>3月24日</em>,发布了1.0正式版。作者: [Rod Johnson]([<a href="https://baike.baidu.com/item/Rod%20Johnson/1423612?fr=aladdin]" target="_blank" rel="noopener">https://baike.baidu.com/item/Rod%20Johnson/1423612?fr=aladdin]</a>(<a href="https://baike.baidu.com/item/Rod" target="_blank" rel="noopener">https://baike.baidu.com/item/Rod</a> Johnson/1423612?fr=aladdin))</p><p>==非入侵式, 轻量级框架 – 支持事务==</p></blockquote><blockquote><p>Spring(容器/代理类框架)  </p></blockquote><p> <img src="https://i.loli.net/2020/05/27/Pcl8ygk3zEiVHWY.png" alt="image.png"></p><ul><li><p>Spring七个模块</p><p><img src="https://i.loli.net/2020/06/28/jWdqFXVefgiDCH4.png" alt="image.png"></p></li></ul><h2 id="IOC-控制反转"><a href="#IOC-控制反转" class="headerlink" title="IOC(控制反转)"></a>IOC(控制反转)</h2><p>IOC – Inversion of Control</p><blockquote><p>DI：依赖注入：实现方式</p><p>IOC：控制反转:==<strong>是一种设计思想</strong>==</p></blockquote><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ol><li><p>作用: 借助于“第三方”实现具有依赖关系的对象之间的解耦</p></li><li><p>理念: 应用组件<strong>不应该负责查找资源或者其他的对象之间的依赖关系</strong>, 配置这个关系的由容器负责, 查找资源从应用组件的代码中抽取出来(set); 交给容器</p></li><li></li><li><p>IOC控制:</p><ul><li><strong>谁控制谁</strong>: ioc容器控制了对象</li><li><strong>控制什么</strong> : 主要控制了外部资源的获取,创建<pre><code>1. 对象由Spring创建、管理、装配   2.  控制的内容：控制对象的创建：传统的由程序本身去创建, 框架由Spring来创建和管理</code></pre></li></ul></li><li><p><strong>IOC反转</strong>：(正转：程序自己创建对象)</p><ul><li><p><strong>反转:</strong> 由容器帮我们查找和注入了依赖对象, 对象只是被动地接受</p></li><li><p><strong>反转了啥:</strong> 把依赖对象的获取方式反转了</p></li></ul><ol><li>对象A获得依赖对象B的过程,由主动行为变为了被动行为，控制权颠倒过来了，这就是“控制反转”  官方一点就是原来对象间的关系由程序猿的部分控制; 现在由容器框架来创建和管理</li></ol></li></ol><ul><li><p>用一个简单例子理解一下为什么有IOC</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 在正常开发中 把传递的对象用set来实现动态化 大大降低了耦合度</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDAOImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDAO</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 原先是 DAO层来创建对象和依赖关系 耦合度超高 一旦需要更改 就要改源码</span>    <span class="token comment" spellcheck="true">// MyDataBase dao = new DataBase();</span>    MyDataBase dao<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 把需要的对象用来传递后 就是服务端传递对象</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDao</span><span class="token punctuation">(</span>MyDataBase dao<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dao <span class="token operator">=</span> dao<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过"</span> <span class="token operator">+</span> dao<span class="token punctuation">.</span><span class="token function">thisName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"获取到了名字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="IOC实现"><a href="#IOC实现" class="headerlink" title="IOC实现"></a>IOC实现</h3><p>maven导入:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><img src="https://i.loli.net/2020/06/29/d6ZkSsux2f8Dwgv.png" alt="image.png"></p><ol><li><p>传统的设计模式 由程序本身new出对象,主动去创建依赖,耦合度很高</p></li><li><p>当有了IOC容器后,在客户端类中不再主动去创建这些对象了</p></li></ol><p><img src="https://i.loli.net/2020/06/29/9YnpjRGZdbw1DoL.png" alt="image.png"></p><ol><li>pojo类</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"new"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>String hello<span class="token punctuation">;</span><span class="token keyword">public</span> String <span class="token function">getHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> hello<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 一定要有set方法 Spring通过set来获取对象</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHello</span><span class="token punctuation">(</span>String hello<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>hello <span class="token operator">=</span> hello<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"Hello{"</span> <span class="token operator">+</span><span class="token string">"hello='"</span> <span class="token operator">+</span> hello <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span><span class="token string">'}'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li><p>配置文件</p><pre class=" language-xml"><code class="language-xml">  <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans          https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 在加载配置文件时 对象就已经new出          容器创建了对象          id 就像对象名      --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.sjs.Hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Hello Spring<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// 客户端加载配置文件 获取需要的Bean即可</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"ApplicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 可以加载多个XML文件</span>          Hello hello <span class="token operator">=</span> <span class="token punctuation">(</span>Hello<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span></code></pre><p><strong>在Spring中对象由容器创建, 管理, 装配</strong></p></li></ol><h3 id="Spring的BeanFactory实现生成Bean"><a href="#Spring的BeanFactory实现生成Bean" class="headerlink" title="Spring的BeanFactory实现生成Bean"></a>Spring的BeanFactory实现生成Bean</h3><ul><li>Spring是一个大的Bean工厂, 负责Bean的创建和注入</li><li>Bean创建流程</li></ul><p><img src="https://i.loli.net/2020/07/05/G78ImnKQaSyFwVj.png" alt="image.png"></p><ol><li>ResourceLoader<strong>加载配置文件</strong> </li><li><strong>BeanDefinitionReader解析配置文件</strong>– 将<Bean> <strong>解析为BeanDefinition对象</strong>, 并保存到BeanDefinitionRegistry</li><li>利用后处理器BeanFactoryPostProcessor<strong>对BeanDefinition加工处理</strong><ul><li>使用<Bean>标签进行解析.<strong>将占位符替换为真实值</strong></li><li>对所有的BeanDefinition扫描,<strong>用反射机制找出所有的属性编辑器的Bean</strong>,注册到PropertyEditorRegistry</li></ul></li><li>从BeanDefinitionRegistry中取出BeanDefinition, 调用InstantiationStrategy<strong>进行实例化</strong></li><li>实例化时, 利用BeanWrapper对Bean设置属性</li><li>利用后处理器BeanFactoryPostProcessor<strong>对完成的Bean进行加工</strong> </li></ol><h3 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h3><blockquote><p>ioc启动先产生一个BeanDedinition 后 有可能会触发实例化</p><p>如果是原型模式在getBean时会实例化</p><p>单例模式在初始化实例后回到容器中寻找</p></blockquote><ol><li><strong>实例化bean对象</strong></li><li><strong>设置属性(DI注入)</strong></li><li><strong>调用Bean的初始化方法</strong></li><li><strong>使用Bean</strong></li><li><strong>容器关闭前销毁Bean</strong></li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Bean的销毁方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroyStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Student这个Bean：销毁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 配置:</span>destroy<span class="token operator">-</span>method：指定销毁的方法 </code></pre><h3 id="BeanFactory与ApplicationContext是干什么的-区别"><a href="#BeanFactory与ApplicationContext是干什么的-区别" class="headerlink" title="BeanFactory与ApplicationContext是干什么的,区别?"></a>BeanFactory与ApplicationContext是干什么的,区别?</h3><table><thead><tr><th>BeanFactory</th><th>ApplicationContext</th></tr></thead><tbody><tr><td>都是容器</td><td>都是容器</td></tr><tr><td>顶层-基础接口,实现了基础功能</td><td>容器的高级形态,增加了特性,顶级父类是BeanFactory</td></tr></tbody></table><p>FactoryBean是一个Bean,用于生产修饰其他的Bean实例,典型的是AOP代理类</p><h3 id="Spring的IOC创建对象的方式"><a href="#Spring的IOC创建对象的方式" class="headerlink" title="Spring的IOC创建对象的方式"></a>Spring的IOC创建对象的方式</h3><ol><li><p><strong>无参构造:</strong></p><ul><li>上慢的例子就是</li></ul></li><li><p><strong>有参构造(3中方式)</strong></p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.sjs.Hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 通过构造器参数名字获取 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Hello Spring<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--通过构造器参数索引--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Hello Spring<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 通过类型 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Hello Spring<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p><strong>工厂方式创建</strong></p><ol><li>静态工厂</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 工厂类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Hello <span class="token function">getInstance</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml">配置文件<span class="token comment" spellcheck="true">&lt;!-- 静态工厂方法--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>factory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.sjs.MyFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getInstance<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello Factory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>动态工厂</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 工厂类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span>  Hello <span class="token function">getInstance</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 动态工厂方法   与静态比少了static --></span><span class="token comment" spellcheck="true">&lt;!--注册工厂--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>factory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.sjs.MyFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--对应工厂的对应方法创建对应的对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>factory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getInstance<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Hello Dynamic Factory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li></ol><h2 id="DI-依赖注入"><a href="#DI-依赖注入" class="headerlink" title="DI - 依赖注入"></a>DI - 依赖注入</h2><h3 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h3><p>前面有的就是构造器</p><h3 id="set注入"><a href="#set注入" class="headerlink" title="set注入"></a>set注入</h3><ul><li>依赖注入<ol><li>依赖: bean对象的<strong>创建</strong>依赖容器</li><li>注入: bean的所有属性由容器注入</li></ol></li></ul><blockquote><p>注入配置</p></blockquote><ul><li>所有类型</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.sjs.Address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>people<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.sjs.People<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--普通--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>me<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--引用对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--set--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>12345<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>123422<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--map--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>game<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1号<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lol<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2号<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ow<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Properties--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>other<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>key<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>value<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>secend<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hahah<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- results in a setSomeList(java.util.List) call --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>someList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>a list element followed by a reference<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myDataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h3 id="拓展方式注入"><a href="#拓展方式注入" class="headerlink" title="拓展方式注入"></a>拓展方式注入</h3><ul><li>c/p命名方式注入</li></ul><ol><li>p标签就是和 property相同功能</li></ol><pre class=" language-xml"><code class="language-xml"> xmlns:p="http://www.springframework.org/schema/p"</code></pre><ol start="2"><li>所以c标签就是和构造器参数constructor-arg相同功能配置在标签内</li></ol><pre class=" language-xml"><code class="language-xml">xmlns:c="http://www.springframework.org/schema/c"</code></pre><p>配置:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>people<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.sjs.People<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>haha<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>address-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h2 id="Spring配置"><a href="#Spring配置" class="headerlink" title="Spring配置"></a>Spring配置</h2><pre class=" language-xml"><code class="language-xml">Spring核心配置头<span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><ul><li>引入配置文件 – 将多个配置文件引入合并到一个文件中</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ApplicationContext1.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>import</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ApplicationContext2.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>import</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ApplicationContext3.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>import</span><span class="token punctuation">></span></span></code></pre><ul><li>Bean配置</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- id对象名字 class权限定名  name 别名配置(空格/,/;)当分隔符 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.sjs.Hello<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello2,23 12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--别名可以用这配置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alias</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>alias</span><span class="token punctuation">></span></span></code></pre><h3 id="Bean作用区域"><a href="#Bean作用区域" class="headerlink" title="Bean作用区域"></a>Bean作用区域</h3><p>官方文档有六个:</p><table><thead><tr><th align="left">Scope</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-singleton" target="_blank" rel="noopener">singleton(单例)</a></td><td align="left">(Default) Scopes a single bean definition to a single object instance for each Spring IoC container.</td></tr><tr><td align="left"><a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-prototype" target="_blank" rel="noopener">prototype(原型)</a></td><td align="left">Scopes a single bean definition to any number of object instances.</td></tr><tr><td align="left"><a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-request" target="_blank" rel="noopener">request</a></td><td align="left">Scopes a single bean definition to the lifecycle of a single HTTP request. That is, each HTTP request has its own instance of a bean created off the back of a single bean definition. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr><tr><td align="left"><a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-session" target="_blank" rel="noopener">session</a></td><td align="left">Scopes a single bean definition to the lifecycle of an HTTP <code>Session</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr><tr><td align="left"><a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-application" target="_blank" rel="noopener">application</a></td><td align="left">Scopes a single bean definition to the lifecycle of a <code>ServletContext</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr><tr><td align="left"><a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/web.html#websocket-stomp-websocket-scope" target="_blank" rel="noopener">websocket</a></td><td align="left">Scopes a single bean definition to the lifecycle of a <code>WebSocket</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr></tbody></table><p> 后面四个在web中才会用到</p><ul><li>单例Singleton</li></ul><p><img src="https://i.loli.net/2020/07/02/u5reoLZBkP6asGA.png" alt="image.png"></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.something.DefaultAccountService<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><ul><li>原型</li></ul><p><img src="https://i.loli.net/2020/07/02/dAIstZrxTL8m1Ru.png" alt="image.png"></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.something.DefaultAccountService<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h3 id="Bean自动装配"><a href="#Bean自动装配" class="headerlink" title="Bean自动装配"></a>Bean自动装配</h3><ul><li>byName和byType</li></ul><pre class=" language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!--写两个类: 人类拥有猫 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cat1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.sjs.Cat<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shout<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>neo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    自动装配: autowire:        byType: 找到对应的类        byName: 找到对应的id和name--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>human<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.sjs.Human<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sjs<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h3 id="Spring注解"><a href="#Spring注解" class="headerlink" title="Spring注解"></a>Spring注解</h3><p>The introduction of annotation-based configuration raised the question of whether this approach is “better” than XML.(官方推荐使用注解)</p><ul><li>注解开发</li><li>1.带入约束</li><li>==2.只需要多加一个 &lt;context:annotation-config/&gt;==</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><ul><li><p>@Autowired</p><p>参数(required = “false 表示可以为null”)   <em>选择性填写</em> </p><p>先通过byName方式获取  如果没有则通过 byType (如果有两个相同的注入配置 byName会异常)</p><p>直接加到对应的属性或者set方法上</p><p>如果自动装配的属性在IOC(Spring)容器中存在, 且名字对应 就可以不写set方法(用反射机制获取对应的属性结构)</p></li><li><p>@Qualifier(value = “参数名字”) 配置一个别名</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"cat1"</span><span class="token punctuation">)</span><span class="token keyword">private</span> Cat cat<span class="token punctuation">;</span></code></pre></li><li><p>@Resource(是java自带的)</p><p>参数可以配置名字(name= “参数名字”)</p><p>先通过byName方式获取  如果没有则通过 byType </p></li></ul><h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><blockquote><p>一定要引入aop包 和配置自动扫描</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 扫描package下所有文件 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.sjs<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span></code></pre></blockquote><ul><li><p><strong>bean</strong></p><ol><li><p>@Component注解表示注入到Spring中 相当于    <code>&lt;bean id=&quot;&quot; name=&quot;&quot;/&gt;</code></p></li><li><p>@Component的衍生注解, 在web开发中,的MVC三层架构</p><ul><li>DAO层: @Repository</li><li>Controller层: @Controller</li><li>Service层: @Service</li></ul><blockquote><p>注解功能相同</p></blockquote></li></ol></li><li><p><strong>属性注入</strong></p></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 相当于 &lt;property name="" value=""/></span><span class="token keyword">private</span> String name<span class="token punctuation">;</span></code></pre><ul><li><p><strong>自动装配</strong></p><ul><li><p>@Autowired</p><p>参数(required = “false 表示可以为null”)   <em>选择性填写</em> </p><p>先通过byName方式获取  如果没有则通过 byType (如果有两个相同的注入配置 byName会异常)</p><p>直接加到对应的属性或者set方法上</p><p>如果自动装配的属性在IOC(Spring)容器中存在, 且名字对应 就可以不写set方法(用反射机制获取对应的属性结构)</p></li><li><p>@Qualifier(value = “参数名字”) 配置一个别名</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"cat1"</span><span class="token punctuation">)</span><span class="token keyword">private</span> Cat cat<span class="token punctuation">;</span></code></pre></li><li><p>@Resource(是java自带的)</p><p>参数可以配置名字(name= “参数名字”)</p><p>先通过byName方式获取  如果没有则通过 byType </p></li></ul></li><li><p><strong>作用域</strong></p></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 单例 原型 ... </span><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"Singleton"</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"prototype"</span><span class="token punctuation">)</span></code></pre><ul><li><strong>小结</strong></li></ul><blockquote><p>Xml与注解:</p></blockquote><ul><li>xml方便维护,比较万能 适用任何场合</li><li>注解 针对自己的类, 维护复杂</li></ul><blockquote><p>实践</p></blockquote><ul><li>xml用来管理bean</li><li>注解只负责完成注入</li><li>在使用过程中,只要注意一个问题: 开启注解支持配置(配置文件 和 扫描包)</li></ul><h3 id="javaConfig实现配置"><a href="#javaConfig实现配置" class="headerlink" title="javaConfig实现配置"></a>javaConfig实现配置</h3><ul><li>由于有javaConfig配置可以实现不用配置文件, 全交给JAVA来做!</li><li>javaConfig是Spring的一个子项目, 在Spring4之后, 成为了一个核心功能(获取ConfigContext)</li></ul><p><img src="https://i.loli.net/2020/07/04/HPgrKlqpuFb58GQ.png" alt="ApplicationContext.png"></p><ul><li>测试例子</li></ul><p>配置类:可以完全替代Bean.xml</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 这个类回由Spring容器托管 @Configuration的实现有@Component </span><span class="token comment" spellcheck="true">// @Configuration 代表配置类 和ApplicationContext.xml相同</span><span class="token comment" spellcheck="true">// 完全使用配置类只需要annotationConfig上下文来获取容器, 通过配置类的class对象加载!</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.sjs.POJO"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//@Import(OtherConfig.class)  引入其他配置文件 和 xml中的import一致</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SongConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 方法名为 id name 自动注入方式By_TYPE</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"getUser"</span><span class="token punctuation">,</span> autowire <span class="token operator">=</span> Autowire<span class="token punctuation">.</span>BY_TYPE<span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Cat <span class="token function">getCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猫来啦!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>PO类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// User类</span><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">// 组件</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"sjs"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Cat cat<span class="token punctuation">;</span>    <span class="token keyword">public</span> Cat <span class="token function">getCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cat<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCat</span><span class="token punctuation">(</span>Cat cat<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cat <span class="token operator">=</span> cat<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Cat类</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"mao"</span><span class="token punctuation">)</span>    String name<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 不需要配置文件</span>    ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>SongConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"getUser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>结果:</p><p>​    hahaha<br>​    猫来啦!<br>​    Cat{name=’mao’}<br>​    User{name=’sjs’}</p></blockquote><h2 id="AOP代理-面向切面"><a href="#AOP代理-面向切面" class="headerlink" title="AOP代理-面向切面"></a>AOP代理-面向切面</h2><p>AOP -Aspect Oriented Programming</p><blockquote><p>了解Spring的AOP实现不得不说到 java的反射机制和 动态<a href="[https://sunxinan12138.github.io/2020/05/31/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/](https://sunxinan12138.github.io/2020/05/31/代理模式/)">代理模式</a> </p><ul><li>基本概念<ol><li>通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术.</li><li>AOP是OOP的延续, 是软件开发的热点, 也是SPring框架的重要内容. 函数式编程的衍生泛型. ;利用AOP可以对业务逻辑各个部门进行隔离,是逻辑间耦合度降低, 提高重用性,提高开发效率</li></ol></li></ul></blockquote><blockquote><p>正常编程<img src="https://i.loli.net/2020/05/28/rQZ36jmDFYCR5NI.png" alt="image.png"></p></blockquote><blockquote><p>面向切面: 在一个功能(类)中切入另一个功能<img src="https://i.loli.net/2020/06/26/rOYqRu3ZHSNVeMc.png" alt="image.png"></p><p><img src="https://i.loli.net/2020/06/27/zMpQPvU64AdBYw8.png" alt="image.png"></p></blockquote><h3 id="Spring中AOP的作用"><a href="#Spring中AOP的作用" class="headerlink" title="Spring中AOP的作用"></a>Spring中AOP的作用</h3><blockquote><p>*<em>提供声明式服务: *</em> 允许用户自定义切面</p><ul><li>横切关注点: 跨越应用程序多个模块的方法或功能. – 与业务逻辑无关  但是我们要关注的部分– 日志, 安全, 缓存….</li><li>切面(ASPECT): 横切关注点 被模块化的特殊对象 – 是一个类(Log)</li><li>通知(Advice): 切面必须要完成的工作, 即, 他是类中的一个方法(日志方法)</li><li>目标(Target): 被通知对象.</li><li>代理(Proxy): 向目标对象应用通知后创建的对象</li><li>切入点(PointCut): 切面通知 执行的”地点”的定义</li><li>连接点(JoinPoint): 与切入点匹配的执行点</li></ul><p><img src="C:%5CUsers%5C25778%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200627195527701.png" alt="image-20200627195527701"></p></blockquote><h3 id="AOP重要性："><a href="#AOP重要性：" class="headerlink" title="AOP重要性："></a>AOP重要性：</h3><p>aop将公共业务（日志，安全）和领域业务结合。公共业务可以重复使用，程序猿更专注与领域业务 本质动态代理</p><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><blockquote><p><a href="[https://sunxinan12138.github.io/2020/06/05/JAVA%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/](https://sunxinan12138.github.io/2020/06/05/JAVA反射机制/)">反射机制</a> 需要了解一下</p></blockquote><ul><li>哪些方法不能被AOP增强</li></ul><ol><li>基于JDK代理，除public外的其他所有方法，包括public static也不能被增强</li><li>基于CGLIB代理，由于其通过生成目标类子类的方式来增强，因此不能被子类继承的方法都不能被增强，private、static、final 方法</li></ol><h4 id="使用Spring原生接口方式-和JDK动态代理模式很像"><a href="#使用Spring原生接口方式-和JDK动态代理模式很像" class="headerlink" title="使用Spring原生接口方式(和JDK动态代理模式很像)"></a>使用Spring原生接口方式(和JDK动态代理模式很像)</h4><ol><li><p>核心配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.SpringAOP.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> // 被切入的业务 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.SpringAOP.MyLog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> // 切入的业务 <span class="token comment" spellcheck="true">&lt;!-- 配置的(..) 括号是方法 .. 任意参数--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 切入点  expression: (返回类型  切入的位置(包.类.方法(参数类型)))--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.SpringAOP.UserServiceImpl.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>pointcut</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 哪个类切入哪个切入点(log) --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>advisor</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span></code></pre></li><li><p>日志类</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLog</span> <span class="token keyword">implements</span> <span class="token class-name">MethodBeforeAdvice</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span>Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> Object o<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"haha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>载入配置文件</li></ol><pre class=" language-java"><code class="language-java">ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"aopConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 加载xml方式</span>UserService userService <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Spring调用</span>userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>Spring的五种Advice</li></ul><table><thead><tr><th>通知类型</th><th align="left">连接点</th><th>接口</th></tr></thead><tbody><tr><td>前置通知</td><td align="left">方法前</td><td>aop.MethodBeforeAdvice</td></tr><tr><td>后置通知</td><td align="left">方法后</td><td>aop.AfterReturnAdvice</td></tr><tr><td>环绕通知</td><td align="left">方法前后</td><td>intercept.MethodInterceptor</td></tr><tr><td>异常抛出通知</td><td align="left">方法抛出异常</td><td>aop.ThrowsAdvice</td></tr><tr><td>引介通知</td><td align="left">类中增加新的方法属性</td><td>aop.IntroductionInterceptor</td></tr></tbody></table><h4 id="使用自定义类实现"><a href="#使用自定义类实现" class="headerlink" title="使用自定义类实现"></a>使用自定义类实现</h4><ol><li>先自定义一个类</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDiyLog</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 自定义类当做切面</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">befor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>配置文件</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- Spring 注入Bean --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.SpringAOP.MyDiyLog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.SpringAOP.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--  aop 配置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--  配置切面的ref  --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.SpringAOP.UserServiceImpl.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>pointcut</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>befor<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>around<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span></code></pre><h4 id="使用注解方式实现"><a href="#使用注解方式实现" class="headerlink" title="使用注解方式实现"></a>使用注解方式实现</h4><ol><li>配置文件:</li></ol><pre class=" language-xml"><code class="language-xml">   <span class="token comment" spellcheck="true">&lt;!-- 三: 注解 --></span><span class="token comment" spellcheck="true">&lt;!-- 两种方式     1. jdk自己的(false)(默认就是这个)     2. cglib(true) --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotationLog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.AnnotationMethod.MyLogAnnotation<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>注解部分</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLogAnnotation</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* com.SpringAOP.UserServiceImpl.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">befor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"befor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li><p>其他的相比第一种没有变化</p></li><li><h3 id="六种增强类型"><a href="#六种增强类型" class="headerlink" title="六种增强类型"></a>六种增强类型</h3><ol><li>@Before 前置增强，相当于BeforeAdvice</li><li>@AfterReturning 后置增强，相当于AfterReturningAdvice</li><li>@Around 环绕增强，相当于MethodInterceptor</li><li>@AfterThrowing 抛出增强，相当于ThrowsAdvice</li><li>@AfterFinal增强，不管抛出异常还是正常退出，都会执行，没有对应的增强接口，一般用于释放资源</li><li>@DeclareParents 引介增强，相当于IntroductionInterceptor</li></ol></li></ol><blockquote><p><a href="#">Spring事务运用</a></p></blockquote><h1 id="加一个MVC的"><a href="#加一个MVC的" class="headerlink" title="加一个MVC的"></a>加一个MVC的</h1><p><img src="https://i.loli.net/2020/10/02/VD3Xah5SyBOoKsQ.png" alt="mvc工作原理"></p><ol><li>客户端<strong>请求</strong>到DispatcherServlet</li><li>DispatcherServlet根据请求地址查询映射处理器<strong>HandleMapping，获取Handler</strong></li><li>请求<strong>HandlerAdapter执行Handler</strong></li><li><strong>执行相应的Controller方法</strong>，执行完毕<strong>返回ModelAndView</strong></li><li>通过<strong>ViewResolver解析视图</strong>，<strong>返回View</strong></li><li><strong>渲染视图</strong>，将<strong>Model数据转换为Response响应</strong></li><li>将<strong>结果返回给客户端</strong></li></ol><p><code>2，3 两步都在DispatcherServlet -&gt; doDispatch中进行处理</code></p><h2 id="Spring-MVC-架构-与原生Servlet区别-请求处理流程"><a href="#Spring-MVC-架构-与原生Servlet区别-请求处理流程" class="headerlink" title="Spring MVC 架构 | 与原生Servlet区别 | 请求处理流程"></a>Spring MVC 架构 | 与原生Servlet区别 | 请求处理流程</h2><ol><li>原生的一个请求对应一个servlet 框架(SpringMVC框架 简写) 由前端控制器去寻找对应的Controller</li><li>框架封装了一些数据</li></ol><p><a href="">Spring注解 boot 会很频繁用到</a></p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 未完成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程</title>
      <link href="/2020/05/25/%E7%BA%BF%E7%A8%8B/"/>
      <url>/2020/05/25/%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="线程Thread"><a href="#线程Thread" class="headerlink" title="线程Thread"></a>线程Thread</h1><p>[toc]</p><blockquote><p>Thread隶属于java.lang包下的类 ,java语言的JVM允许程序运行多个线程</p><p>Thread:每个线程通过特定Thread对象的run()方法来完成操作,经常把</p></blockquote><h2 id="程序-线程和进程"><a href="#程序-线程和进程" class="headerlink" title="程序,线程和进程"></a>程序,线程和进程</h2><ul><li><p><strong>程序(Program):</strong>为了完成特定任务, 用某种语言编写的一组指令集合. 即<kbd>一段静态代码</kbd>,静态对象</p></li><li><p><strong>进程(process):</strong>是指程序的一次执行过程, 或是<kbd>正在运行的一个程序</kbd>. 动态过程: 有它自身的产生, 存在和消亡的过程.</p><blockquote><p>如: 运行中的软件qq 浏览器等</p><p>程序是静态的,运行的进程是动态的</p></blockquote></li><li><p><strong>线程(Thread):</strong>进程细化一些为线程,是一个程序内部的一条执行路径</p><blockquote><p>当热程序在同一时间可以有多个执行路径, 也就是支持多线程</p></blockquote></li></ul><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><blockquote><p>java中线程分为:<strong>守护线程(daemon)</strong>和<strong>用户线程</strong></p><blockquote><p>虚拟机必须保证用户线程执行完毕,守护线程不需要等待: 如后台记录日志,内存监控,gc垃圾回收等</p></blockquote><p>守护线程设置: thread.setDemon(true为守护线程)</p></blockquote><pre><code>1.线程就是独立执行的路径2.在程序运行时，即使没有创建线程，也会有多个线程(javg gc线程，主线程)3.main()称为主线程 ，为系统的入口，用于执行整个程序4.在一个进程中，开了多个线程，线程的运行由调度器安排调度，调度器是与操作系统5.紧密相关的，先后顺序是不能人为干预的6.对同一份资源操作时，会存在资源抢夺问题，要加入并发控制7.线程会带来额外的开销，cpu调度时间，并发控制开销8.每个线程在自己的工作内存中交互，内存控制不当会造成数据不一致</code></pre><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><blockquote><p>在JDK中Thread.State枚举表示了线程的六种状态</p><p>getState():获取状态:hamburger:</p></blockquote><ul><li><strong>让我们看一下源码, 看一下线程的几个状态</strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// java中hread的内部枚举</span> <span class="token keyword">public</span> <span class="token keyword">enum</span> State <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 线程被声明并且创建后, 尚未启动的线程的线程状态。</span>        NEW<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 可运行的状态, 一般执行了star() 在虚拟机中执行等待分配资源 (如果执行了会执行run方法)</span>        RUNNABLE<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 阻塞了 </span>        BLOCKED<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 等待</span>        WAITING<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 也是等待 但是有等待时间的等待</span>        TIMED_WAITING<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//线程结束 终止</span>        TERMINATED<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​                                                            如图</p><p><img src="https://i.loli.net/2020/05/27/sQ7TN4wSIAkUCFp.png" alt="线程生命周期"></p><h2 id="线程的三种创建方式"><a href="#线程的三种创建方式" class="headerlink" title="线程的三种创建方式"></a>线程的三种创建方式</h2><blockquote><p><strong>Junit4单元测试线程异常</strong>: 具体原因不太了解但是和junit的实现有关(记到小本本–下次在了解)</p></blockquote><h3 id="一-继承Thread类"><a href="#一-继承Thread类" class="headerlink" title="一 . 继承Thread类"></a>一 . 继承Thread类</h3><blockquote><p>重写run()方法 ,并且用thread.start()启动线程</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadBuild</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadTest threadTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadTest<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 启动线程</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 重写run方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 线程命名</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取当前线程名 + 变量</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>程序中创建了一个 <strong>线程1</strong> 线程 在主线程中启动 线程间是独立执行的 ,如图:</p><p><img src="/images/Thread.png" alt="执行方式图解"></p><p>所以会看到并行交替执行的情况:</p><p><img src="/images/%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="并没有顺序"></p></blockquote><p>在Thread中有以下代码保证了Start()方法不能重复调用:<img src="/images/start.png" alt="start的源码"></p><h4 id="练习"><a href="#练习" class="headerlink" title="练习:"></a>练习:</h4><blockquote><p> 用多线程写图片复制/用线程实现3个售票窗口(<strong>要考虑产生资源冲突</strong>)(代码emmmm就不粘了)</p></blockquote><h3 id="二-实现Runnable接口"><a href="#二-实现Runnable接口" class="headerlink" title="二. 实现Runnable接口"></a>二. 实现Runnable接口</h3><blockquote><p>实现Runnable接口并且重写run()方法</p><p>由于Thread类为一个代理类 代理了Runnable</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 实现接口的线程创建方式</span>        ThreadTest threadTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Runnable接口实现类对象</span>        <span class="token comment" spellcheck="true">// 将此对象作为形参放入 Thread的构造方法中 并创造对象</span>        Thread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>threadTest<span class="token punctuation">)</span><span class="token punctuation">;</span>         Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>threadTest<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"1Thread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 命名</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 启动线程</span>           thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// lamdba表达式（1.8新特性）</span>     <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><ol><li><p>Thread 本身就实现了Runnable接口</p></li><li><p>实现方式优于继承方式</p><ol><li>避免了java中单继承的局限性</li><li>在操作同一份资源中,更适合使用实现方式<ol><li>一个对象的资源给多个线程使用</li></ol></li></ol></li></ol></blockquote><h3 id="三-实现Callable接口"><a href="#三-实现Callable接口" class="headerlink" title="三. 实现Callable接口"></a>三. 实现Callable接口</h3><blockquote><p>重写的call()方法 </p><p>需要执行服务和关闭服务(ExecutorService的对象 )<br><kbd>ExecutorService service = Executors.newFixedThreadPool(3);</kbd></p><p>提交执行 submit(线程对象)<br><kbd>Future f1 = service.submit(c);</kbd></p><p>获取返回值 记得结束服务<br><kbd>String s1 = (String) f1.get();</kbd><kbd>service.shutdown();</kbd></p></blockquote><h2 id="Thread类常用方法"><a href="#Thread类常用方法" class="headerlink" title="Thread类常用方法"></a>Thread类常用方法</h2><blockquote><ol><li><p>start(): 启动线程并执行响应的run()方法</p></li><li><p>run():子线程要执行的代码</p></li><li><p>currentThread(): 静态的,调用当前的线程</p></li><li><p>getName()/setName(): 获取和设置线程名字</p></li><li><p>yield():  调用此方法的线程放弃当前cpu的执行权，礼让别的线程（我让了但是，你们抢不抢得到那不归我管）</p></li><li><p>join(): 在A线程中调用B.join()方法. （插入A线程中） </p><blockquote><p><strong>表示</strong>: A线程停止,直到B线程执行完毕 A线程在执行后面的代码</p><blockquote><p> ==sleep()和yield()方法==</p><ul><li><p>sleep不考虑优先级/yield同优先级</p></li><li><p>sleep 后是阻塞/yield是就绪状态</p></li><li><p>sleep有异常 /而且不会释放线程 – 都不会释放标志锁</p></li><li><p>sleep比yield有更好的移植性</p><p>wait(): 当前线程等待执行wait的线程(要加同步锁 谁等就锁谁)</p></li><li><p>和notify()/notifyAll() 一起用</p></li><li><p>必须在synchronized中使用</p></li><li><p>wait会释放标志锁/sleep和yield不会</p></li><li><p>sleep是Thread的 / wait是Object的</p></li><li><p>sleep有异常需要捕获</p></li></ul></blockquote></blockquote></li><li><p>isAlive(): 判断当前线程是否存活</p></li><li><p>sleep(long time): 当前线程睡眠time毫秒(1000ms = 1s)</p><ol><li>不会释放线程</li></ol></li><li><p>线程通信中wait()</p></li><li><p>notify()：释放优先级高的等待的线程</p></li><li><p>notifyAll()：释放所有等待的线程</p></li><li><p>设置线程的优先级</p><blockquote><p>getPriority(): 返回当前线程优先级</p><p>setPriority(int newPriority): 改变当前线程优先级 : <kbd>正常为5,最大10,最小是1</kbd></p></blockquote></li></ol></blockquote><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><blockquote><blockquote><p><strong>保证线程安全</strong></p></blockquote><ul><li>尽量避免<strong>共享</strong>资源的存取冲突, 如果必须有共享资源, 那就设计一个规则(锁)来保证, 同时间只有一个线程访问资源  而且<strong>一个客户</strong>的计算工作由<strong>一个线程</strong>解决</li></ul></blockquote><blockquote><p>线程不安全的集合:</p><table><thead><tr><th></th><th>线程不安全</th><th>对应线程安全</th></tr></thead><tbody><tr><td>1</td><td>ArrayList</td><td>CopyOnWriterArrayLis/vector</td></tr><tr><td>2</td><td>HashMap</td><td>HashTable</td></tr><tr><td>3</td><td>StringBuilder</td><td>StringBuffer</td></tr></tbody></table><ol><li>Servlet/Controller线程不安全的</li></ol></blockquote><blockquote><p>刚才的窗口买票程序就会出现安全问题</p><p>原因:由于多个线程在操作共享的数据时,在其中一个线程未执行完毕时,另一个线程进入,导致共享数据出现问题</p></blockquote><p><img src="https://i.loli.net/2020/05/28/EhVquDZ5Bwpit4g.png" alt="线程安全出现的原因.png"></p><ul><li><p>如何解决线程安全的问题? </p><blockquote><p>想办法热那个一个线程操作数据完毕后,其他线程才能操作</p></blockquote></li><li><p>java中实现线程安全,线程同步机制:</p><blockquote></blockquote><ul><li><p>一 同步代码块</p><blockquote><p>synchronized关键字 — 要有一个对象充当同步监视器(缺点:会影响效率)</p><p>同步监视器:由一个类的对象充当.当一个线程获取监视器,就执行代码.(通一把锁的对象一定是同一个对象) — <strong>锁</strong></p></blockquote><p><img src="https://i.loli.net/2020/05/28/dEHqCfLVynIOJQP.png" alt="synchronized.png"></p></li></ul></li></ul><pre><code>实现代码:```java public  void run() {        while (true) {            synchronized (this) { // 用本类的对象为同步监视器                if (ticket &gt; 0) { // 如果有票 修改变量                    try {                        Thread.sleep(10); // 假设睡眠                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                    System.out.println(Thread.currentThread().getName() + &quot;:&quot; + ticket);                    ticket--;                }            }        }  }```</code></pre><ul><li><p>二 同步方法</p><blockquote><p>保证同一时间只有一个线程访问此方法</p><p>用synchronized修饰方法: <kbd>public synchronized void method()</kbd>叫同步方法</p><p>同步监视器对象默认为当前对象</p></blockquote></li></ul><ul><li>在单例模式中 – <a href="https://sunxinan12138.github.io/2020/05/31/单例模式/" target="_blank" rel="noopener">锁的问题(双重锁定)</a></li></ul><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><blockquote><ul><li>概念: 不同的线程分别占用对方的同步资源不放弃,都在等待对方放弃自己需要的同步资源,就形成了死锁</li><li>解决办法: <ul><li>算法, 原则</li><li>尽量减少同步资源的定义</li></ul></li></ul></blockquote><h4 id="LOCK锁"><a href="#LOCK锁" class="headerlink" title="LOCK锁"></a>LOCK锁</h4><blockquote><ul><li>从JDk5.0开始, JAVA提供了更强大的线程同步机制–通过显式定义同步锁对象来实现同步. 同步锁使用Lock对象充当</li><li>Java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具. 锁提供了对共享资源的独占访问, 每次只能有一个线程对Lock对象加锁, 线程开始访问共享资源之前硬获得Lock对象</li><li>ReentrantLock(可重入锁)类实现了Lock, 它拥有与synchronized相同的并发性,在实现线程安全控制中,比较常用的是ReentrantLock, 可以显式加锁,释放锁</li></ul></blockquote><blockquote><p><strong>Lock与synchronized的对比</strong></p><ul><li>Lock是显式锁(需要手动开关)  synchronized是隐式锁,自动释放</li><li>Lock只是锁代码块</li><li>使用Lock, JVM调度线程花费时间少,性能好. 而且具有更好的扩展性(提供更多的子类)</li><li>优先级:<ul><li>Lock &gt; 同步代码块&gt;同步方法</li></ul></li></ul></blockquote><pre class=" language-java"><code class="language-java"> <span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 官方建议用Try，catch， finally</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 加锁</span>               <span class="token comment" spellcheck="true">// 需要加锁的代码区</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 解锁</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><p>一种处理并发数据的方式 将数据 隔离 每个线程单独持有</p><ol><li><p>用空间换时间  </p></li><li><p>创建副本进行数据隔离</p></li></ol><ul><li><p>要求是多个线程用一个对象,但是每个线程的对象是独立的</p></li><li><p>每个线程独立的改变自己的变量副本,不去影响其他线程</p></li><li><p>Thread里面包含 ThreadLocal</p><p><img src="https://i.loli.net/2020/10/02/AOLEhVptz3QDa1y.png" alt="image-20200720211033368.png"></p><p><img src="https://i.loli.net/2020/10/02/LcskzqfCXDpAihu.png" alt="image-20200720211926178.png"></p></li><li><p>内部类ThreadLocalMap:  k-v组成的entry[]数组</p></li><li><p>key是ThreadLocal的弱引用</p><ul><li>val就是值</li></ul></li></ul><p>get: 获取</p><p>set: 存储</p><p>remove: 移除</p><p>initialValue :重写</p><ul><li><p><strong>内存泄漏问题</strong></p><p>由于key的Thread是弱引用 所以会存在key是null 但是val是强引用 就会内存泄漏</p><p>解决方法:是每一次get和set,remove时都会清楚为null的val 下一次垃圾回收就会清除了</p><p>所以调用一下remove就行了</p></li></ul><pre class=" language-java"><code class="language-java">   <span class="token comment" spellcheck="true">// 创建线程池</span>        ExecutorService service <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"==="</span> <span class="token operator">+</span> DateUtilSafe<span class="token punctuation">.</span><span class="token function">parsesss</span><span class="token punctuation">(</span><span class="token string">"2020-20-20 21:50:90"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        service<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 工具类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateUtilSafe</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 写这个才安全</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>SimpleDateFormat<span class="token operator">></span> THREAD_LOCAL <span class="token operator">=</span> ThreadLocal<span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-DD HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Date <span class="token function">parsesss</span><span class="token punctuation">(</span>String dateStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Date date <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            date <span class="token operator">=</span> THREAD_LOCAL<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dateStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> date<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><blockquote><p>关键字:wait(), notify()和 notifyAll() – 线程调度的方法</p><ul><li><p>wait(): 令当前线程挂起cpu/同步资源器, 使别的线程可以访问并修改公共资源,当前线程会在排队等待状态.</p></li><li><p>notify():唤醒正在排队等待同步资源的的<strong>优先级最高</strong>的线程 – 结束等待</p></li><li><p>notifyAll(): 唤醒正在排队等待同步资源的的<strong>所有</strong>线程 – 结束等待</p></li></ul><p>注意: 这三个方法为java.lang.Object下的 而且只有在synchronized方法或代码块中才会使用.</p></blockquote><h2 id="写个生产者-消费者练习-不是OO的Pattern"><a href="#写个生产者-消费者练习-不是OO的Pattern" class="headerlink" title="写个生产者/消费者练习(不是OO的Pattern)"></a>写个生产者/消费者练习(不是OO的Pattern)</h2><p><img src="https://i.loli.net/2020/06/01/jQAPyZdFRN1Ye4w.png" alt="image.png"></p><blockquote><p>分析:</p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 是否考虑线程<span class="token list punctuation">2.</span> 是否涉及共享数据<span class="token list punctuation">3.</span> 如果有共享数据 考虑线程安全/同步的问题<span class="token list punctuation">4.</span> 是否有线程通信</code></pre></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 管城法</span><span class="token comment" spellcheck="true">// 生产者做东西 消费者买 (通信:生产到20 停止生产 0开始生产停止购买)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">P2CTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 主线程</span>        Clerk clerk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Clerk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Producer producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>clerk<span class="token punctuation">)</span><span class="token punctuation">;</span>        Consumer consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>clerk<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>producer<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>producer<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread c3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"生产1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"生产2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"消费1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"消费2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"消费3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Clerk</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 店员 公共部分</span>    <span class="token keyword">int</span> product<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 生产到20 停止生产 0开始生产停止购买</span>    <span class="token comment" spellcheck="true">// 同步方法</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token operator">>=</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果作满了 停止制作</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"暂停制作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            product <span class="token operator">+=</span> num<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 添加制作数量</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"生产了: "</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">"====现在还有"</span> <span class="token operator">+</span> product<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果有存货就释放锁 让用户购买</span>                <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">buyProduct</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"暂停购买"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            product <span class="token operator">-=</span> num<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"购买了了: "</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">"====现在还有"</span> <span class="token operator">+</span> product<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果数量不足释放生产者来制作</span>                <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 生产者</span>    Clerk clerk<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Producer</span><span class="token punctuation">(</span>Clerk clerk<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clerk <span class="token operator">=</span> clerk<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            clerk<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 消费者</span>    Clerk clerk<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Consumer</span><span class="token punctuation">(</span>Clerk clerk<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clerk <span class="token operator">=</span> clerk<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            clerk<span class="token punctuation">.</span><span class="token function">buyProduct</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>出现的问题</p></blockquote><p>在等待中推荐使用wait 如果使用 if 将会有肯能出现虚假唤醒问题:</p><ul><li><p>线程可以唤醒但是不会被通知, 中断或者超时,即所谓的虚假唤醒. 发生概率虽然还很小, 但是程序必须通过测试应该使线程被唤醒的条件来防范, 并且如果条件不满足则继续等待.  </p></li><li><p>等待应该总是出现在循环中</p></li><li><p>原因:</p><blockquote><p>本质在于  if 和while 的区别  : if中挂起了 如果被唤醒会继续执行但是这个唤醒有可能不正确</p></blockquote><ol><li>两个消费者线程发现剩余0 于是唤醒生产者 自己<strong>挂起</strong>;(if判断)</li><li>生产者生产一个 唤醒所有消费者 两个消费者 不管谁先获得锁 都是继续if 执行 </li><li>但是 其中一个消费过后 下一个应该挂起但是没有了判断 所以被虚假唤醒了 </li></ol></li><li><p>解决 把等待放到while中 让他循环判断</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*if (product >= 20) {     wait();}*/</span>修改为<span class="token operator">:</span><span class="token keyword">synchronized</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>product <span class="token operator">>=</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        obj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ---------------</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><blockquote><ul><li>将线程放入池子,方便使用和管理,也避免了销毁造成的浪费</li><li>3.Java线程池（工具）</li><li>线程池有很多种，但是核心线程池ThreadPoolExecutor。</li><li>ExecutorService:线程池接口</li><li>Executors(Runable 接口):工具类,线程池工厂</li></ul></blockquote><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//线程池：内含了一些线程数量，以及拒绝策略，阻塞队列...内容。</span>    <span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">//核心线程数,工作的</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//最大线程数</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//最大活跃时间，如果超过最大活跃时间，不工作的线程被回收（优先回收非核心线程）</span>                              TimeUnit unit<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//时间单位</span>                              BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//阻塞队列</span>                              ThreadFactory threadFactory<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//线程工厂，创建线程的方式</span>                              RejectedExecutionHandler handler<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//拒绝策略</span>                              <span class="token punctuation">}</span></code></pre><blockquote><ol><li><p>假设线程池中有20个线程，10个核心线程数，当有10个任务来临，优先使用核心线程来工作，如果又来1个任务:</p><ol><li>第一，创建一个非核心线程工作</li><li>第二，进入阻塞队列</li><li>阻塞队列共有4种：S&gt;L&gt;A:<ol><li>SynchronousQueue:同步队列，如果有任务进入队列，直接创建一个线程工作。</li><li>LinkedBlockingQueue:链表阻塞队列，如果有任务进入队列，直接排队，按照先进先出的规则进行执行，先排队，先执行。</li><li>ArrayBlockingQueue:数组阻塞队列，如果有任务进入队列，直接排队，按照先进先出的规则进行执行，先排队，先执行。</li><li>DelayQueue:延迟队列，如果有任务进入队列，先排队，但是不立即执行，而是等到延迟时间到了，再执行。</li></ol></li></ol></li><li><p>拒绝策略也有4种：当有任务来临时，如果超过了线程池的规定线程数，可以选择任务执行的策略。</p><ol><li>直接丢弃（DiscardPolicy）</li><li>队列中最老的任务（DiscardOldestPolicy）</li><li>抛出异常（AbortPolicy），默认策略</li><li>将任务分配调用线程来执行（CallerRunsPolicy）</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolDemo</span> <span class="token punctuation">{</span></code></pre></li></ol><pre><code>   //定义核心线程数   private static final int MAX_CORE = 4;   //定义最大线程数   private static final int MAX_THREAD_NUM = 10;   //定义活跃时间,单位毫秒   private static final long MAX_ACTIVE_TIME = 3000;   //定义阻塞队列   private static LinkedBlockingQueue&lt;Runnable&gt; workQueue = new LinkedBlockingQueue&lt;&gt;();   //定义一个线程执行器   private static ThreadPoolExecutor threadPoolExecutor;   //静态代码块   static {       //实例化一个线程池执行器       ThreadPoolExecutor executor = new ThreadPoolExecutor(MAX_CORE,               MAX_THREAD_NUM,               MAX_ACTIVE_TIME,               TimeUnit.MILLISECONDS,               workQueue               );       //允许核心线程超时，核心线程也在销毁之内       executor.allowCoreThreadTimeOut(true);       //将创建出来的线程池执行器赋值给成员变量       threadPoolExecutor = executor;   }   public static void main(String[] args) {     /*threadPoolExecutor = new ThreadPoolExecutor(MAX_CORE,             MAX_THREAD_NUM,             MAX_ACTIVE_TIME,             TimeUnit.MILLISECONDS,             workQueue);*/     for(int i = 1;i &lt;= 20;i++){         Runnable r =  new Runnable(){             public void run(){                 try{                     Thread.sleep(1000);                 }catch (Exception e){                     e.printStackTrace();                 }                 for(int i = 1;i &lt;= 10;i++){                     System.out.println(&quot;i = &quot; + i);                 }             }         };         threadPoolExecutor.execute(r);     }   }</code></pre><p>   }</p><pre><code></code></pre></blockquote><pre class=" language-java"><code class="language-java">ExecutorService service <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 数量</span>service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SJSThread</span><span class="token punctuation">)</span><span class="token punctuation">;</span>service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SJSThread</span><span class="token punctuation">)</span><span class="token punctuation">;</span>service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SJSThread</span><span class="token punctuation">)</span><span class="token punctuation">;</span>service<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结束线程连接池</span></code></pre><h2 id="同步-异步"><a href="#同步-异步" class="headerlink" title="同步/异步"></a>同步/异步</h2><blockquote><ul><li><strong>异步: (非阻塞)</strong><ol><li>当程序正在执行一个较长时间的程序, 不等待他的返回,就是异步</li><li>异步效率高.</li></ol></li><li><strong>同步:(阻塞)</strong><ol><li>当程序中存在竞争资源,  或者正在读取的数据可能被修改 就使用同步存取</li><li>如果有公共数据就要用同步方法</li><li>数据库的排它锁</li></ol></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程的基础 </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单的工厂模式</title>
      <link href="/2020/05/23/%E7%AE%80%E5%8D%95%E7%9A%84%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/05/23/%E7%AE%80%E5%8D%95%E7%9A%84%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="简单的工厂模式-大话设计模式"><a href="#简单的工厂模式-大话设计模式" class="headerlink" title="简单的工厂模式 - 大话设计模式"></a>简单的工厂模式 - 大话设计模式</h1><p><strong><em>每一个模式描述了一个在我们周围不断重复发生的问题,以及该问题的解决方案的核心。</em></strong></p><blockquote><p>先了解面向对象设计</p></blockquote><blockquote><p>当你需要实例化哪个类,或者未来会不会增加实例化对象,所以考虑用一个单独的类来做这个创造实例化的过程–<kbd>工厂</kbd> </p></blockquote><blockquote><p>耦合度降低 每个实例是相对独立的 做到了<strong>容易维护,扩展和复用</strong></p></blockquote><h2 id="例子"><a href="#例子" class="headerlink" title="例子:"></a>例子:</h2><p><img src="/images/SimpleFactory.png" alt="简单的工厂模式"><br>1.PO类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>sjs<span class="token punctuation">.</span>SimpleFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Operation</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> numberA<span class="token punctuation">;</span>    <span class="token keyword">double</span> numberB<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getNumberA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> numberA<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNumberA</span><span class="token punctuation">(</span><span class="token keyword">double</span> numberA<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>numberA <span class="token operator">=</span> numberA<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getNumberB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> numberB<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNumberB</span><span class="token punctuation">(</span><span class="token keyword">double</span> numberB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>numberB <span class="token operator">=</span> numberB<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getReasult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.加减乘除类(封装类继承基类)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>sjs<span class="token punctuation">.</span>SimpleFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Add</span> <span class="token keyword">extends</span> <span class="token class-name">Operation</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 重写getResult方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getReasult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>numberA <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span>numberB<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Operation</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 重写getResult方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getReasult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>numberA <span class="token operator">-</span> <span class="token keyword">super</span><span class="token punctuation">.</span>numberB<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.简单工厂类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>sjs<span class="token punctuation">.</span>SimpleFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperationFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 当你输入表达式工厂自动匹配类创建对象</span>    <span class="token comment" spellcheck="true">// 实例化对象的问题交给工厂</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Operation <span class="token function">operation</span><span class="token punctuation">(</span>String operate<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 用符号自动匹配要创建的实例</span>        Operation operation <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>operate<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">"+"</span><span class="token operator">:</span>                <span class="token comment" spellcheck="true">// add</span>                operation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"-"</span><span class="token operator">:</span>                <span class="token comment" spellcheck="true">// sub</span>                operation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> operation<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.使用简单工厂模式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>sjs<span class="token punctuation">.</span>SimpleFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 简单工厂模式()</span>        <span class="token comment" spellcheck="true">// 用工厂类自动创建实例</span>        Operation operation <span class="token operator">=</span> OperationFactory<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        operation<span class="token punctuation">.</span><span class="token function">setNumberA</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        operation<span class="token punctuation">.</span><span class="token function">setNumberB</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>operation<span class="token punctuation">.</span><span class="token function">getReasult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 没有代理模式</span><span class="token comment" spellcheck="true">//        Operation add = new Add();</span><span class="token comment" spellcheck="true">//        add.setNumberA(12);</span><span class="token comment" spellcheck="true">//        add.setNumberB(23);</span><span class="token comment" spellcheck="true">//        System.out.println(add.getReasult());</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        Operation sub = new Sub();</span><span class="token comment" spellcheck="true">//        sub.setNumberA(12);</span><span class="token comment" spellcheck="true">//        sub.setNumberB(23);</span><span class="token comment" spellcheck="true">//        System.out.println(sub.getReasult());</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大话设计模式 </category>
          
          <category> 抄书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单工厂模式 </tag>
            
            <tag> GOF-23 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一题-76.最小覆盖子串</title>
      <link href="/2020/05/23/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-76-%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2-1/"/>
      <url>/2020/05/23/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-76-%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2-1/</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode每日一题-76-最小覆盖子串"><a href="#leetcode每日一题-76-最小覆盖子串" class="headerlink" title="leetcode每日一题:76.最小覆盖子串"></a>leetcode每日一题:76.最小覆盖子串</h1><p><a href="https://leetcode-cn.com/problems/minimum-window-substring/" target="_blank" rel="noopener">76.最小覆盖子串</a><br><br><img src="/images/76.png" alt="img"><br><br>代码和注释:</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mainTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">minWindow</span><span class="token punctuation">(</span><span class="token string">"ADOBECODEBANC"</span><span class="token punctuation">,</span> <span class="token string">"ABC"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 滑动窗口</span>    <span class="token keyword">public</span> String <span class="token function">minWindow</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> String t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 左右指针</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 存储s和t出现次数</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> snum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tnum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tlen <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// t串存入</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tlen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tnum<span class="token punctuation">[</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> minLenth <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 右指针移动</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            snum<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将s出现的次数存入数组</span>            <span class="token comment" spellcheck="true">// 如果满足 当前字符是t字符里的 并且在当前范围只出现一次</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tnum<span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> tnum<span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">>=</span> snum<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 当长度满足t时</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> tlen<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 从左到右移动left 指针直到count长度不足</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tnum<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> tnum<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">>=</span> snum<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    count<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 找到最短长度 将初始和结尾储存</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> minLenth<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    minLenth <span class="token operator">=</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    min <span class="token operator">=</span> left<span class="token punctuation">;</span>                    max <span class="token operator">=</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                snum<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            right<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 记录/踩坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DataBase&amp;algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的hexo博客搭建配置更改</title>
      <link href="/2020/05/22/%E6%88%91%E7%9A%84hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE%E6%9B%B4%E6%94%B9/"/>
      <url>/2020/05/22/%E6%88%91%E7%9A%84hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE%E6%9B%B4%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="从0开始搭建hexo博客-win10"><a href="#从0开始搭建hexo博客-win10" class="headerlink" title="从0开始搭建hexo博客(win10)"></a>从0开始搭建hexo博客(win10)</h1><h2 id="基本安装"><a href="#基本安装" class="headerlink" title="基本安装"></a>基本安装</h2><blockquote><p>安装node.js <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js官网下载地址</a></br><br>安装git <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git官方下载地址</a></br><br>在git/gitee 新建库并且以你的名字命名 git:<kbd>yourName.github.io</kbd> gitee:<kbd>yourName</kbd><br><br>安装hexo<kbd>$ npm install -g hexo-cli</kbd> win会有警告 忽略就好</br><br>新建: (<strong>找到你的文件夹</strong>)执行 <kbd>hexo init</kbd>   <kbd>$ cd </kbd>   <kbd>$ npm install </kbd></br><br>配置:</p><blockquote><p>可以参考 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">这里</a> <br></p><pre><code>建议配置:**url**: https://gitee.com/xxx/xxx.git 你的博客访问地址**per_page**:改为6的倍数 6,12,18 **# Site** 此处 有更多关于首页配置**title**: 博客名字</code></pre></blockquote></blockquote><p>hexo的目录配置</p><pre class=" language-markdown"><code class="language-markdown">|-- demo//项目跟目录名<span class="token code keyword">    |-- .gitignore//git时忽略的文件或目录</span><span class="token code keyword">    |-- package-lock.json</span><span class="token code keyword">    |-- package.json//应用程序的信息</span><span class="token code keyword">    |-- _config.yml//网站的配置信息</span><span class="token code keyword">    |-- scaffolds//模板文件夹，Hexo的模板是指在新建的markdown文件中默认填充的内容。</span><span class="token code keyword">    |   |-- draft.md</span><span class="token code keyword">    |   |-- page.md</span><span class="token code keyword">    |   |-- post.md//博文模板</span><span class="token code keyword">    |-- source//资源文件夹，存放用户资源</span><span class="token code keyword">    |   |-- _posts//博文目录</span><span class="token code keyword">    |       |-- hello-world.md//博文</span><span class="token code keyword">    |-- themes//主题文件夹，Hexo 会根据主题来生成静态页面</span><span class="token code keyword">        |-- landscape.//默认主题</span></code></pre><h2 id="配置git和gitee库"><a href="#配置git和gitee库" class="headerlink" title="配置git和gitee库"></a>配置git和gitee库</h2><ol><li>首先你要有这两个仓库</li><li>修改[^ _config.yml ] 此文件的配置<pre><code>deploy:type: &#39;git&#39;repo:   github: https://github.com/xxxx/xxxx.github.io.git   gitee: https://gitee.com/xxxx/xxxx.gitbranch: master</code></pre></li><li>在执行 hexo d 就能在你的链接访问啦</li><li><strong>提示</strong>：gitee要启动一下gitee Pages<kbd>自你的库-服务- gitee pages</kbd>每次更新后要重新更新一下gitee Pages<h2 id="基本语句"><a href="#基本语句" class="headerlink" title="基本语句"></a>基本语句</h2><ul><li>执行 <kbd>hexo server</kbd> == <kbd>hexo s</kbd> 默认为 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br></li><li><ul><li><kbd>-p</kbd> 选项，指定服务器端口，默认为 4000</li></ul></li><li><ul><li><kbd>-i</kbd> 选项，指定服务器 IP 地址，默认为 0.0.0.0</li></ul></li><li><ul><li><kbd>-s</kbd> 选项，静态模式 ，仅提供 public 文件夹中的文件并禁用文件监视</li></ul></li><li><kbd>hexo generate</kbd> 命令用于生成静态文件，一般可以简写为 hexo g</li><li><kbd>hexo d</kbd> 发布到 git/gitee库</li><li><strong>说明</strong> ：部署前需要修改 _config.yml 配置文件，下面以 git/gitee 为例进行</li><li><kbd>hexo clean</kbd> 命令用于清理缓存文件，是一个比较常用的命令</li><li>根目录命令行输入hexo new &lt;模板&gt; &lt;文章名&gt; 新建博客</li><li>末班在scaffold文件夹下</li></ul></li></ol><table><thead><tr><th>参数</th><th>功能</th><th>路径</th></tr></thead><tbody><tr><td>post</td><td>新建文章</td><td>/source/_posts/</td></tr><tr><td>draft</td><td>新建草稿</td><td>/source/_drafts/</td></tr><tr><td>page</td><td>新建页面（标签页，分类页等）</td><td>/source/</td></tr></tbody></table><h2 id="主题安装配置"><a href="#主题安装配置" class="headerlink" title="主题安装配置"></a>主题安装配置</h2><p> 有很多优秀好看的主题 next等 不想折腾就用next吧 用的多排坑的也多 <br><br> 我的是Matery 我的主页下方有下载地址[^ Theme Matery ] 或者戳<a href="https://github.com/blinkfox/hexo-theme-matery">这里</a><br><br> (下载的主题有说明文档)😜 </p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><blockquote><p> 图片轮播位置: _config.yml/ myGallery:<br>文章图片: _config.yml/  featureImages</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> build </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
